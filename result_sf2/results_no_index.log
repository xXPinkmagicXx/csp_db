=== Experiment: no_index ===
INDEX_ALL=0
INDEX_NUMBERS=0
INDEX_DATES=0
INDEX_TEXT=0
INDEX_DEFAULT=0

[Info] Running drop_indexes.sh
[Info] Dropping date indexes
[Info] Dropping numbers indexes
[Info] Dropping text indexes
[Info] Running create_indexes.sh

[Info] Running queries(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22) for no_index
BEGIN;
BEGIN
EXPLAIN
select
	l_returnflag,
	l_linestatus,
	sum(l_quantity) as sum_qty,
	sum(l_extendedprice) as sum_base_price,
	sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
	avg(l_quantity) as avg_qty,
	avg(l_extendedprice) as avg_price,
	avg(l_discount) as avg_disc,
	count(*) as count_order
from
	lineitem
where
	l_shipdate <= date '1998-12-01' - interval '114 days'
group by
	l_returnflag,
	l_linestatus
order by
	l_returnflag,
	l_linestatus;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=377949.28..390983.27 rows=40000 width=248)
   Group Key: l_returnflag, l_linestatus
   ->  Gather Merge  (cost=377949.28..387283.27 rows=80000 width=248)
         Workers Planned: 2
         ->  Sort  (cost=376949.26..377049.26 rows=40000 width=248)
               Sort Key: l_returnflag, l_linestatus
               ->  Partial HashAggregate  (cost=351246.74..369240.22 rows=40000 width=248)
                     Group Key: l_returnflag, l_linestatus
                     Planned Partitions: 8
                     ->  Parallel Seq Scan on lineitem  (cost=0.00..248490.50 rows=625133 width=88)
                           Filter: (l_shipdate <= '1998-08-09 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 9
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(14 rows)

COMMIT;
COMMIT

Query 1 execution times in seconds: 0.187,0.181,0.179,0.189,0.193,0.186,0.194,0.188,0.191,0.183
Average execution time: 0.1871 seconds

BEGIN;
BEGIN
EXPLAIN
select
	s_acctbal,
	s_name,
	n_name,
	p_partkey,
	p_mfgr,
	s_address,
	s_phone,
	s_comment
from
	part,
	supplier,
	partsupp,
	nation,
	region
where
	p_partkey = ps_partkey
	and s_suppkey = ps_suppkey
	and p_size = 37
	and p_type like '%BRASS'
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'AFRICA'
	and ps_supplycost = (
		select
			min(ps_supplycost)
		from
			partsupp,
			supplier,
			nation,
			region
		where
			p_partkey = ps_partkey
			and s_suppkey = ps_suppkey
			and s_nationkey = n_nationkey
			and n_regionkey = r_regionkey
			and r_name = 'AFRICA'
	)
order by
	s_acctbal desc,
	n_name,
	s_name,
	p_partkey
LIMIT 100;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=67868.01..67868.01 rows=1 width=270)
   ->  Sort  (cost=67868.01..67868.01 rows=1 width=270)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=48566.30..67868.00 rows=1 width=270)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Gather Merge  (cost=1000.45..18318.95 rows=1670 width=30)
                     Workers Planned: 2
                     ->  Parallel Index Scan using part_pkey on part  (cost=0.42..17126.17 rows=696 width=30)
                           Filter: (((p_type)::text ~~ '%BRASS'::text) AND (p_size = 37))
               ->  Sort  (cost=47565.85..47589.38 rows=9411 width=250)
                     Sort Key: partsupp.ps_partkey
                     ->  Gather  (cost=1773.96..46944.72 rows=9411 width=250)
                           Workers Planned: 2
                           ->  Hash Join  (cost=773.96..45003.62 rows=3921 width=250)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Parallel Seq Scan on partsupp  (cost=0.00..41690.42 rows=666642 width=14)
                                 ->  Hash  (cost=772.49..772.49 rows=118 width=244)
                                       ->  Hash Join  (cost=24.31..772.49 rows=118 width=244)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..672.00 rows=20000 width=144)
                                             ->  Hash  (cost=24.29..24.29 rows=1 width=108)
                                                   ->  Hash Join  (cost=12.14..24.29 rows=1 width=108)
                                                         Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..11.70 rows=170 width=112)
                                                         ->  Hash  (cost=12.12..12.12 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..12.12 rows=1 width=4)
                                                                     Filter: (r_name = 'AFRICA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=49.52..49.53 rows=1 width=32)
                       ->  Nested Loop  (cost=1.01..49.51 rows=1 width=6)
                             ->  Nested Loop  (cost=0.86..47.63 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..46.97 rows=4 width=10)
                                         ->  Index Scan using partsupp_pkey on partsupp partsupp_1  (cost=0.43..13.75 rows=4 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..8.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
                             ->  Memoize  (cost=0.15..0.46 rows=1 width=4)
                                   Cache Key: nation_1.n_regionkey
                                   Cache Mode: logical
                                   ->  Index Scan using region_pkey on region region_1  (cost=0.14..0.45 rows=1 width=4)
                                         Index Cond: (r_regionkey = nation_1.n_regionkey)
                                         Filter: (r_name = 'AFRICA'::bpchar)
(45 rows)

COMMIT;
COMMIT

Query 2 execution times in seconds: 0.149,0.142,0.141,0.148,0.151,0.149,0.151,0.151,0.146,0.148
Average execution time: 0.1476 seconds

BEGIN;
BEGIN
EXPLAIN
select
	l_orderkey,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	o_orderdate,
	o_shippriority
from
	customer,
	orders,
	lineitem
where
	c_mktsegment = 'AUTOMOBILE'
	and c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate < date '1995-03-05'
	and l_shipdate > date '1995-03-05'
group by
	l_orderkey,
	o_orderdate,
	o_shippriority
order by
	revenue desc,
	o_orderdate
LIMIT 10;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=360797.41..360797.44 rows=10 width=44)
   ->  Sort  (cost=360797.41..361156.96 rows=143819 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=338762.26..357689.53 rows=143819 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=338762.26..354393.67 rows=119850 width=44)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=337762.23..339559.98 rows=59925 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=337762.23..337912.05 rows=59925 width=48)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Parallel Hash Join  (cost=80077.99..331162.42 rows=59925 width=48)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..248490.50 rows=625133 width=40)
                                             Filter: (l_shipdate > '1995-03-05'::date)
                                       ->  Parallel Hash  (cost=78580.01..78580.01 rows=119838 width=12)
                                             ->  Parallel Hash Join  (cost=9120.71..78580.01 rows=119838 width=12)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..67874.79 rows=603615 width=16)
                                                         Filter: (o_orderdate < '1995-03-05'::date)
                                                   ->  Parallel Hash  (cost=8810.50..8810.50 rows=24817 width=4)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..8810.50 rows=24817 width=4)
                                                               Filter: (c_mktsegment = 'AUTOMOBILE'::bpchar)
 JIT:
   Functions: 34
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(26 rows)

COMMIT;
COMMIT

Query 3 execution times in seconds: 0.194,0.191,0.193,0.200,0.188,0.199,0.184,0.191,0.191,0.188
Average execution time: 0.1919 seconds

BEGIN;
BEGIN
EXPLAIN
select
	o_orderpriority,
	count(*) as order_count
from
	orders
where
	o_orderdate >= date '1993-12-01'
	and o_orderdate < cast(date '1993-12-01' + interval '3 month' as date)
	and exists (
		select
			*
		from
			lineitem
		where
			l_orderkey = o_orderkey
			and l_commitdate < l_receiptdate
	)
group by
	o_orderpriority
order by
	o_orderpriority;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Sort  (cost=287032.12..287032.13 rows=5 width=24)
   Sort Key: orders.o_orderpriority
   ->  HashAggregate  (cost=287032.01..287032.06 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop  (cost=285061.23..286746.30 rows=57142 width=16)
               ->  HashAggregate  (cost=285060.80..285062.80 rows=200 width=4)
                     Group Key: lineitem.l_orderkey
                     ->  Seq Scan on lineitem  (cost=0.00..281310.00 rows=1500320 width=4)
                           Filter: (l_commitdate < l_receiptdate)
               ->  Index Scan using orders_pkey on orders  (cost=0.43..8.41 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
                     Filter: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
 JIT:
   Functions: 13
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(15 rows)

COMMIT;
COMMIT

Query 4 execution times in seconds: 0.191,0.188,0.189,0.194,0.192,0.187,0.188,0.184,0.189,0.182
Average execution time: 0.1884 seconds

BEGIN;
BEGIN
EXPLAIN
select
	n_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue
from
	customer,
	orders,
	lineitem,
	supplier,
	nation,
	region
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and l_suppkey = s_suppkey
	and c_nationkey = s_nationkey
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'ASIA'
	and o_orderdate >= date '1996-01-01'
	and o_orderdate < date '1996-01-01' + interval '1 year'
group by
	n_name
order by
	revenue desc;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=259217.08..259217.49 rows=162 width=136)
   Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
   ->  Finalize GroupAggregate  (cost=259190.69..259211.14 rows=162 width=136)
         Group Key: nation.n_name
         ->  Gather Merge  (cost=259190.69..259208.09 rows=136 width=136)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=258190.67..258192.37 rows=68 width=136)
                     Group Key: nation.n_name
                     ->  Sort  (cost=258190.67..258190.84 rows=68 width=140)
                           Sort Key: nation.n_name
                           ->  Nested Loop  (cost=774.81..258188.60 rows=68 width=140)
                                 Join Filter: (customer.c_nationkey = supplier.s_nationkey)
                                 ->  Nested Loop  (cost=774.39..257304.26 rows=1692 width=152)
                                       ->  Hash Join  (cost=773.96..251719.36 rows=11032 width=152)
                                             Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                             ->  Parallel Seq Scan on lineitem  (cost=0.00..243802.00 rows=1875400 width=44)
                                             ->  Hash  (cost=772.49..772.49 rows=118 width=116)
                                                   ->  Hash Join  (cost=24.31..772.49 rows=118 width=116)
                                                         Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                         ->  Seq Scan on supplier  (cost=0.00..672.00 rows=20000 width=8)
                                                         ->  Hash  (cost=24.29..24.29 rows=1 width=108)
                                                               ->  Hash Join  (cost=12.14..24.29 rows=1 width=108)
                                                                     Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation  (cost=0.00..11.70 rows=170 width=112)
                                                                     ->  Hash  (cost=12.12..12.12 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..12.12 rows=1 width=4)
                                                                                 Filter: (r_name = 'ASIA'::bpchar)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..0.51 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
                                             Filter: ((o_orderdate >= '1996-01-01'::date) AND (o_orderdate < '1997-01-01 00:00:00'::timestamp without time zone))
                                 ->  Index Scan using customer_pkey on customer  (cost=0.42..0.51 rows=1 width=8)
                                       Index Cond: (c_custkey = orders.o_custkey)
 JIT:
   Functions: 49
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(35 rows)

COMMIT;
COMMIT

Query 5 execution times in seconds: 0.189,0.192,0.195,0.194,0.200,0.204,0.191,0.201,0.195,0.199
Average execution time: 0.1960 seconds

BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice * l_discount) as revenue
from
	lineitem
where
	l_shipdate >= date '1997-01-01'
	and l_shipdate < cast(date '1997-01-01' + interval '1 year' as date)
	and l_discount between 0.04 - 0.01 and 0.04 + 0.01
	and l_quantity < 25;
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=268244.81..268244.82 rows=1 width=32)
   ->  Gather  (cost=268244.58..268244.79 rows=2 width=32)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=267244.58..267244.59 rows=1 width=32)
               ->  Parallel Seq Scan on lineitem  (cost=0.00..267244.50 rows=16 width=36)
                     Filter: ((l_shipdate >= '1997-01-01'::date) AND (l_shipdate < '1998-01-01'::date) AND (l_discount >= 0.03) AND (l_discount <= 0.05) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 7
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(9 rows)

COMMIT;
COMMIT

Query 6 execution times in seconds: 0.185,0.189,0.184,0.188,0.171,0.187,0.183,0.187,0.185,0.185
Average execution time: 0.1844 seconds

BEGIN;
BEGIN
EXPLAIN
select
	supp_nation,
	cust_nation,
	l_year,
	sum(volume) as revenue
from
	(
		select
			n1.n_name as supp_nation,
			n2.n_name as cust_nation,
			extract(year from l_shipdate) as l_year,
			l_extendedprice * (1 - l_discount) as volume
		from
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2
		where
			s_suppkey = l_suppkey
			and o_orderkey = l_orderkey
			and c_custkey = o_custkey
			and s_nationkey = n1.n_nationkey
			and c_nationkey = n2.n_nationkey
			and (
				(n1.n_name = 'PERU' and n2.n_name = 'EGYPT')
				or (n1.n_name = 'EGYPT' and n2.n_name = 'PERU')
			)
			and l_shipdate between date '1995-01-01' and date '1996-12-31'
	) as shipping
group by
	supp_nation,
	cust_nation,
	l_year
order by
	supp_nation,
	cust_nation,
	l_year;
                                                                               QUERY PLAN                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=255591.39..255591.46 rows=2 width=272)
   Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
   ->  Sort  (cost=255591.39..255591.40 rows=2 width=276)
         Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Gather  (cost=1754.75..255591.38 rows=2 width=276)
               Workers Planned: 2
               ->  Hash Join  (cost=754.75..254591.18 rows=1 width=276)
                     Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'EGYPT'::bpchar)) OR ((n1.n_name = 'EGYPT'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Nested Loop  (cost=742.18..254578.31 rows=110 width=148)
                           ->  Nested Loop  (cost=741.76..254528.73 rows=110 width=148)
                                 ->  Hash Join  (cost=741.33..253956.59 rows=110 width=148)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..253179.00 rows=9377 width=48)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=738.39..738.39 rows=235 width=108)
                                             ->  Hash Join  (cost=12.58..738.39 rows=235 width=108)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Seq Scan on supplier  (cost=0.00..672.00 rows=20000 width=8)
                                                   ->  Hash  (cost=12.55..12.55 rows=2 width=108)
                                                         ->  Seq Scan on nation n1  (cost=0.00..12.55 rows=2 width=108)
                                                               Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'EGYPT'::bpchar))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..5.20 rows=1 width=8)
                                       Index Cond: (o_orderkey = lineitem.l_orderkey)
                           ->  Index Scan using customer_pkey on customer  (cost=0.42..0.45 rows=1 width=8)
                                 Index Cond: (c_custkey = orders.o_custkey)
                     ->  Hash  (cost=12.55..12.55 rows=2 width=108)
                           ->  Seq Scan on nation n2  (cost=0.00..12.55 rows=2 width=108)
                                 Filter: ((n_name = 'EGYPT'::bpchar) OR (n_name = 'PERU'::bpchar))
 JIT:
   Functions: 49
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(32 rows)

COMMIT;
COMMIT

Query 7 execution times in seconds: 0.196,0.179,0.201,0.190,0.195,0.194,0.186,0.189,0.196,0.194
Average execution time: 0.1920 seconds

BEGIN;
BEGIN
EXPLAIN
select
	o_year,
	sum(case
		when nation = 'ETHIOPIA' then volume
		else 0
	end) / sum(volume) as mkt_share
from
	(
		select
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) as volume,
			n2.n_name as nation
		from
			part,
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2,
			region
		where
			p_partkey = l_partkey
			and s_suppkey = l_suppkey
			and l_orderkey = o_orderkey
			and o_custkey = c_custkey
			and c_nationkey = n1.n_nationkey
			and n1.n_regionkey = r_regionkey
			and r_name = 'AFRICA'
			and s_nationkey = n2.n_nationkey
			and o_orderdate between date '1995-01-01' and date '1996-12-31'
			and p_type = 'PROMO POLISHED STEEL'
	) as all_nations
group by
	o_year
order by
	o_year;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=268218.66..268226.23 rows=53 width=64)
   Group Key: (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=268218.66..268224.62 rows=44 width=96)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=267218.63..267219.51 rows=22 width=96)
               Group Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=267218.63..267218.69 rows=22 width=172)
                     Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                     ->  Nested Loop  (cost=10346.80..267218.14 rows=22 width=172)
                           ->  Nested Loop  (cost=10346.66..267214.46 rows=22 width=44)
                                 ->  Hash Join  (cost=10346.37..267207.74 rows=22 width=44)
                                       Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                       ->  Nested Loop  (cost=10322.06..267169.02 rows=3785 width=48)
                                             ->  Nested Loop  (cost=10321.64..265369.19 rows=3785 width=48)
                                                   ->  Parallel Hash Join  (cost=10321.21..259046.19 rows=12490 width=44)
                                                         Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                                         ->  Parallel Seq Scan on lineitem  (cost=0.00..243802.00 rows=1875400 width=48)
                                                         ->  Parallel Hash  (cost=10307.33..10307.33 rows=1110 width=4)
                                                               ->  Parallel Seq Scan on part  (cost=0.00..10307.33 rows=1110 width=4)
                                                                     Filter: ((p_type)::text = 'PROMO POLISHED STEEL'::text)
                                                   ->  Index Scan using orders_pkey on orders  (cost=0.43..0.51 rows=1 width=12)
                                                         Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Index Scan using customer_pkey on customer  (cost=0.42..0.48 rows=1 width=8)
                                                   Index Cond: (c_custkey = orders.o_custkey)
                                       ->  Hash  (cost=24.29..24.29 rows=1 width=4)
                                             ->  Hash Join  (cost=12.14..24.29 rows=1 width=4)
                                                   Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on nation n1  (cost=0.00..11.70 rows=170 width=8)
                                                   ->  Hash  (cost=12.12..12.12 rows=1 width=4)
                                                         ->  Seq Scan on region  (cost=0.00..12.12 rows=1 width=4)
                                                               Filter: (r_name = 'AFRICA'::bpchar)
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.31 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using nation_pkey on nation n2  (cost=0.14..0.16 rows=1 width=108)
                                 Index Cond: (n_nationkey = supplier.s_nationkey)
 JIT:
   Functions: 55
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(39 rows)

COMMIT;
COMMIT

Query 8 execution times in seconds: 0.192,0.194,0.196,0.193,0.201,0.199,0.197,0.184,0.198,0.196
Average execution time: 0.1950 seconds

BEGIN;
BEGIN
EXPLAIN
select
	nation,
	o_year,
	sum(amount) as sum_profit
from
	(
		select
			n_name as nation,
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount
		from
			part,
			supplier,
			lineitem,
			partsupp,
			orders,
			nation
		where
			s_suppkey = l_suppkey
			and ps_suppkey = l_suppkey
			and ps_partkey = l_partkey
			and p_partkey = l_partkey
			and o_orderkey = l_orderkey
			and s_nationkey = n_nationkey
			and p_name like '%seashell%'
	) as profit
group by
	nation,
	o_year
order by
	nation,
	o_year desc;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=371889.57..402374.21 rows=227321 width=168)
   Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=371889.57..397070.05 rows=189434 width=168)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=370889.55..374204.65 rows=94717 width=168)
               Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=370889.55..371126.34 rows=94717 width=196)
                     Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                     ->  Hash Join  (cost=11349.24..353995.56 rows=94717 width=196)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Nested Loop  (cost=11335.42..353490.11 rows=94717 width=68)
                                 ->  Hash Join  (cost=11334.99..306013.69 rows=94717 width=68)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Nested Loop  (cost=10412.99..304843.00 rows=94717 width=72)
                                             ->  Parallel Hash Join  (cost=10412.56..259137.54 rows=94717 width=70)
                                                   Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                                   ->  Parallel Seq Scan on lineitem  (cost=0.00..243802.00 rows=1875400 width=66)
                                                   ->  Parallel Hash  (cost=10307.33..10307.33 rows=8418 width=4)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..10307.33 rows=8418 width=4)
                                                               Filter: ((p_name)::text ~~ '%seashell%'::text)
                                             ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..0.48 rows=1 width=14)
                                                   Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                       ->  Hash  (cost=672.00..672.00 rows=20000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..672.00 rows=20000 width=8)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..0.50 rows=1 width=8)
                                       Index Cond: (o_orderkey = lineitem.l_orderkey)
                           ->  Hash  (cost=11.70..11.70 rows=170 width=108)
                                 ->  Seq Scan on nation  (cost=0.00..11.70 rows=170 width=108)
 JIT:
   Functions: 45
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(31 rows)

COMMIT;
COMMIT

Query 9 execution times in seconds: 0.193,0.204,0.198,0.205,0.197,0.197,0.195,0.199,0.196,0.203
Average execution time: 0.1987 seconds

BEGIN;
BEGIN
EXPLAIN
select
	c_custkey,
	c_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	c_acctbal,
	n_name,
	c_address,
	c_phone,
	c_comment
from
	customer,
	orders,
	lineitem,
	nation
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate >= date '1994-08-01'
	and o_orderdate < cast(date '1994-08-01' + interval '3 month' as date)
	and l_returnflag = 'R'
	and c_nationkey = n_nationkey
group by
	c_custkey,
	c_name,
	c_acctbal,
	c_phone,
	n_name,
	c_address,
	c_comment
order by
	revenue desc
LIMIT 20;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=298736.23..298736.28 rows=20 width=279)
   ->  Sort  (cost=298736.23..298738.42 rows=875 width=279)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=298600.41..298712.95 rows=875 width=279)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=298600.41..298694.71 rows=730 width=279)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=297600.39..297610.42 rows=365 width=279)
                           Group Key: customer.c_custkey, nation.n_name
                           ->  Sort  (cost=297600.39..297601.30 rows=365 width=283)
                                 Sort Key: customer.c_custkey, nation.n_name
                                 ->  Nested Loop  (cost=1.01..297584.85 rows=365 width=283)
                                       ->  Nested Loop  (cost=0.85..297571.55 rows=365 width=183)
                                             ->  Nested Loop  (cost=0.43..297309.86 rows=365 width=40)
                                                   ->  Parallel Seq Scan on lineitem  (cost=0.00..248490.50 rows=9377 width=40)
                                                         Filter: (l_returnflag = 'R'::bpchar)
                                                   ->  Index Scan using orders_pkey on orders  (cost=0.43..5.21 rows=1 width=8)
                                                         Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                         Filter: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Index Scan using customer_pkey on customer  (cost=0.42..0.72 rows=1 width=147)
                                                   Index Cond: (c_custkey = orders.o_custkey)
                                       ->  Memoize  (cost=0.15..0.17 rows=1 width=108)
                                             Cache Key: customer.c_nationkey
                                             Cache Mode: logical
                                             ->  Index Scan using nation_pkey on nation  (cost=0.14..0.16 rows=1 width=108)
                                                   Index Cond: (n_nationkey = customer.c_nationkey)
 JIT:
   Functions: 31
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(29 rows)

COMMIT;
COMMIT

Query 10 execution times in seconds: 0.190,0.187,0.190,0.193,0.193,0.201,0.188,0.191,0.189,0.196
Average execution time: 0.1918 seconds

BEGIN;
BEGIN
EXPLAIN
select
	ps_partkey,
	sum(ps_supplycost * ps_availqty) as value
from
	partsupp,
	supplier,
	nation
where
	ps_suppkey = s_suppkey
	and s_nationkey = n_nationkey
	and n_name = 'MOROCCO'
group by
	ps_partkey having
		sum(ps_supplycost * ps_availqty) > (
			select
				sum(ps_supplycost * ps_availqty) *         inf
			from
				partsupp,
				supplier,
				nation
			where
				ps_suppkey = s_suppkey
				and s_nationkey = n_nationkey
				and n_name = 'MOROCCO'
		)
order by
	value desc;
ERROR:  column "inf" does not exist
LINE 17:     sum(ps_supplycost * ps_availqty) *         inf
                                                        ^

Query 11 execution times in seconds: 0.140,0.140,0.140,0.137,0.140,0.139,0.142,0.140,0.139,0.136
Average execution time: 0.1393 seconds

BEGIN;
BEGIN
EXPLAIN
select
	l_shipmode,
	sum(case
		when o_orderpriority = '1-URGENT'
			or o_orderpriority = '2-HIGH'
			then 1
		else 0
	end) as high_line_count,
	sum(case
		when o_orderpriority <> '1-URGENT'
			and o_orderpriority <> '2-HIGH'
			then 1
		else 0
	end) as low_line_count
from
	orders,
	lineitem
where
	o_orderkey = l_orderkey
	and l_shipmode in ('RAIL', 'AIR')
	and l_commitdate < l_receiptdate
	and l_shipdate < l_commitdate
	and l_receiptdate >= date '1997-01-01'
	and l_receiptdate < date '1997-01-01' + interval '1 year'
group by
	l_shipmode
order by
	l_shipmode;
                                                                                                                                 QUERY PLAN                                                                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=268329.16..268332.16 rows=24 width=60)
   Group Key: lineitem.l_shipmode
   ->  Gather Merge  (cost=268329.16..268331.77 rows=20 width=60)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=267329.14..267329.44 rows=10 width=60)
               Group Key: lineitem.l_shipmode
               ->  Sort  (cost=267329.14..267329.17 rows=10 width=60)
                     Sort Key: lineitem.l_shipmode
                     ->  Nested Loop  (cost=0.43..267328.98 rows=10 width=60)
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..267244.50 rows=10 width=48)
                                 Filter: ((l_shipmode = ANY ('{RAIL,AIR}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1997-01-01'::date) AND (l_receiptdate < '1998-01-01 00:00:00'::timestamp without time zone))
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..8.45 rows=1 width=20)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
 JIT:
   Functions: 15
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(16 rows)

COMMIT;
COMMIT

Query 12 execution times in seconds: 0.193,0.192,0.188,0.197,0.183,0.191,0.190,0.184,0.196,0.193
Average execution time: 0.1907 seconds

BEGIN;
BEGIN
EXPLAIN
select
	c_count,
	count(*) as custdist
from
	(
		select
			c_custkey,
			count(o_orderkey)
		from
			customer left outer join orders on
				c_custkey = o_custkey
				and o_comment not like '%pending%deposits%'
		group by
			c_custkey
	) as c_orders (c_custkey, c_count)
group by
	c_count
order by
	custdist desc,
	c_count desc;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=275011.53..275012.03 rows=200 width=16)
   Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
   ->  HashAggregate  (cost=275001.89..275003.89 rows=200 width=16)
         Group Key: count(orders.o_orderkey)
         ->  Finalize GroupAggregate  (cost=194497.00..270501.89 rows=300000 width=12)
               Group Key: customer.c_custkey
               ->  Gather Merge  (cost=194497.00..264501.89 rows=600000 width=12)
                     Workers Planned: 2
                     ->  Sort  (cost=193496.98..194246.98 rows=300000 width=12)
                           Sort Key: customer.c_custkey
                           ->  Partial HashAggregate  (cost=148409.49..161077.57 rows=300000 width=12)
                                 Group Key: customer.c_custkey
                                 Planned Partitions: 4
                                 ->  Parallel Hash Right Join  (cost=7675.96..78799.27 rows=1237515 width=8)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..67874.79 rows=1237515 width=8)
                                             Filter: ((o_comment)::text !~~ '%pending%deposits%'::text)
                                       ->  Parallel Hash  (cost=6113.46..6113.46 rows=125000 width=4)
                                             ->  Parallel Index Only Scan using customer_pkey on customer  (cost=0.42..6113.46 rows=125000 width=4)
 JIT:
   Functions: 18
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(22 rows)

COMMIT;
COMMIT

Query 13 execution times in seconds: 0.192,0.192,0.192,0.191,0.190,0.188,0.190,0.192,0.192,0.182
Average execution time: 0.1901 seconds

BEGIN;
BEGIN
EXPLAIN
select
	100.00 * sum(case
		when p_type like 'PROMO%'
			then l_extendedprice * (1 - l_discount)
		else 0
	end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue
from
	lineitem,
	part
where
	l_partkey = p_partkey
	and l_shipdate >= date '1993-04-01'
	and l_shipdate < cast(date '1993-04-01' + interval '1 month' as date);
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=268769.96..268769.97 rows=1 width=32)
   ->  Gather  (cost=268769.72..268769.93 rows=2 width=64)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=267769.72..267769.73 rows=1 width=64)
               ->  Parallel Hash Join  (cost=13114.00..267605.62 rows=9377 width=57)
                     Hash Cond: (lineitem.l_partkey = part.p_partkey)
                     ->  Parallel Seq Scan on lineitem  (cost=0.00..253179.00 rows=9377 width=40)
                           Filter: ((l_shipdate >= '1993-04-01'::date) AND (l_shipdate < '1993-05-01'::date))
                     ->  Parallel Hash  (cost=9890.67..9890.67 rows=166667 width=25)
                           ->  Parallel Seq Scan on part  (cost=0.00..9890.67 rows=166667 width=25)
 JIT:
   Functions: 16
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(13 rows)

COMMIT;
COMMIT

Query 14 execution times in seconds: 0.185,0.184,0.184,0.186,0.185,0.185,0.188,0.184,0.170,0.185
Average execution time: 0.1836 seconds

BEGIN;
BEGIN
create or replace view revenue0 (supplier_no, total_revenue) as
	select
		l_suppkey,
		sum(l_extendedprice * (1 - l_discount))
	from
		lineitem
	where
		l_shipdate >= '1993-09-01'
		and l_shipdate < date'1993-09-01' + interval '90 days'
	group by
		l_suppkey;
CREATE VIEW
EXPLAIN
select
	s_suppkey,
	s_name,
	s_address,
	s_phone,
	total_revenue
from
	supplier,
	revenue0
where
	s_suppkey = supplier_no
	and total_revenue = (
		select
			max(total_revenue)
		from
			revenue0
	)
order by
	s_suppkey;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=509769.51..509949.42 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=254971.55..254971.56 rows=1 width=32)
           ->  Finalize GroupAggregate  (cost=254797.67..254969.05 rows=200 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather Merge  (cost=254797.67..254963.55 rows=400 width=36)
                       Workers Planned: 2
                       ->  Partial GroupAggregate  (cost=253797.64..253917.36 rows=200 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Sort  (cost=253797.64..253821.09 rows=9377 width=40)
                                   Sort Key: lineitem_1.l_suppkey
                                   ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..253179.00 rows=9377 width=40)
                                         Filter: ((l_shipdate >= '1993-09-01'::date) AND (l_shipdate < '1993-11-30 00:00:00'::timestamp without time zone))
   ->  Finalize GroupAggregate  (cost=254797.67..254969.55 rows=1 width=36)
         Group Key: lineitem.l_suppkey
         Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
         ->  Gather Merge  (cost=254797.67..254963.55 rows=400 width=36)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=253797.64..253917.36 rows=200 width=36)
                     Group Key: lineitem.l_suppkey
                     ->  Sort  (cost=253797.64..253821.09 rows=9377 width=40)
                           Sort Key: lineitem.l_suppkey
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..253179.00 rows=9377 width=40)
                                 Filter: ((l_shipdate >= '1993-09-01'::date) AND (l_shipdate < '1993-11-30 00:00:00'::timestamp without time zone))
   ->  Index Scan using supplier_pkey on supplier  (cost=0.29..8.30 rows=1 width=71)
         Index Cond: (s_suppkey = lineitem.l_suppkey)
 JIT:
   Functions: 31
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(29 rows)

drop view revenue0;
DROP VIEW
COMMIT;
COMMIT

Query 15 execution times in seconds: 0.198,0.188,0.188,0.179,0.197,0.185,0.199,0.189,0.193,0.200
Average execution time: 0.1916 seconds

BEGIN;
BEGIN
EXPLAIN
select
	p_brand,
	p_type,
	p_size,
	count(distinct ps_suppkey) as supplier_cnt
from
	partsupp,
	part
where
	p_partkey = ps_partkey
	and p_brand <> 'Brand#55'
	and p_type not like 'STANDARD ANODIZED%'
	and p_size in (21, 26, 30, 14, 31, 50, 1, 16)
	and ps_suppkey not in (
		select
			s_suppkey
		from
			supplier
		where
			s_comment like '%Customer%Complaints%'
	)
group by
	p_brand,
	p_type,
	p_size
order by
	supplier_cnt desc,
	p_brand,
	p_type,
	p_size;
                                                                                           QUERY PLAN                                                                                           
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=71397.61..71478.40 rows=32315 width=44)
   Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
   ->  GroupAggregate  (cost=53268.80..68977.23 rows=32315 width=44)
         Group Key: part.p_brand, part.p_type, part.p_size
         ->  Gather Merge  (cost=53268.80..67437.53 rows=121655 width=40)
               Workers Planned: 2
               ->  Sort  (cost=52268.77..52395.50 rows=50690 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Parallel Hash Join  (cost=13429.92..48307.50 rows=50690 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=722.43..34725.03 rows=333321 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..722.00 rows=2 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Parallel Hash  (cost=12390.67..12390.67 rows=25346 width=40)
                                 ->  Parallel Seq Scan on part  (cost=0.00..12390.67 rows=25346 width=40)
                                       Filter: ((p_brand <> 'Brand#55'::bpchar) AND ((p_type)::text !~~ 'STANDARD ANODIZED%'::text) AND (p_size = ANY ('{21,26,30,14,31,50,1,16}'::integer[])))
(18 rows)

COMMIT;
COMMIT

Query 16 execution times in seconds: 0.145,0.142,0.148,0.144,0.148,0.148,0.142,0.148,0.145,0.145
Average execution time: 0.1455 seconds

BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice) / 7.0 as avg_yearly
from
	lineitem,
	part
where
	p_partkey = l_partkey
	and p_brand = 'Brand#52'
	and p_container = 'MED BAG'
	and l_quantity < (
		select
			0.2 * avg(l_quantity)
		from
			lineitem
		where
			l_partkey = p_partkey
	);
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Aggregate  (cost=1419108.83..1419108.84 rows=1 width=32)
   ->  Hash Join  (cost=11767.43..1419105.21 rows=1448 width=18)
         Hash Cond: (lineitem.l_partkey = part.p_partkey)
         Join Filter: (lineitem.l_quantity < (SubPlan 1))
         ->  Seq Scan on lineitem  (cost=0.00..270057.60 rows=4500960 width=40)
         ->  Hash  (cost=11762.60..11762.60 rows=386 width=4)
               ->  Gather  (cost=1000.00..11762.60 rows=386 width=4)
                     Workers Planned: 2
                     ->  Parallel Seq Scan on part  (cost=0.00..10724.00 rows=161 width=4)
                           Filter: ((p_brand = 'Brand#52'::bpchar) AND (p_container = 'MED BAG'::bpchar))
         SubPlan 1
           ->  Aggregate  (cost=281366.27..281366.28 rows=1 width=32)
                 ->  Seq Scan on lineitem lineitem_1  (cost=0.00..281310.00 rows=22505 width=18)
                       Filter: (l_partkey = part.p_partkey)
 JIT:
   Functions: 24
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

COMMIT;
COMMIT

Query 17 execution times in seconds: 0.190,0.185,0.179,0.194,0.188,0.186,0.186,0.187,0.191,0.189
Average execution time: 0.1875 seconds

BEGIN;
BEGIN
EXPLAIN
select
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice,
	sum(l_quantity)
from
	customer,
	orders,
	lineitem
where
	o_orderkey in (
		select
			l_orderkey
		from
			lineitem
		group by
			l_orderkey having
				sum(l_quantity) > 312
	)
	and c_custkey = o_custkey
	and o_orderkey = l_orderkey
group by
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice
order by
	o_totalprice desc,
	o_orderdate
LIMIT 100;
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=296364.50..296364.75 rows=100 width=71)
   ->  Sort  (cost=296364.50..296364.75 rows=101 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=296358.87..296361.14 rows=101 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Sort  (cost=296358.87..296359.12 rows=101 width=57)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     ->  Nested Loop  (cost=254190.45..296355.50 rows=101 width=57)
                           ->  Nested Loop  (cost=254190.02..254838.02 rows=67 width=43)
                                 ->  Nested Loop  (cost=254189.60..254807.82 rows=67 width=24)
                                       ->  Finalize GroupAggregate  (cost=254189.17..254241.84 rows=67 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '312'::numeric)
                                             ->  Gather Merge  (cost=254189.17..254235.84 rows=400 width=36)
                                                   Workers Planned: 2
                                                   ->  Sort  (cost=253189.14..253189.64 rows=200 width=36)
                                                         Sort Key: lineitem_1.l_orderkey
                                                         ->  Partial HashAggregate  (cost=253179.00..253181.50 rows=200 width=36)
                                                               Group Key: lineitem_1.l_orderkey
                                                               ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..243802.00 rows=1875400 width=22)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..8.45 rows=1 width=20)
                                             Index Cond: (o_orderkey = lineitem_1.l_orderkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.42..0.45 rows=1 width=23)
                                       Index Cond: (c_custkey = orders.o_custkey)
                           ->  Index Scan using lineitem_pkey on lineitem  (cost=0.43..394.61 rows=22505 width=22)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 26
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(29 rows)

COMMIT;
COMMIT

Query 18 execution times in seconds: 0.177,0.191,0.180,0.189,0.191,0.192,0.188,0.195,0.195,0.194
Average execution time: 0.1892 seconds

BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice* (1 - l_discount)) as revenue
from
	lineitem,
	part
where
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#51'
		and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')
		and l_quantity >= 5 and l_quantity <= 5+10
		and p_size between 1 and 5
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#44'
		and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')
		and l_quantity >= 18 and l_quantity <= 18+10
		and p_size between 1 and 10
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#11'
		and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')
		and l_quantity >= 25 and l_quantity <= 25+10
		and p_size between 1 and 15
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	);


 Aggregate  (cost=282318.64..282318.65 rows=1 width=32)
   ->  Gather  (cost=1000.42..282318.63 rows=1 width=36)
         Workers Planned: 2
         ->  Nested Loop  (cost=0.42..281318.53 rows=1 width=36)
               ->  Parallel Seq Scan on lineitem  (cost=0.00..281310.00 rows=1 width=58)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '5'::numeric) AND (l_quantity <= '15'::numeric)) OR ((l_quantity >= '18'::numeric) AND (l_quantity <= '28'::numeric)) OR ((l_quantity >= '25'::numeric) AND (l_quantity <= '35'::numeric))))
               ->  Index Scan using part_pkey on part  (cost=0.42..8.52 rows=1 width=30)
                     Index Cond: (p_partkey = lineitem.l_partkey)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#51'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#11'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))) AND (((p_brand = 'Brand#51'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (lineitem.l_quantity >= '5'::numeric) AND (lineitem.l_quantity <= '15'::numeric) AND (p_size <= 5)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (lineitem.l_quantity >= '18'::numeric) AND (lineitem.l_quantity <= '28'::numeric) AND (p_size <= 10)) OR ((p_brand = 'Brand#11'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (lineitem.l_quantity >= '25'::numeric) AND (lineitem.l_quantity <= '35'::numeric) AND (p_size <= 15))))
 JIT:
   Functions: 10
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(12 rows)

COMMIT;
COMMIT

Query 19 execution times in seconds: 0.193,0.195,0.195,0.193,0.187,0.196,0.189,0.178,0.185,0.190
Average execution time: 0.1901 seconds

BEGIN;
BEGIN
EXPLAIN
select
	s_name,
	s_address
from
	supplier,
	nation
where
	s_suppkey in (
		select
			ps_suppkey
		from
			partsupp
		where
			ps_partkey in (
				select
					p_partkey
				from
					part
				where
					p_name like 'sienna%'
			)
			and ps_availqty > (
				select
					0.5 * sum(l_quantity)
				from
					lineitem
				where
					l_partkey = ps_partkey
					and l_suppkey = ps_suppkey
					and l_shipdate >= '1993-01-01'
					and l_shipdate < cast(date '1993-01-01' + interval '1 year' as date)
			)
	)
	and s_nationkey = n_nationkey
	and n_name = 'UNITED KINGDOM'
order by
	s_name;
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3012832360.32..3012832360.40 rows=32 width=51)
   Sort Key: supplier.s_name
   ->  Nested Loop Semi Join  (cost=1.14..3012832359.52 rows=32 width=51)
         ->  Nested Loop  (cost=0.29..1316.40 rows=118 width=55)
               Join Filter: (nation.n_nationkey = supplier.s_nationkey)
               ->  Index Scan using supplier_pkey on supplier  (cost=0.29..1004.27 rows=20000 width=59)
               ->  Materialize  (cost=0.00..12.13 rows=1 width=4)
                     ->  Seq Scan on nation  (cost=0.00..12.12 rows=1 width=4)
                           Filter: (n_name = 'UNITED KINGDOM'::bpchar)
         ->  Nested Loop  (cost=0.85..25532466.46 rows=1 width=4)
               ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..25532452.62 rows=27 width=8)
                     Index Cond: (ps_suppkey = supplier.s_suppkey)
                     Filter: ((ps_availqty)::numeric > (SubPlan 1))
                     SubPlan 1
                       ->  Aggregate  (cost=315067.21..315067.22 rows=1 width=32)
                             ->  Seq Scan on lineitem  (cost=0.00..315067.20 rows=1 width=18)
                                   Filter: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01'::date) AND (l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
               ->  Index Scan using part_pkey on part  (cost=0.42..0.51 rows=1 width=4)
                     Index Cond: (p_partkey = partsupp.ps_partkey)
                     Filter: ((p_name)::text ~~ 'sienna%'::text)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(23 rows)

COMMIT;
COMMIT

Query 20 execution times in seconds: 0.192,0.184,0.190,0.196,0.192,0.188,0.192,0.197,0.195,0.192
Average execution time: 0.1918 seconds

BEGIN;
BEGIN
EXPLAIN
select
	s_name,
	count(*) as numwait
from
	supplier,
	lineitem l1,
	orders,
	nation
where
	s_suppkey = l1.l_suppkey
	and o_orderkey = l1.l_orderkey
	and o_orderstatus = 'F'
	and l1.l_receiptdate > l1.l_commitdate
	and exists (
		select
			*
		from
			lineitem l2
		where
			l2.l_orderkey = l1.l_orderkey
			and l2.l_suppkey <> l1.l_suppkey
	)
	and not exists (
		select
			*
		from
			lineitem l3
		where
			l3.l_orderkey = l1.l_orderkey
			and l3.l_suppkey <> l1.l_suppkey
			and l3.l_receiptdate > l3.l_commitdate
	)
	and s_nationkey = n_nationkey
	and n_name = 'IRAN'
group by
	s_name
order by
	numwait desc,
	s_name
LIMIT 100;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=798635.33..798635.58 rows=100 width=34)
   ->  Sort  (cost=798635.33..798638.03 rows=1078 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  Finalize GroupAggregate  (cost=798467.35..798594.13 rows=1078 width=34)
               Group Key: supplier.s_name
               ->  Gather Merge  (cost=798467.35..798578.86 rows=898 width=34)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=797467.33..797475.19 rows=449 width=34)
                           Group Key: supplier.s_name
                           ->  Sort  (cost=797467.33..797468.45 rows=449 width=26)
                                 Sort Key: supplier.s_name
                                 ->  Nested Loop  (cost=534057.02..797447.55 rows=449 width=26)
                                       ->  Parallel Hash Anti Join  (cost=534056.59..794860.38 rows=919 width=34)
                                             Hash Cond: (l1.l_orderkey = l3.l_orderkey)
                                             Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Hash Semi Join  (cost=275309.93..533616.33 rows=1838 width=38)
                                                   Hash Cond: (l1.l_orderkey = l2.l_orderkey)
                                                   Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                                                   ->  Hash Join  (cost=739.43..251611.05 rows=3677 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Seq Scan on lineitem l1  (cost=0.00..248490.50 rows=625133 width=8)
                                                               Filter: (l_receiptdate > l_commitdate)
                                                         ->  Hash  (cost=737.95..737.95 rows=118 width=30)
                                                               ->  Hash Join  (cost=12.14..737.95 rows=118 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Seq Scan on supplier  (cost=0.00..672.00 rows=20000 width=34)
                                                                     ->  Hash  (cost=12.12..12.12 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..12.12 rows=1 width=4)
                                                                                 Filter: (n_name = 'IRAN'::bpchar)
                                                   ->  Parallel Hash  (cost=243802.00..243802.00 rows=1875400 width=8)
                                                         ->  Parallel Seq Scan on lineitem l2  (cost=0.00..243802.00 rows=1875400 width=8)
                                             ->  Parallel Hash  (cost=248490.50..248490.50 rows=625133 width=8)
                                                   ->  Parallel Seq Scan on lineitem l3  (cost=0.00..248490.50 rows=625133 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..2.82 rows=1 width=4)
                                             Index Cond: (o_orderkey = l1.l_orderkey)
                                             Filter: (o_orderstatus = 'F'::bpchar)
 JIT:
   Functions: 57
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(40 rows)

COMMIT;
COMMIT

Query 21 execution times in seconds: 0.200,0.198,0.194,0.200,0.197,0.198,0.202,0.198,0.195,0.188
Average execution time: 0.1970 seconds

BEGIN;
BEGIN
EXPLAIN
select
	cntrycode,
	count(*) as numcust,
	sum(c_acctbal) as totacctbal
from
	(
		select
			substring(c_phone from 1 for 2) as cntrycode,
			c_acctbal
		from
			customer
		where
			substring(c_phone from 1 for 2) in
				('17', '28', '15', '27', '20', '23', '31')
			and c_acctbal > (
				select
					avg(c_acctbal)
				from
					customer
				where
					c_acctbal > 0.00
					and substring(c_phone from 1 for 2) in
						('17', '28', '15', '27', '20', '23', '31')
			)
			and not exists (
				select
					*
				from
					orders
				where
					o_custkey = c_custkey
			)
	) as vip
group by
	cntrycode
order by
	cntrycode;
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=99052.84..99254.65 rows=1511 width=72)
   Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
   InitPlan 1
     ->  Finalize Aggregate  (cost=11539.36..11539.37 rows=1 width=32)
           ->  Gather  (cost=11539.14..11539.35 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=10539.14..10539.15 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..10529.25 rows=3954 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{17,28,15,27,20,23,31}'::text[])))
   ->  Gather Merge  (cost=87513.47..87676.23 rows=1260 width=72)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=86513.45..86530.77 rows=630 width=72)
               Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Sort  (cost=86513.45..86515.02 rows=630 width=38)
                     Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                     ->  Parallel Hash Right Anti Join  (cost=10547.48..86484.16 rows=630 width=38)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Parallel Seq Scan on orders  (cost=0.00..64749.43 rows=1250143 width=4)
                           ->  Parallel Hash  (cost=10529.25..10529.25 rows=1458 width=26)
                                 ->  Parallel Seq Scan on customer  (cost=0.00..10529.25 rows=1458 width=26)
                                       Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{17,28,15,27,20,23,31}'::text[])))
(21 rows)

COMMIT;
COMMIT

Query 22 execution times in seconds: 0.174,0.148,0.144,0.147,0.139,0.142,0.146,0.145,0.132,0.134
Average execution time: 0.1451 seconds


