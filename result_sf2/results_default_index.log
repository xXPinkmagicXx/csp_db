=== Experiment: default_index ===
INDEX_ALL=0
INDEX_NUMBERS=0
INDEX_DATES=0
INDEX_TEXT=0
INDEX_DEFAULT=1

[Info] Running drop_indexes.sh
[Info] Dropping date indexes
[Info] Dropping numbers indexes
[Info] Dropping text indexes
[Info] Running create_indexes.sh
[Info] Creating default schema indexes

[Info] Running queries(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22) for default_index
BEGIN;
BEGIN
EXPLAIN
select
	l_returnflag,
	l_linestatus,
	sum(l_quantity) as sum_qty,
	sum(l_extendedprice) as sum_base_price,
	sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
	avg(l_quantity) as avg_qty,
	avg(l_extendedprice) as avg_price,
	avg(l_discount) as avg_disc,
	count(*) as count_order
from
	lineitem
where
	l_shipdate <= date '1998-12-01' - interval '115 days'
group by
	l_returnflag,
	l_linestatus
order by
	l_returnflag,
	l_linestatus;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=616624.45..629658.44 rows=40000 width=248)
   Group Key: l_returnflag, l_linestatus
   ->  Gather Merge  (cost=616624.45..625958.44 rows=80000 width=248)
         Workers Planned: 2
         ->  Sort  (cost=615624.43..615724.43 rows=40000 width=248)
               Sort Key: l_returnflag, l_linestatus
               ->  Partial HashAggregate  (cost=561450.09..607915.39 rows=40000 width=248)
                     Group Key: l_returnflag, l_linestatus
                     Planned Partitions: 8
                     ->  Parallel Seq Scan on lineitem  (cost=0.00..287537.56 rows=1666388 width=88)
                           Filter: (l_shipdate <= '1998-08-08 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 9
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(14 rows)

COMMIT;
COMMIT

Query 1 execution times in seconds: 0.184,0.188,0.188,0.184,0.193,0.188,0.186,0.189,0.188,0.190
Average execution time: 0.1878 seconds

BEGIN;
BEGIN
EXPLAIN
select
	s_acctbal,
	s_name,
	n_name,
	p_partkey,
	p_mfgr,
	s_address,
	s_phone,
	s_comment
from
	part,
	supplier,
	partsupp,
	nation,
	region
where
	p_partkey = ps_partkey
	and s_suppkey = ps_suppkey
	and p_size = 49
	and p_type like '%NICKEL'
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'AMERICA'
	and ps_supplycost = (
		select
			min(ps_supplycost)
		from
			partsupp,
			supplier,
			nation,
			region
		where
			p_partkey = ps_partkey
			and s_suppkey = ps_suppkey
			and s_nationkey = n_nationkey
			and n_regionkey = r_regionkey
			and r_name = 'AMERICA'
	)
order by
	s_acctbal desc,
	n_name,
	s_name,
	p_partkey
LIMIT 100;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=111487.98..111487.99 rows=1 width=270)
   ->  Sort  (cost=111487.98..111487.99 rows=1 width=270)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Hash Join  (cost=57435.40..111487.97 rows=1 width=270)
               Hash Cond: ((part.p_partkey = partsupp.ps_partkey) AND ((SubPlan 1) = partsupp.ps_supplycost))
               ->  Gather  (cost=1000.00..11872.20 rows=1482 width=30)
                     Workers Planned: 2
                     ->  Parallel Seq Scan on part  (cost=0.00..10724.00 rows=618 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 49))
               ->  Hash  (cost=40697.40..40697.40 rows=320000 width=250)
                     ->  Nested Loop  (cost=1.99..40697.40 rows=320000 width=250)
                           ->  Nested Loop  (cost=1.56..986.02 rows=4000 width=244)
                                 Join Filter: (nation.n_regionkey = region.r_regionkey)
                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                       Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Hash Join  (cost=1.56..734.96 rows=20000 width=248)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..672.00 rows=20000 width=144)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=112)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=112)
                           ->  Index Scan using ps_sk on partsupp  (cost=0.43..9.12 rows=81 width=14)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=43.46..43.47 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..43.45 rows=1 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.85..42.34 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..41.72 rows=4 width=10)
                                         ->  Index Scan using ps_pk on partsupp partsupp_1  (cost=0.43..8.50 rows=4 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using s_sk on supplier supplier_1  (cost=0.29..8.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using n_nk on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
 JIT:
   Functions: 53
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(39 rows)

COMMIT;
COMMIT

Query 2 execution times in seconds: 0.204,0.202,0.197,0.183,0.193,0.203,0.195,0.201,0.203,0.194
Average execution time: 0.1975 seconds

BEGIN;
BEGIN
EXPLAIN
select
	l_orderkey,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	o_orderdate,
	o_shippriority
from
	customer,
	orders,
	lineitem
where
	c_mktsegment = 'FURNITURE'
	and c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate < date '1995-03-12'
	and l_shipdate > date '1995-03-12'
group by
	l_orderkey,
	o_orderdate,
	o_shippriority
order by
	revenue desc,
	o_orderdate
LIMIT 10;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=455636.88..455636.91 rows=10 width=44)
   ->  Sort  (cost=455636.88..456626.52 rows=395854 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=394986.70..447082.62 rows=395854 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=394986.70..438010.97 rows=329878 width=44)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=393986.67..398934.84 rows=164939 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=393986.67..394399.02 rows=164939 width=48)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Parallel Hash Join  (cost=80144.64..374618.41 rows=164939 width=48)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..287537.56 rows=1666388 width=40)
                                             Filter: (l_shipdate > '1995-03-12'::date)
                                       ->  Parallel Hash  (cost=78598.08..78598.08 rows=123725 width=12)
                                             ->  Parallel Hash Join  (cost=9128.31..78598.08 rows=123725 width=12)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..67873.00 rows=608284 width=16)
                                                         Filter: (o_orderdate < '1995-03-12'::date)
                                                   ->  Parallel Hash  (cost=8810.50..8810.50 rows=25425 width=4)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..8810.50 rows=25425 width=4)
                                                               Filter: (c_mktsegment = 'FURNITURE'::bpchar)
 JIT:
   Functions: 34
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(26 rows)

COMMIT;
COMMIT

Query 3 execution times in seconds: 0.189,0.194,0.180,0.196,0.193,0.185,0.195,0.191,0.188,0.177
Average execution time: 0.1888 seconds

BEGIN;
BEGIN
EXPLAIN
select
	o_orderpriority,
	count(*) as order_count
from
	orders
where
	o_orderdate >= date '1995-02-01'
	and o_orderdate < cast(date '1995-02-01' + interval '3 month' as date)
	and exists (
		select
			*
		from
			lineitem
		where
			l_orderkey = o_orderkey
			and l_commitdate < l_receiptdate
	)
group by
	o_orderpriority
order by
	o_orderpriority;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Sort  (cost=386990.10..386990.12 rows=5 width=24)
   Sort Key: orders.o_orderpriority
   ->  HashAggregate  (cost=386989.99..386990.04 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop  (cost=385021.71..386706.78 rows=56643 width=16)
               ->  HashAggregate  (cost=385021.28..385023.28 rows=200 width=4)
                     Group Key: lineitem.l_orderkey
                     ->  Seq Scan on lineitem  (cost=0.00..375022.95 rows=3999332 width=4)
                           Filter: (l_commitdate < l_receiptdate)
               ->  Index Scan using o_ok on orders  (cost=0.43..8.41 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
                     Filter: ((o_orderdate >= '1995-02-01'::date) AND (o_orderdate < '1995-05-01'::date))
 JIT:
   Functions: 13
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(15 rows)

COMMIT;
COMMIT

Query 4 execution times in seconds: 0.189,0.172,0.190,0.192,0.182,0.192,0.183,0.196,0.190,0.182
Average execution time: 0.1868 seconds

BEGIN;
BEGIN
EXPLAIN
select
	n_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue
from
	customer,
	orders,
	lineitem,
	supplier,
	nation,
	region
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and l_suppkey = s_suppkey
	and c_nationkey = s_nationkey
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'MIDDLE EAST'
	and o_orderdate >= date '1993-01-01'
	and o_orderdate < date '1993-01-01' + interval '1 year'
group by
	n_name
order by
	revenue desc;
                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=347352.50..347352.56 rows=25 width=136)
   Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
   ->  Finalize GroupAggregate  (cost=347271.21..347351.92 rows=25 width=136)
         Group Key: nation.n_name
         ->  Gather Merge  (cost=347271.21..347351.23 rows=50 width=136)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=346271.19..346345.44 rows=25 width=136)
                     Group Key: nation.n_name
                     ->  Sort  (cost=346271.19..346285.98 rows=5915 width=140)
                           Sort Key: nation.n_name
                           ->  Hash Join  (cost=50721.45..345900.61 rows=5915 width=140)
                                 Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                 ->  Parallel Hash Join  (cost=49749.45..344152.18 rows=147891 width=152)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..275039.65 rows=4999165 width=44)
                                       ->  Parallel Hash  (cost=49287.21..49287.21 rows=36979 width=116)
                                             ->  Nested Loop  (cost=2.89..49287.21 rows=36979 width=116)
                                                   ->  Hash Join  (cost=2.46..9219.21 rows=25000 width=116)
                                                         Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..8498.00 rows=125000 width=8)
                                                         ->  Hash  (cost=2.40..2.40 rows=5 width=108)
                                                               ->  Hash Join  (cost=1.07..2.40 rows=5 width=108)
                                                                     Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=112)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'MIDDLE EAST'::bpchar)
                                                   ->  Index Scan using o_ck on orders  (cost=0.43..1.57 rows=3 width=8)
                                                         Index Cond: (o_custkey = customer.c_custkey)
                                                         Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01 00:00:00'::timestamp without time zone))
                                 ->  Hash  (cost=672.00..672.00 rows=20000 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..672.00 rows=20000 width=8)
 JIT:
   Functions: 53
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(35 rows)

COMMIT;
COMMIT

Query 5 execution times in seconds: 0.197,0.204,0.202,0.205,0.206,0.200,0.206,0.204,0.185,0.207
Average execution time: 0.2016 seconds

BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice * l_discount) as revenue
from
	lineitem
where
	l_shipdate >= date '1993-01-01'
	and l_shipdate < cast(date '1993-01-01' + interval '1 year' as date)
	and l_discount between 0.08 - 0.01 and 0.08 + 0.01
	and l_quantity < 24;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Aggregate  (cost=136879.61..136879.62 rows=1 width=32)
   ->  Bitmap Heap Scan on lineitem  (cost=808.36..136879.10 rows=100 width=36)
         Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01'::date))
         Filter: ((l_discount >= 0.07) AND (l_discount <= 0.09) AND (l_quantity < '24'::numeric))
         ->  Bitmap Index Scan on l_sd  (cost=0.00..808.33 rows=59990 width=0)
               Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01'::date))
 JIT:
   Functions: 7
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(9 rows)

COMMIT;
COMMIT

Query 6 execution times in seconds: 0.189,0.183,0.187,0.191,0.182,0.190,0.187,0.185,0.183,0.180
Average execution time: 0.1857 seconds

BEGIN;
BEGIN
EXPLAIN
select
	supp_nation,
	cust_nation,
	l_year,
	sum(volume) as revenue
from
	(
		select
			n1.n_name as supp_nation,
			n2.n_name as cust_nation,
			extract(year from l_shipdate) as l_year,
			l_extendedprice * (1 - l_discount) as volume
		from
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2
		where
			s_suppkey = l_suppkey
			and o_orderkey = l_orderkey
			and c_custkey = o_custkey
			and s_nationkey = n1.n_nationkey
			and c_nationkey = n2.n_nationkey
			and (
				(n1.n_name = 'EGYPT' and n2.n_name = 'CHINA')
				or (n1.n_name = 'CHINA' and n2.n_name = 'EGYPT')
			)
			and l_shipdate between date '1995-01-01' and date '1996-12-31'
	) as shipping
group by
	supp_nation,
	cust_nation,
	l_year
order by
	supp_nation,
	cust_nation,
	l_year;
                                                                                   QUERY PLAN                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=145773.39..145800.32 rows=200 width=272)
   Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
   ->  Gather Merge  (cost=145773.39..145795.25 rows=166 width=272)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=144773.37..144776.07 rows=83 width=272)
               Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Sort  (cost=144773.37..144773.58 rows=83 width=276)
                     Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                     ->  Hash Join  (cost=1580.38..144770.72 rows=83 width=276)
                           Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                           Join Filter: (((n1.n_name = 'EGYPT'::bpchar) AND (n2.n_name = 'CHINA'::bpchar)) OR ((n1.n_name = 'CHINA'::bpchar) AND (n2.n_name = 'EGYPT'::bpchar)))
                           ->  Nested Loop  (cost=1578.98..144763.86 rows=2000 width=148)
                                 ->  Nested Loop  (cost=1578.56..143862.34 rows=2000 width=148)
                                       ->  Hash Join  (cost=1578.13..136787.77 rows=2000 width=148)
                                             Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                             ->  Parallel Bitmap Heap Scan on lineitem  (cost=823.33..135919.24 rows=24996 width=48)
                                                   Recheck Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                                   ->  Bitmap Index Scan on l_sd  (cost=0.00..808.33 rows=59990 width=0)
                                                         Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                             ->  Hash  (cost=734.80..734.80 rows=1600 width=108)
                                                   ->  Hash Join  (cost=1.40..734.80 rows=1600 width=108)
                                                         Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                         ->  Seq Scan on supplier  (cost=0.00..672.00 rows=20000 width=8)
                                                         ->  Hash  (cost=1.38..1.38 rows=2 width=108)
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=108)
                                                                     Filter: ((n_name = 'EGYPT'::bpchar) OR (n_name = 'CHINA'::bpchar))
                                       ->  Index Scan using o_ok on orders  (cost=0.43..3.54 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
                                 ->  Index Scan using c_ck on customer  (cost=0.42..0.45 rows=1 width=8)
                                       Index Cond: (c_custkey = orders.o_custkey)
                           ->  Hash  (cost=1.38..1.38 rows=2 width=108)
                                 ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=108)
                                       Filter: ((n_name = 'CHINA'::bpchar) OR (n_name = 'EGYPT'::bpchar))
 JIT:
   Functions: 52
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(36 rows)

COMMIT;
COMMIT

Query 7 execution times in seconds: 0.183,0.205,0.207,0.202,0.201,0.201,0.201,0.205,0.202,0.204
Average execution time: 0.2011 seconds

BEGIN;
BEGIN
EXPLAIN
select
	o_year,
	sum(case
		when nation = 'BRAZIL' then volume
		else 0
	end) / sum(volume) as mkt_share
from
	(
		select
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) as volume,
			n2.n_name as nation
		from
			part,
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2,
			region
		where
			p_partkey = l_partkey
			and s_suppkey = l_suppkey
			and l_orderkey = o_orderkey
			and o_custkey = c_custkey
			and c_nationkey = n1.n_nationkey
			and n1.n_regionkey = r_regionkey
			and r_name = 'AMERICA'
			and s_nationkey = n2.n_nationkey
			and o_orderdate between date '1995-01-01' and date '1996-12-31'
			and p_type = 'LARGE ANODIZED COPPER'
	) as all_nations
group by
	o_year
order by
	o_year;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=320819.02..321464.16 rows=2406 width=64)
   Group Key: (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=320819.02..321365.59 rows=4036 width=96)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=319819.00..319899.72 rows=2018 width=96)
               Group Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=319819.00..319824.04 rows=2018 width=172)
                     Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                     ->  Hash Join  (cost=10326.38..319708.22 rows=2018 width=172)
                           Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                           ->  Nested Loop  (cost=10324.81..319695.41 rows=2018 width=44)
                                 ->  Hash Join  (cost=10324.53..319079.57 rows=2018 width=44)
                                       Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                       ->  Nested Loop  (cost=10322.06..319019.09 rows=10090 width=48)
                                             ->  Nested Loop  (cost=10321.64..314221.08 rows=10090 width=48)
                                                   ->  Parallel Hash Join  (cost=10321.21..298483.80 rows=33295 width=44)
                                                         Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                                         ->  Parallel Seq Scan on lineitem  (cost=0.00..275039.65 rows=4999165 width=48)
                                                         ->  Parallel Hash  (cost=10307.33..10307.33 rows=1110 width=4)
                                                               ->  Parallel Seq Scan on part  (cost=0.00..10307.33 rows=1110 width=4)
                                                                     Filter: ((p_type)::text = 'LARGE ANODIZED COPPER'::text)
                                                   ->  Index Scan using o_ok on orders  (cost=0.43..0.47 rows=1 width=12)
                                                         Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Index Scan using c_ck on customer  (cost=0.42..0.48 rows=1 width=8)
                                                   Index Cond: (c_custkey = orders.o_custkey)
                                       ->  Hash  (cost=2.40..2.40 rows=5 width=4)
                                             ->  Hash Join  (cost=1.07..2.40 rows=5 width=4)
                                                   Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                   ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                         ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                               Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Scan using s_sk on supplier  (cost=0.29..0.31 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                 ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=108)
 JIT:
   Functions: 59
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(40 rows)

COMMIT;
COMMIT

Query 8 execution times in seconds: 0.200,0.206,0.207,0.208,0.202,0.195,0.194,0.213,0.187,0.202
Average execution time: 0.2014 seconds

BEGIN;
BEGIN
EXPLAIN
select
	nation,
	o_year,
	sum(amount) as sum_profit
from
	(
		select
			n_name as nation,
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount
		from
			part,
			supplier,
			lineitem,
			partsupp,
			orders,
			nation
		where
			s_suppkey = l_suppkey
			and ps_suppkey = l_suppkey
			and ps_partkey = l_partkey
			and p_partkey = l_partkey
			and o_orderkey = l_orderkey
			and s_nationkey = n_nationkey
			and p_name like '%hot%'
	) as profit
group by
	nation,
	o_year
order by
	nation,
	o_year desc;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=338521.21..358444.05 rows=60150 width=168)
   Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=338521.21..356338.80 rows=120300 width=168)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=337521.18..341453.17 rows=60150 width=168)
               Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=337521.18..337899.90 rows=151487 width=196)
                     Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                     ->  Hash Join  (cost=924.85..309986.11 rows=151487 width=196)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Nested Loop  (cost=923.29..309140.77 rows=151487 width=68)
                                 ->  Hash Join  (cost=922.86..238296.05 rows=151487 width=68)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Nested Loop  (cost=0.86..236976.31 rows=151487 width=72)
                                             ->  Nested Loop  (cost=0.43..34253.73 rows=20202 width=18)
                                                   ->  Parallel Seq Scan on part  (cost=0.00..10307.33 rows=5050 width=4)
                                                         Filter: ((p_name)::text ~~ '%hot%'::text)
                                                   ->  Index Scan using ps_pk on partsupp  (cost=0.43..4.70 rows=4 width=14)
                                                         Index Cond: (ps_partkey = part.p_partkey)
                                             ->  Index Scan using l_sk_pk on lineitem  (cost=0.43..7.03 rows=300 width=66)
                                                   Index Cond: ((l_suppkey = partsupp.ps_suppkey) AND (l_partkey = partsupp.ps_partkey))
                                       ->  Hash  (cost=672.00..672.00 rows=20000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..672.00 rows=20000 width=8)
                                 ->  Index Scan using o_ok on orders  (cost=0.43..0.47 rows=1 width=8)
                                       Index Cond: (o_orderkey = lineitem.l_orderkey)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=108)
 JIT:
   Functions: 39
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(30 rows)

COMMIT;
COMMIT

Query 9 execution times in seconds: 0.184,0.202,0.205,0.186,0.204,0.198,0.205,0.199,0.194,0.205
Average execution time: 0.1982 seconds

BEGIN;
BEGIN
EXPLAIN
select
	c_custkey,
	c_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	c_acctbal,
	n_name,
	c_address,
	c_phone,
	c_comment
from
	customer,
	orders,
	lineitem,
	nation
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate >= date '1993-08-01'
	and o_orderdate < cast(date '1993-08-01' + interval '3 month' as date)
	and l_returnflag = 'R'
	and c_nationkey = n_nationkey
group by
	c_custkey,
	c_name,
	c_acctbal,
	c_phone,
	n_name,
	c_address,
	c_comment
order by
	revenue desc
LIMIT 20;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=344759.00..344759.05 rows=20 width=279)
   ->  Sort  (cost=344759.00..344764.60 rows=2241 width=279)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=344411.38..344699.37 rows=2241 width=279)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=344411.38..344652.67 rows=1868 width=279)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=343411.35..343437.04 rows=934 width=279)
                           Group Key: customer.c_custkey, nation.n_name
                           ->  Sort  (cost=343411.35..343413.69 rows=934 width=283)
                                 Sort Key: customer.c_custkey, nation.n_name
                                 ->  Hash Join  (cost=55079.61..343365.27 rows=934 width=283)
                                       Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                       ->  Nested Loop  (cost=55078.05..343360.85 rows=934 width=183)
                                             ->  Parallel Hash Join  (cost=55077.62..342680.80 rows=934 width=40)
                                                   Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                                   ->  Parallel Seq Scan on lineitem  (cost=0.00..287537.56 rows=24996 width=40)
                                                         Filter: (l_returnflag = 'R'::bpchar)
                                                   ->  Parallel Hash  (cost=54493.85..54493.85 rows=46702 width=8)
                                                         ->  Parallel Bitmap Heap Scan on orders  (cost=1545.31..54493.85 rows=46702 width=8)
                                                               Recheck Cond: ((o_orderdate >= '1993-08-01'::date) AND (o_orderdate < '1993-11-01'::date))
                                                               ->  Bitmap Index Scan on o_od  (cost=0.00..1517.29 rows=112086 width=0)
                                                                     Index Cond: ((o_orderdate >= '1993-08-01'::date) AND (o_orderdate < '1993-11-01'::date))
                                             ->  Index Scan using c_ck on customer  (cost=0.42..0.73 rows=1 width=147)
                                                   Index Cond: (c_custkey = orders.o_custkey)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=108)
 JIT:
   Functions: 36
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(30 rows)

COMMIT;
COMMIT

Query 10 execution times in seconds: 0.201,0.186,0.199,0.191,0.191,0.201,0.203,0.183,0.196,0.192
Average execution time: 0.1943 seconds

BEGIN;
BEGIN
EXPLAIN
select
	ps_partkey,
	sum(ps_supplycost * ps_availqty) as value
from
	partsupp,
	supplier,
	nation
where
	ps_suppkey = s_suppkey
	and s_nationkey = n_nationkey
	and n_name = 'ALGERIA'
group by
	ps_partkey having
		sum(ps_supplycost * ps_availqty) > (
			select
				sum(ps_supplycost * ps_availqty) *         inf
			from
				partsupp,
				supplier,
				nation
			where
				ps_suppkey = s_suppkey
				and s_nationkey = n_nationkey
				and n_name = 'ALGERIA'
		)
order by
	value desc;
ERROR:  column "inf" does not exist
LINE 17:     sum(ps_supplycost * ps_availqty) *         inf
                                                        ^

Query 11 execution times in seconds: 0.140,0.137,0.138,0.134,0.140,0.139,0.138,0.138,0.130,0.125
Average execution time: 0.1359 seconds

BEGIN;
BEGIN
EXPLAIN
select
	l_shipmode,
	sum(case
		when o_orderpriority = '1-URGENT'
			or o_orderpriority = '2-HIGH'
			then 1
		else 0
	end) as high_line_count,
	sum(case
		when o_orderpriority <> '1-URGENT'
			and o_orderpriority <> '2-HIGH'
			then 1
		else 0
	end) as low_line_count
from
	orders,
	lineitem
where
	o_orderkey = l_orderkey
	and l_shipmode in ('FOB', 'RAIL')
	and l_commitdate < l_receiptdate
	and l_shipdate < l_commitdate
	and l_receiptdate >= date '1993-01-01'
	and l_receiptdate < date '1993-01-01' + interval '1 year'
group by
	l_shipmode
order by
	l_shipmode;
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=137328.95..137337.25 rows=57 width=60)
   Group Key: lineitem.l_shipmode
   ->  Gather Merge  (cost=137328.95..137336.26 rows=56 width=60)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=136328.93..136329.77 rows=28 width=60)
               Group Key: lineitem.l_shipmode
               ->  Sort  (cost=136328.93..136329.00 rows=28 width=60)
                     Sort Key: lineitem.l_shipmode
                     ->  Nested Loop  (cost=808.78..136328.26 rows=28 width=60)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=808.35..136091.73 rows=28 width=48)
                                 Recheck Cond: ((l_receiptdate >= '1993-01-01'::date) AND (l_receiptdate < '1994-01-01 00:00:00'::timestamp without time zone))
                                 Filter: ((l_shipmode = ANY ('{FOB,RAIL}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate))
                                 ->  Bitmap Index Scan on l_rd  (cost=0.00..808.33 rows=59990 width=0)
                                       Index Cond: ((l_receiptdate >= '1993-01-01'::date) AND (l_receiptdate < '1994-01-01 00:00:00'::timestamp without time zone))
                           ->  Index Scan using o_ok on orders  (cost=0.43..8.45 rows=1 width=20)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
 JIT:
   Functions: 17
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(19 rows)

COMMIT;
COMMIT

Query 12 execution times in seconds: 0.173,0.197,0.188,0.185,0.187,0.186,0.186,0.189,0.187,0.191
Average execution time: 0.1869 seconds

BEGIN;
BEGIN
EXPLAIN
select
	c_count,
	count(*) as custdist
from
	(
		select
			c_custkey,
			count(o_orderkey)
		from
			customer left outer join orders on
				c_custkey = o_custkey
				and o_comment not like '%pending%requests%'
		group by
			c_custkey
	) as c_orders (c_custkey, c_count)
group by
	c_count
order by
	custdist desc,
	c_count desc;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=274158.35..274158.85 rows=200 width=16)
   Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
   ->  HashAggregate  (cost=274148.70..274150.70 rows=200 width=16)
         Group Key: count(orders.o_orderkey)
         ->  Finalize GroupAggregate  (cost=193643.81..269648.70 rows=300000 width=12)
               Group Key: customer.c_custkey
               ->  Gather Merge  (cost=193643.81..263648.70 rows=600000 width=12)
                     Workers Planned: 2
                     ->  Sort  (cost=192643.79..193393.79 rows=300000 width=12)
                           Sort Key: customer.c_custkey
                           ->  Partial HashAggregate  (cost=147656.04..160224.39 rows=300000 width=12)
                                 Group Key: customer.c_custkey
                                 Planned Partitions: 4
                                 ->  Parallel Hash Right Join  (cost=7675.96..78763.97 rows=1224748 width=8)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..67873.00 rows=1224748 width=8)
                                             Filter: ((o_comment)::text !~~ '%pending%requests%'::text)
                                       ->  Parallel Hash  (cost=6113.46..6113.46 rows=125000 width=4)
                                             ->  Parallel Index Only Scan using c_ck on customer  (cost=0.42..6113.46 rows=125000 width=4)
 JIT:
   Functions: 18
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(22 rows)

COMMIT;
COMMIT

Query 13 execution times in seconds: 0.191,0.185,0.178,0.187,0.184,0.186,0.190,0.190,0.185,0.181
Average execution time: 0.1857 seconds

BEGIN;
BEGIN
EXPLAIN
select
	100.00 * sum(case
		when p_type like 'PROMO%'
			then l_extendedprice * (1 - l_discount)
		else 0
	end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue
from
	lineitem,
	part
where
	l_partkey = p_partkey
	and l_shipdate >= date '1995-05-01'
	and l_shipdate < cast(date '1995-05-01' + interval '1 month' as date);
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=152068.53..152068.54 rows=1 width=32)
   ->  Gather  (cost=152068.29..152068.50 rows=2 width=64)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=151068.29..151068.30 rows=1 width=64)
               ->  Parallel Hash Join  (cost=13937.34..150630.86 rows=24996 width=57)
                     Hash Cond: (lineitem.l_partkey = part.p_partkey)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=823.33..135919.24 rows=24996 width=40)
                           Recheck Cond: ((l_shipdate >= '1995-05-01'::date) AND (l_shipdate < '1995-06-01'::date))
                           ->  Bitmap Index Scan on l_sd  (cost=0.00..808.33 rows=59990 width=0)
                                 Index Cond: ((l_shipdate >= '1995-05-01'::date) AND (l_shipdate < '1995-06-01'::date))
                     ->  Parallel Hash  (cost=9890.67..9890.67 rows=166667 width=25)
                           ->  Parallel Seq Scan on part  (cost=0.00..9890.67 rows=166667 width=25)
 JIT:
   Functions: 16
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(15 rows)

COMMIT;
COMMIT

Query 14 execution times in seconds: 0.193,0.186,0.168,0.190,0.187,0.189,0.182,0.183,0.182,0.187
Average execution time: 0.1847 seconds

BEGIN;
BEGIN
create or replace view revenue0 (supplier_no, total_revenue) as
	select
		l_suppkey,
		sum(l_extendedprice * (1 - l_discount))
	from
		lineitem
	where
		l_shipdate >= '1994-10-01'
		and l_shipdate < date'1994-10-01' + interval '90 days'
	group by
		l_suppkey;
CREATE VIEW
EXPLAIN
select
	s_suppkey,
	s_name,
	s_address,
	s_phone,
	total_revenue
from
	supplier,
	revenue0
where
	s_suppkey = supplier_no
	and total_revenue = (
		select
			max(total_revenue)
		from
			revenue0
	)
order by
	s_suppkey;
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Merge Join  (cost=274096.42..275150.42 rows=1 width=103)
   Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
   InitPlan 1
     ->  Aggregate  (cost=137049.05..137049.06 rows=1 width=32)
           ->  HashAggregate  (cost=137044.05..137046.55 rows=200 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=823.33..136444.15 rows=59990 width=40)
                       Recheck Cond: ((l_shipdate >= '1994-10-01'::date) AND (l_shipdate < '1994-12-30 00:00:00'::timestamp without time zone))
                       ->  Bitmap Index Scan on l_sd  (cost=0.00..808.33 rows=59990 width=0)
                             Index Cond: ((l_shipdate >= '1994-10-01'::date) AND (l_shipdate < '1994-12-30 00:00:00'::timestamp without time zone))
   ->  Index Scan using s_sk on supplier  (cost=0.29..1004.27 rows=20000 width=71)
   ->  Sort  (cost=137047.07..137047.08 rows=1 width=36)
         Sort Key: revenue0.supplier_no
         ->  Subquery Scan on revenue0  (cost=137044.05..137047.06 rows=1 width=36)
               ->  HashAggregate  (cost=137044.05..137047.05 rows=1 width=36)
                     Group Key: lineitem.l_suppkey
                     Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
                     ->  Bitmap Heap Scan on lineitem  (cost=823.33..136444.15 rows=59990 width=40)
                           Recheck Cond: ((l_shipdate >= '1994-10-01'::date) AND (l_shipdate < '1994-12-30 00:00:00'::timestamp without time zone))
                           ->  Bitmap Index Scan on l_sd  (cost=0.00..808.33 rows=59990 width=0)
                                 Index Cond: ((l_shipdate >= '1994-10-01'::date) AND (l_shipdate < '1994-12-30 00:00:00'::timestamp without time zone))
 JIT:
   Functions: 23
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(24 rows)

drop view revenue0;
DROP VIEW
COMMIT;
COMMIT

Query 15 execution times in seconds: 0.200,0.179,0.195,0.192,0.197,0.191,0.194,0.191,0.198,0.175
Average execution time: 0.1912 seconds

BEGIN;
BEGIN
EXPLAIN
select
	p_brand,
	p_type,
	p_size,
	count(distinct ps_suppkey) as supplier_cnt
from
	partsupp,
	part
where
	p_partkey = ps_partkey
	and p_brand <> 'Brand#32'
	and p_type not like 'STANDARD POLISHED%'
	and p_size in (6, 29, 39, 17, 23, 9, 30, 20)
	and ps_suppkey not in (
		select
			s_suppkey
		from
			supplier
		where
			s_comment like '%Customer%Complaints%'
	)
group by
	p_brand,
	p_type,
	p_size
order by
	supplier_cnt desc,
	p_brand,
	p_type,
	p_size;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=70717.85..70797.66 rows=31926 width=44)
   Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
   ->  GroupAggregate  (cost=53049.40..68329.39 rows=31926 width=44)
         Group Key: part.p_brand, part.p_type, part.p_size
         ->  Gather Merge  (cost=53049.40..66827.15 rows=118298 width=40)
               Workers Planned: 2
               ->  Sort  (cost=52049.38..52172.60 rows=49291 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Parallel Hash Join  (cost=13421.16..48207.38 rows=49291 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Parallel Index Only Scan using ps_pk_sk on partsupp  (cost=722.43..34633.64 rows=333333 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..722.00 rows=2 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Parallel Hash  (cost=12390.67..12390.67 rows=24645 width=40)
                                 ->  Parallel Seq Scan on part  (cost=0.00..12390.67 rows=24645 width=40)
                                       Filter: ((p_brand <> 'Brand#32'::bpchar) AND ((p_type)::text !~~ 'STANDARD POLISHED%'::text) AND (p_size = ANY ('{6,29,39,17,23,9,30,20}'::integer[])))
(18 rows)

COMMIT;
COMMIT

Query 16 execution times in seconds: 0.148,0.148,0.145,0.142,0.137,0.143,0.143,0.132,0.143,0.133
Average execution time: 0.1414 seconds

BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice) / 7.0 as avg_yearly
from
	lineitem,
	part
where
	p_partkey = l_partkey
	and p_brand = 'Brand#25'
	and p_container = 'LG BOX'
	and l_quantity < (
		select
			0.2 * avg(l_quantity)
		from
			lineitem
		where
			l_partkey = p_partkey
	);
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Aggregate  (cost=1751361.82..1751361.84 rows=1 width=32)
   ->  Hash Join  (cost=11767.43..1751352.17 rows=3859 width=18)
         Hash Cond: (lineitem.l_partkey = part.p_partkey)
         Join Filter: (lineitem.l_quantity < (SubPlan 1))
         ->  Seq Scan on lineitem  (cost=0.00..345027.96 rows=11997996 width=40)
         ->  Hash  (cost=11762.60..11762.60 rows=386 width=4)
               ->  Gather  (cost=1000.00..11762.60 rows=386 width=4)
                     Workers Planned: 2
                     ->  Parallel Seq Scan on part  (cost=0.00..10724.00 rows=161 width=4)
                           Filter: ((p_brand = 'Brand#25'::bpchar) AND (p_container = 'LG BOX'::bpchar))
         SubPlan 1
           ->  Aggregate  (cost=136306.18..136306.19 rows=1 width=32)
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=685.36..136156.20 rows=59990 width=18)
                       Recheck Cond: (l_partkey = part.p_partkey)
                       ->  Bitmap Index Scan on l_pk  (cost=0.00..670.36 rows=59990 width=0)
                             Index Cond: (l_partkey = part.p_partkey)
 JIT:
   Functions: 24
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(19 rows)

COMMIT;
COMMIT

Query 17 execution times in seconds: 0.188,0.183,0.195,0.181,0.180,0.189,0.189,0.190,0.192,0.185
Average execution time: 0.1872 seconds

BEGIN;
BEGIN
EXPLAIN
select
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice,
	sum(l_quantity)
from
	customer,
	orders,
	lineitem
where
	o_orderkey in (
		select
			l_orderkey
		from
			lineitem
		group by
			l_orderkey having
				sum(l_quantity) > 314
	)
	and c_custkey = o_custkey
	and o_orderkey = l_orderkey
group by
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice
order by
	o_totalprice desc,
	o_orderdate
LIMIT 100;
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=412304.10..412304.35 rows=100 width=71)
   ->  Sort  (cost=412304.10..412304.77 rows=268 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=412287.83..412293.86 rows=268 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Sort  (cost=412287.83..412288.50 rows=268 width=57)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     ->  Nested Loop  (cost=301046.93..412277.02 rows=268 width=57)
                           ->  Nested Loop  (cost=301046.50..301694.50 rows=67 width=43)
                                 ->  Nested Loop  (cost=301046.07..301664.30 rows=67 width=24)
                                       ->  Finalize GroupAggregate  (cost=301045.64..301098.31 rows=67 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '314'::numeric)
                                             ->  Gather Merge  (cost=301045.64..301092.31 rows=400 width=36)
                                                   Workers Planned: 2
                                                   ->  Sort  (cost=300045.62..300046.12 rows=200 width=36)
                                                         Sort Key: lineitem_1.l_orderkey
                                                         ->  Partial HashAggregate  (cost=300035.47..300037.97 rows=200 width=36)
                                                               Group Key: lineitem_1.l_orderkey
                                                               ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..275039.65 rows=4999165 width=22)
                                       ->  Index Scan using o_ok on orders  (cost=0.43..8.45 rows=1 width=20)
                                             Index Cond: (o_orderkey = lineitem_1.l_orderkey)
                                 ->  Index Scan using c_ck on customer  (cost=0.42..0.45 rows=1 width=23)
                                       Index Cond: (c_custkey = orders.o_custkey)
                           ->  Index Scan using l_ok on lineitem  (cost=0.43..1050.59 rows=59990 width=22)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 26
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(29 rows)

COMMIT;
COMMIT

Query 18 execution times in seconds: 0.189,0.182,0.197,0.179,0.197,0.177,0.186,0.189,0.198,0.166
Average execution time: 0.1860 seconds

BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice* (1 - l_discount)) as revenue
from
	lineitem,
	part
where
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#31'
		and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')
		and l_quantity >= 8 and l_quantity <= 8+10
		and p_size between 1 and 5
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#55'
		and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')
		and l_quantity >= 19 and l_quantity <= 19+10
		and p_size between 1 and 10
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#51'
		and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')
		and l_quantity >= 30 and l_quantity <= 30+10
		and p_size between 1 and 15
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	);


 Aggregate  (cost=376057.17..376057.18 rows=1 width=32)
   ->  Gather  (cost=1000.42..376057.16 rows=1 width=36)
         Workers Planned: 2
         ->  Nested Loop  (cost=0.42..375057.06 rows=1 width=36)
               ->  Parallel Seq Scan on lineitem  (cost=0.00..375022.95 rows=4 width=58)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '8'::numeric) AND (l_quantity <= '18'::numeric)) OR ((l_quantity >= '19'::numeric) AND (l_quantity <= '29'::numeric)) OR ((l_quantity >= '30'::numeric) AND (l_quantity <= '40'::numeric))))
               ->  Index Scan using p_pk on part  (cost=0.42..8.52 rows=1 width=30)
                     Index Cond: (p_partkey = lineitem.l_partkey)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#31'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#55'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#51'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))) AND (((p_brand = 'Brand#31'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (lineitem.l_quantity >= '8'::numeric) AND (lineitem.l_quantity <= '18'::numeric) AND (p_size <= 5)) OR ((p_brand = 'Brand#55'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (lineitem.l_quantity >= '19'::numeric) AND (lineitem.l_quantity <= '29'::numeric) AND (p_size <= 10)) OR ((p_brand = 'Brand#51'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (lineitem.l_quantity >= '30'::numeric) AND (lineitem.l_quantity <= '40'::numeric) AND (p_size <= 15))))
 JIT:
   Functions: 10
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(12 rows)

COMMIT;
COMMIT

Query 19 execution times in seconds: 0.194,0.190,0.192,0.196,0.194,0.191,0.187,0.190,0.184,0.195
Average execution time: 0.1913 seconds

BEGIN;
BEGIN
EXPLAIN
select
	s_name,
	s_address
from
	supplier,
	nation
where
	s_suppkey in (
		select
			ps_suppkey
		from
			partsupp
		where
			ps_partkey in (
				select
					p_partkey
				from
					part
				where
					p_name like 'steel%'
			)
			and ps_availqty > (
				select
					0.5 * sum(l_quantity)
				from
					lineitem
				where
					l_partkey = ps_partkey
					and l_suppkey = ps_suppkey
					and l_shipdate >= '1994-01-01'
					and l_shipdate < cast(date '1994-01-01' + interval '1 year' as date)
			)
	)
	and s_nationkey = n_nationkey
	and n_name = 'UNITED STATES'
order by
	s_name;
                                                                                                  QUERY PLAN                                                                                                  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=13357532.30..13357532.84 rows=215 width=51)
   Sort Key: supplier.s_name
   ->  Nested Loop Semi Join  (cost=0.71..13357523.97 rows=215 width=51)
         Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
         ->  Nested Loop  (cost=0.29..1305.59 rows=800 width=55)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Index Scan using s_sk on supplier  (cost=0.29..1004.27 rows=20000 width=59)
               ->  Materialize  (cost=0.00..1.32 rows=1 width=4)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'UNITED STATES'::bpchar)
         ->  Materialize  (cost=0.43..13291587.86 rows=5387 width=4)
               ->  Nested Loop  (cost=0.43..13291560.92 rows=5387 width=4)
                     ->  Seq Scan on part  (cost=0.00..13224.00 rows=4040 width=4)
                           Filter: ((p_name)::text ~~ 'steel%'::text)
                     ->  Index Scan using ps_pk on partsupp  (cost=0.43..3286.71 rows=1 width=8)
                           Index Cond: (ps_partkey = part.p_partkey)
                           Filter: ((ps_availqty)::numeric > (SubPlan 1))
                           SubPlan 1
                             ->  Aggregate  (cost=820.05..820.06 rows=1 width=32)
                                   ->  Bitmap Heap Scan on lineitem  (cost=816.02..820.04 rows=1 width=18)
                                         Recheck Cond: ((l_suppkey = partsupp.ps_suppkey) AND (l_partkey = partsupp.ps_partkey) AND (l_shipdate >= '1994-01-01'::date) AND (l_shipdate < '1995-01-01'::date))
                                         ->  BitmapAnd  (cost=816.02..816.02 rows=1 width=0)
                                               ->  Bitmap Index Scan on l_sk_pk  (cost=0.00..7.43 rows=300 width=0)
                                                     Index Cond: ((l_suppkey = partsupp.ps_suppkey) AND (l_partkey = partsupp.ps_partkey))
                                               ->  Bitmap Index Scan on l_sd  (cost=0.00..808.33 rows=59990 width=0)
                                                     Index Cond: ((l_shipdate >= '1994-01-01'::date) AND (l_shipdate < '1995-01-01'::date))
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(29 rows)

COMMIT;
COMMIT

Query 20 execution times in seconds: 0.191,0.201,0.187,0.192,0.196,0.195,0.191,0.194,0.196,0.192
Average execution time: 0.1935 seconds

BEGIN;
BEGIN
EXPLAIN
select
	s_name,
	count(*) as numwait
from
	supplier,
	lineitem l1,
	orders,
	nation
where
	s_suppkey = l1.l_suppkey
	and o_orderkey = l1.l_orderkey
	and o_orderstatus = 'F'
	and l1.l_receiptdate > l1.l_commitdate
	and exists (
		select
			*
		from
			lineitem l2
		where
			l2.l_orderkey = l1.l_orderkey
			and l2.l_suppkey <> l1.l_suppkey
	)
	and not exists (
		select
			*
		from
			lineitem l3
		where
			l3.l_orderkey = l1.l_orderkey
			and l3.l_suppkey <> l1.l_suppkey
			and l3.l_receiptdate > l3.l_commitdate
	)
	and s_nationkey = n_nationkey
	and n_name = 'MOROCCO'
group by
	s_name
order by
	numwait desc,
	s_name
LIMIT 100;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1046720.61..1046720.86 rows=100 width=34)
   ->  Sort  (cost=1046720.61..1046769.43 rows=19530 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  Finalize GroupAggregate  (cost=1043676.44..1045974.19 rows=19530 width=34)
               Group Key: supplier.s_name
               ->  Gather Merge  (cost=1043676.44..1045697.51 rows=16276 width=34)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=1042676.41..1042818.83 rows=8138 width=34)
                           Group Key: supplier.s_name
                           ->  Sort  (cost=1042676.41..1042696.76 rows=8138 width=26)
                                 Sort Key: supplier.s_name
                                 ->  Nested Loop  (cost=672462.37..1042147.83 rows=8138 width=26)
                                       ->  Parallel Hash Semi Join  (cost=672461.94..995898.03 rows=16664 width=34)
                                             Hash Cond: (l1.l_orderkey = l2.l_orderkey)
                                             Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Hash Anti Join  (cost=315404.72..618330.47 rows=33328 width=34)
                                                   Hash Cond: (l1.l_orderkey = l3.l_orderkey)
                                                   Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                                   ->  Hash Join  (cost=527.31..294980.39 rows=66655 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Seq Scan on lineitem l1  (cost=0.00..287537.56 rows=1666388 width=8)
                                                               Filter: (l_receiptdate > l_commitdate)
                                                         ->  Hash  (cost=517.31..517.31 rows=800 width=30)
                                                               ->  Nested Loop  (cost=10.49..517.31 rows=800 width=30)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                           Filter: (n_name = 'MOROCCO'::bpchar)
                                                                     ->  Bitmap Heap Scan on supplier  (cost=10.49..508.00 rows=800 width=34)
                                                                           Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                           ->  Bitmap Index Scan on s_nk  (cost=0.00..10.29 rows=800 width=0)
                                                                                 Index Cond: (s_nationkey = nation.n_nationkey)
                                                   ->  Parallel Hash  (cost=287537.56..287537.56 rows=1666388 width=8)
                                                         ->  Parallel Seq Scan on lineitem l3  (cost=0.00..287537.56 rows=1666388 width=8)
                                                               Filter: (l_receiptdate > l_commitdate)
                                             ->  Parallel Hash  (cost=275039.65..275039.65 rows=4999165 width=8)
                                                   ->  Parallel Seq Scan on lineitem l2  (cost=0.00..275039.65 rows=4999165 width=8)
                                       ->  Index Scan using o_ok on orders  (cost=0.43..2.78 rows=1 width=4)
                                             Index Cond: (o_orderkey = l1.l_orderkey)
                                             Filter: (o_orderstatus = 'F'::bpchar)
 JIT:
   Functions: 51
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(41 rows)

COMMIT;
COMMIT

Query 21 execution times in seconds: 0.202,0.204,0.195,0.199,0.197,0.201,0.197,0.183,0.193,0.194
Average execution time: 0.1965 seconds

BEGIN;
BEGIN
EXPLAIN
select
	cntrycode,
	count(*) as numcust,
	sum(c_acctbal) as totacctbal
from
	(
		select
			substring(c_phone from 1 for 2) as cntrycode,
			c_acctbal
		from
			customer
		where
			substring(c_phone from 1 for 2) in
				('18', '24', '17', '32', '22', '13', '27')
			and c_acctbal > (
				select
					avg(c_acctbal)
				from
					customer
				where
					c_acctbal > 0.00
					and substring(c_phone from 1 for 2) in
						('18', '24', '17', '32', '22', '13', '27')
			)
			and not exists (
				select
					*
				from
					orders
				where
					o_custkey = c_custkey
			)
	) as vip
group by
	cntrycode
order by
	cntrycode;
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=24099.95..24301.75 rows=1511 width=72)
   Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
   InitPlan 1
     ->  Finalize Aggregate  (cost=11539.36..11539.37 rows=1 width=32)
           ->  Gather  (cost=11539.14..11539.35 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=10539.14..10539.15 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..10529.25 rows=3954 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{18,24,17,32,22,13,27}'::text[])))
   ->  Gather Merge  (cost=12560.58..12723.34 rows=1260 width=72)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=11560.55..11577.88 rows=630 width=72)
               Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Sort  (cost=11560.55..11562.13 rows=630 width=38)
                     Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                     ->  Nested Loop Anti Join  (cost=0.43..11531.26 rows=630 width=38)
                           ->  Parallel Seq Scan on customer  (cost=0.00..10529.25 rows=1458 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{18,24,17,32,22,13,27}'::text[])))
                           ->  Index Only Scan using o_ck on orders  (cost=0.43..3.30 rows=18 width=4)
                                 Index Cond: (o_custkey = customer.c_custkey)
(20 rows)

COMMIT;
COMMIT

Query 22 execution times in seconds: 0.144,0.143,0.136,0.138,0.142,0.139,0.138,0.138,0.137,0.145
Average execution time: 0.1400 seconds


