=== Experiment: numbers_text ===
INDEX_ALL=0
INDEX_NUMBERS=1
INDEX_DATES=0
INDEX_TEXT=1

[Info] Running drop_indexes.sh
[Info] Dropping date indexes
[Info] Keeping numbers indexes
[Info] Keeping text indexes
[Info] Running create_indexes.sh
[Info] Creating indexes for text
[Info] Creating indexes for numbers

[Info] Running queries(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22) for numbers_text
BEGIN;
BEGIN
EXPLAIN
select
	l_returnflag,
	l_linestatus,
	sum(l_quantity) as sum_qty,
	sum(l_extendedprice) as sum_base_price,
	sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
	avg(l_quantity) as avg_qty,
	avg(l_extendedprice) as avg_price,
	avg(l_discount) as avg_disc,
	count(*) as count_order
from
	lineitem
where
	l_shipdate <= date '1998-12-01' - interval '113 days'
group by
	l_returnflag,
	l_linestatus
order by
	l_returnflag,
	l_linestatus;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=459564.07..459566.03 rows=6 width=236)
   Group Key: l_returnflag, l_linestatus
   ->  Gather Merge  (cost=459564.07..459565.47 rows=12 width=236)
         Workers Planned: 2
         ->  Sort  (cost=458564.05..458564.07 rows=6 width=236)
               Sort Key: l_returnflag, l_linestatus
               ->  Partial HashAggregate  (cost=458563.84..458563.97 rows=6 width=236)
                     Group Key: l_returnflag, l_linestatus
                     ->  Parallel Seq Scan on lineitem  (cost=0.00..287537.56 rows=4886465 width=25)
                           Filter: (l_shipdate <= '1998-08-10 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 9
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(13 rows)

COMMIT;
COMMIT

Query 1 executed in 0.174 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	s_acctbal,
	s_name,
	n_name,
	p_partkey,
	p_mfgr,
	s_address,
	s_phone,
	s_comment
from
	part,
	supplier,
	partsupp,
	nation,
	region
where
	p_partkey = ps_partkey
	and s_suppkey = ps_suppkey
	and p_size = 26
	and p_type like '%COPPER'
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'AMERICA'
	and ps_supplycost = (
		select
			min(ps_supplycost)
		from
			partsupp,
			supplier,
			nation,
			region
		where
			p_partkey = ps_partkey
			and s_suppkey = ps_suppkey
			and s_nationkey = n_nationkey
			and n_regionkey = r_regionkey
			and r_name = 'AMERICA'
	)
order by
	s_acctbal desc,
	n_name,
	s_name,
	p_partkey
LIMIT 100;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=142414.11..142414.11 rows=1 width=270)
   ->  Sort  (cost=142414.11..142414.11 rows=1 width=270)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Hash Join  (cost=76895.68..142414.10 rows=1 width=270)
               Hash Cond: ((part.p_partkey = partsupp.ps_partkey) AND ((SubPlan 1) = partsupp.ps_supplycost))
               ->  Bitmap Heap Scan on part  (cost=94.21..8712.81 rows=1558 width=30)
                     Recheck Cond: (p_size = 26)
                     Filter: ((p_type)::text ~~ '%COPPER'::text)
                     ->  Bitmap Index Scan on p_s  (cost=0.00..93.83 rows=8187 width=0)
                           Index Cond: (p_size = 26)
               ->  Hash  (cost=61063.46..61063.46 rows=320000 width=250)
                     ->  Hash Join  (cost=839.46..61063.46 rows=320000 width=250)
                           Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on partsupp  (cost=0.00..51024.00 rows=1600000 width=14)
                           ->  Hash  (cost=789.46..789.46 rows=4000 width=244)
                                 ->  Hash Join  (cost=2.46..789.46 rows=4000 width=244)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..672.00 rows=20000 width=144)
                                       ->  Hash  (cost=2.40..2.40 rows=5 width=108)
                                             ->  Hash Join  (cost=1.07..2.40 rows=5 width=108)
                                                   Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=112)
                                                   ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                         ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                               Filter: (r_name = 'AMERICA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=58.95..58.96 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..58.95 rows=1 width=6)
                             Join Filter: (region_1.r_regionkey = nation_1.n_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.85..57.82 rows=5 width=10)
                                   ->  Nested Loop  (cost=0.71..57.04 rows=5 width=10)
                                         ->  Index Scan using partsupp_pkey on partsupp partsupp_1  (cost=0.43..15.52 rows=5 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..8.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
 JIT:
   Functions: 65
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(42 rows)

COMMIT;
COMMIT

Query 2 executed in 0.185 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	l_orderkey,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	o_orderdate,
	o_shippriority
from
	customer,
	orders,
	lineitem
where
	c_mktsegment = 'HOUSEHOLD'
	and c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate < date '1995-03-11'
	and l_shipdate > date '1995-03-11'
group by
	l_orderkey,
	o_orderdate,
	o_shippriority
order by
	revenue desc,
	o_orderdate
LIMIT 10;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=428597.53..428597.56 rows=10 width=44)
   ->  Sort  (cost=428597.53..430114.69 rows=606864 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=335617.68..415483.42 rows=606864 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=335617.68..401576.12 rows=505720 width=44)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=334617.66..342203.46 rows=252860 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=334617.66..335249.81 rows=252860 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Nested Loop  (cost=8528.15..306739.03 rows=252860 width=24)
                                       ->  Parallel Hash Join  (cost=8527.71..77973.31 rows=117758 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..67873.00 rows=599077 width=16)
                                                   Filter: (o_orderdate < '1995-03-11'::date)
                                             ->  Parallel Hash  (cost=8220.58..8220.58 rows=24571 width=4)
                                                   ->  Parallel Bitmap Heap Scan on customer  (cost=665.44..8220.58 rows=24571 width=4)
                                                         Recheck Cond: (c_mktsegment = 'HOUSEHOLD'::bpchar)
                                                         ->  Bitmap Index Scan on idx_customer_c_mktsegment  (cost=0.00..650.70 rows=58970 width=0)
                                                               Index Cond: (c_mktsegment = 'HOUSEHOLD'::bpchar)
                                       ->  Index Scan using lineitem_pkey on lineitem  (cost=0.43..1.77 rows=17 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_shipdate > '1995-03-11'::date)
 JIT:
   Functions: 29
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(27 rows)

COMMIT;
COMMIT

Query 3 executed in 0.181 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	o_orderpriority,
	count(*) as order_count
from
	orders
where
	o_orderdate >= date '1997-03-01'
	and o_orderdate < cast(date '1997-03-01' + interval '3 month' as date)
	and exists (
		select
			*
		from
			lineitem
		where
			l_orderkey = o_orderkey
			and l_commitdate < l_receiptdate
	)
group by
	o_orderpriority
order by
	o_orderpriority;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=131820.96..131870.97 rows=5 width=24)
   Group Key: orders.o_orderpriority
   ->  Gather Merge  (cost=131820.96..131870.87 rows=10 width=24)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=130820.93..130869.70 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Sort  (cost=130820.93..130837.17 rows=6495 width=16)
                     Sort Key: orders.o_orderpriority
                     ->  Nested Loop Semi Join  (cost=0.43..130409.63 rows=6495 width=16)
                           ->  Parallel Seq Scan on orders  (cost=0.00..70998.00 rows=50567 width=20)
                                 Filter: ((o_orderdate >= '1997-03-01'::date) AND (o_orderdate < '1997-06-01'::date))
                           ->  Index Scan using lineitem_pkey on lineitem  (cost=0.43..7.16 rows=10 width=4)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Filter: (l_commitdate < l_receiptdate)
 JIT:
   Functions: 15
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(17 rows)

COMMIT;
COMMIT

Query 4 executed in 0.185 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	n_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue
from
	customer,
	orders,
	lineitem,
	supplier,
	nation,
	region
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and l_suppkey = s_suppkey
	and c_nationkey = s_nationkey
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'EUROPE'
	and o_orderdate >= date '1997-01-01'
	and o_orderdate < date '1997-01-01' + interval '1 year'
group by
	n_name
order by
	revenue desc;
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=219647.87..219647.93 rows=25 width=136)
   Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
   ->  Finalize GroupAggregate  (cost=219564.38..219647.29 rows=25 width=136)
         Group Key: nation.n_name
         ->  Gather Merge  (cost=219564.38..219646.60 rows=50 width=136)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=218564.36..218640.81 rows=25 width=136)
                     Group Key: nation.n_name
                     ->  Sort  (cost=218564.36..218579.58 rows=6091 width=116)
                           Sort Key: nation.n_name
                           ->  Hash Join  (cost=10504.15..218181.46 rows=6091 width=116)
                                 Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                 ->  Nested Loop  (cost=9532.15..216410.07 rows=152266 width=128)
                                       ->  Parallel Hash Join  (cost=9531.71..81402.22 rows=38073 width=116)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..70998.00 rows=190365 width=8)
                                                   Filter: ((o_orderdate >= '1997-01-01'::date) AND (o_orderdate < '1998-01-01 00:00:00'::timestamp without time zone))
                                             ->  Parallel Hash  (cost=9219.21..9219.21 rows=25000 width=116)
                                                   ->  Hash Join  (cost=2.46..9219.21 rows=25000 width=116)
                                                         Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..8498.00 rows=125000 width=8)
                                                         ->  Hash  (cost=2.40..2.40 rows=5 width=108)
                                                               ->  Hash Join  (cost=1.07..2.40 rows=5 width=108)
                                                                     Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=112)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'EUROPE'::bpchar)
                                       ->  Index Scan using lineitem_pkey on lineitem  (cost=0.43..3.24 rows=31 width=20)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                 ->  Hash  (cost=672.00..672.00 rows=20000 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..672.00 rows=20000 width=8)
 JIT:
   Functions: 53
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(35 rows)

COMMIT;
COMMIT

Query 5 executed in 0.197 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice * l_discount) as revenue
from
	lineitem
where
	l_shipdate >= date '1997-01-01'
	and l_shipdate < cast(date '1997-01-01' + interval '1 year' as date)
	and l_discount between 0.09 - 0.01 and 0.09 + 0.01
	and l_quantity < 24;
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=338993.44..338993.45 rows=1 width=32)
   ->  Gather  (cost=338993.22..338993.43 rows=2 width=32)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=337993.22..337993.23 rows=1 width=32)
               ->  Parallel Seq Scan on lineitem  (cost=0.00..337529.21 rows=92800 width=12)
                     Filter: ((l_shipdate >= '1997-01-01'::date) AND (l_shipdate < '1998-01-01'::date) AND (l_discount >= 0.08) AND (l_discount <= 0.10) AND (l_quantity < '24'::numeric))
 JIT:
   Functions: 7
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(9 rows)

COMMIT;
COMMIT

Query 6 executed in 0.163 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	supp_nation,
	cust_nation,
	l_year,
	sum(volume) as revenue
from
	(
		select
			n1.n_name as supp_nation,
			n2.n_name as cust_nation,
			extract(year from l_shipdate) as l_year,
			l_extendedprice * (1 - l_discount) as volume
		from
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2
		where
			s_suppkey = l_suppkey
			and o_orderkey = l_orderkey
			and c_custkey = o_custkey
			and s_nationkey = n1.n_nationkey
			and c_nationkey = n2.n_nationkey
			and (
				(n1.n_name = 'RUSSIA' and n2.n_name = 'BRAZIL')
				or (n1.n_name = 'BRAZIL' and n2.n_name = 'RUSSIA')
			)
			and l_shipdate between date '1995-01-01' and date '1996-12-31'
	) as shipping
group by
	supp_nation,
	cust_nation,
	l_year
order by
	supp_nation,
	cust_nation,
	l_year;
                                                                                     QUERY PLAN                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=238230.01..239832.57 rows=10048 width=272)
   Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
   ->  Gather Merge  (cost=238230.01..239555.98 rows=10070 width=272)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=237229.99..237393.62 rows=5035 width=272)
               Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Sort  (cost=237229.99..237242.57 rows=5035 width=252)
                     Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                     ->  Hash Join  (cost=9763.38..236920.39 rows=5035 width=252)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           Join Filter: (((n1.n_name = 'RUSSIA'::bpchar) AND (n2.n_name = 'BRAZIL'::bpchar)) OR ((n1.n_name = 'BRAZIL'::bpchar) AND (n2.n_name = 'RUSSIA'::bpchar)))
                           ->  Nested Loop  (cost=9008.58..235505.79 rows=120975 width=124)
                                 ->  Parallel Hash Join  (cost=9008.15..78860.32 rows=100000 width=108)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..64748.00 rows=1250000 width=8)
                                       ->  Parallel Hash  (cost=8883.15..8883.15 rows=10000 width=108)
                                             ->  Hash Join  (cost=1.40..8883.15 rows=10000 width=108)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..8498.00 rows=125000 width=8)
                                                   ->  Hash  (cost=1.38..1.38 rows=2 width=108)
                                                         ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=108)
                                                               Filter: ((n_name = 'BRAZIL'::bpchar) OR (n_name = 'RUSSIA'::bpchar))
                                 ->  Index Scan using lineitem_pkey on lineitem  (cost=0.43..1.48 rows=9 width=24)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=734.80..734.80 rows=1600 width=108)
                                 ->  Hash Join  (cost=1.40..734.80 rows=1600 width=108)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..672.00 rows=20000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=108)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=108)
                                                   Filter: ((n_name = 'RUSSIA'::bpchar) OR (n_name = 'BRAZIL'::bpchar))
 JIT:
   Functions: 57
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(35 rows)

COMMIT;
COMMIT

Query 7 executed in 0.179 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	o_year,
	sum(case
		when nation = 'BRAZIL' then volume
		else 0
	end) / sum(volume) as mkt_share
from
	(
		select
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) as volume,
			n2.n_name as nation
		from
			part,
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2,
			region
		where
			p_partkey = l_partkey
			and s_suppkey = l_suppkey
			and l_orderkey = o_orderkey
			and o_custkey = c_custkey
			and c_nationkey = n1.n_nationkey
			and n1.n_regionkey = r_regionkey
			and r_name = 'AMERICA'
			and s_nationkey = n2.n_nationkey
			and o_orderdate between date '1995-01-01' and date '1996-12-31'
			and p_type = 'STANDARD POLISHED TIN'
	) as all_nations
group by
	o_year
order by
	o_year;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=275521.49..276175.51 rows=2406 width=64)
   Group Key: (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=275521.49..276076.19 rows=4096 width=96)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=274521.47..274603.39 rows=2048 width=96)
               Group Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=274521.47..274526.59 rows=2048 width=148)
                     Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                     ->  Hash Join  (cost=15144.24..274408.83 rows=2048 width=148)
                           Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                           ->  Nested Loop  (cost=15142.68..274395.85 rows=2048 width=20)
                                 ->  Parallel Hash Join  (cost=15142.39..273770.85 rows=2048 width=20)
                                       Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                       ->  Nested Loop  (cost=9532.15..267352.78 rows=307739 width=24)
                                             ->  Parallel Hash Join  (cost=9531.71..82293.10 rows=76948 width=8)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..70998.00 rows=384738 width=12)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Parallel Hash  (cost=9219.21..9219.21 rows=25000 width=4)
                                                         ->  Hash Join  (cost=2.46..9219.21 rows=25000 width=4)
                                                               Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..8498.00 rows=125000 width=8)
                                                               ->  Hash  (cost=2.40..2.40 rows=5 width=4)
                                                                     ->  Hash Join  (cost=1.07..2.40 rows=5 width=4)
                                                                           Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Scan using lineitem_pkey on lineitem  (cost=0.43..2.09 rows=31 width=24)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=5590.67..5590.67 rows=1566 width=4)
                                             ->  Parallel Bitmap Heap Scan on part  (cost=33.05..5590.67 rows=1566 width=4)
                                                   Recheck Cond: ((p_type)::text = 'STANDARD POLISHED TIN'::text)
                                                   ->  Bitmap Index Scan on idx_part_p_type  (cost=0.00..32.39 rows=2662 width=0)
                                                         Index Cond: ((p_type)::text = 'STANDARD POLISHED TIN'::text)
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.31 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                 ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=108)
 JIT:
   Functions: 63
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(43 rows)

COMMIT;
COMMIT

Query 8 executed in 0.184 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	nation,
	o_year,
	sum(amount) as sum_profit
from
	(
		select
			n_name as nation,
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount
		from
			part,
			supplier,
			lineitem,
			partsupp,
			orders,
			nation
		where
			s_suppkey = l_suppkey
			and ps_suppkey = l_suppkey
			and ps_partkey = l_partkey
			and p_partkey = l_partkey
			and o_orderkey = l_orderkey
			and s_nationkey = n_nationkey
			and p_name like '%blush%'
	) as profit
group by
	nation,
	o_year
order by
	nation,
	o_year desc;
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=480532.73..501465.65 rows=60150 width=168)
   Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=480532.73..499360.40 rows=120300 width=168)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=479532.70..484474.77 rows=60150 width=168)
               Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=479532.70..480037.68 rows=201991 width=159)
                     Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                     ->  Hash Join  (cost=363304.60..445853.83 rows=201991 width=159)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Hash Join  (cost=363303.04..444727.17 rows=201991 width=31)
                                 Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Parallel Seq Scan on orders  (cost=0.00..64748.00 rows=1250000 width=8)
                                 ->  Parallel Hash  (cost=359397.15..359397.15 rows=201991 width=31)
                                       ->  Hash Join  (cost=304084.96..359397.15 rows=201991 width=31)
                                             Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                             ->  Parallel Hash Join  (cost=303162.96..357944.81 rows=201991 width=35)
                                                   Hash Cond: ((partsupp.ps_suppkey = lineitem.l_suppkey) AND (partsupp.ps_partkey = lineitem.l_partkey))
                                                   ->  Parallel Seq Scan on partsupp  (cost=0.00..41690.67 rows=666667 width=14)
                                                   ->  Parallel Hash  (cost=298554.10..298554.10 rows=201991 width=33)
                                                         ->  Parallel Hash Join  (cost=10391.51..298554.10 rows=201991 width=33)
                                                               Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                                               ->  Parallel Seq Scan on lineitem  (cost=0.00..275039.65 rows=4999165 width=29)
                                                               ->  Parallel Hash  (cost=10307.33..10307.33 rows=6734 width=4)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..10307.33 rows=6734 width=4)
                                                                           Filter: ((p_name)::text ~~ '%blush%'::text)
                                             ->  Hash  (cost=672.00..672.00 rows=20000 width=8)
                                                   ->  Seq Scan on supplier  (cost=0.00..672.00 rows=20000 width=8)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=108)
 JIT:
   Functions: 55
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

COMMIT;
COMMIT

Query 9 executed in 0.203 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	c_custkey,
	c_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	c_acctbal,
	n_name,
	c_address,
	c_phone,
	c_comment
from
	customer,
	orders,
	lineitem,
	nation
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate >= date '1993-08-01'
	and o_orderdate < cast(date '1993-08-01' + interval '3 month' as date)
	and l_returnflag = 'R'
	and c_nationkey = n_nationkey
group by
	c_custkey,
	c_name,
	c_acctbal,
	c_phone,
	n_name,
	c_address,
	c_comment
order by
	revenue desc
LIMIT 20;
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=401509.36..401509.41 rows=20 width=280)
   ->  Sort  (cost=401509.36..401794.54 rows=114071 width=280)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=383818.12..398473.97 rows=114071 width=280)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=383818.12..396097.48 rows=95060 width=280)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=382818.10..384125.18 rows=47530 width=280)
                           Group Key: customer.c_custkey, nation.n_name
                           ->  Sort  (cost=382818.10..382936.93 rows=47530 width=260)
                                 Sort Key: customer.c_custkey, nation.n_name
                                 ->  Hash Join  (cost=363029.13..373277.34 rows=47530 width=260)
                                       Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                       ->  Parallel Hash Join  (cost=363027.57..373129.86 rows=47530 width=160)
                                             Hash Cond: (customer.c_custkey = orders.o_custkey)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..8498.00 rows=125000 width=148)
                                             ->  Parallel Hash  (cost=362433.45..362433.45 rows=47530 width=16)
                                                   ->  Parallel Hash Join  (cost=71587.19..362433.45 rows=47530 width=16)
                                                         Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                                         ->  Parallel Seq Scan on lineitem  (cost=0.00..287537.56 rows=1260456 width=16)
                                                               Filter: (l_returnflag = 'R'::bpchar)
                                                         ->  Parallel Hash  (cost=70998.00..70998.00 rows=47135 width=8)
                                                               ->  Parallel Seq Scan on orders  (cost=0.00..70998.00 rows=47135 width=8)
                                                                     Filter: ((o_orderdate >= '1993-08-01'::date) AND (o_orderdate < '1993-11-01'::date))
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=108)
 JIT:
   Functions: 41
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(29 rows)

COMMIT;
COMMIT

Query 10 executed in 0.191 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	ps_partkey,
	sum(ps_supplycost * ps_availqty) as value
from
	partsupp,
	supplier,
	nation
where
	ps_suppkey = s_suppkey
	and s_nationkey = n_nationkey
	and n_name = 'ETHIOPIA'
group by
	ps_partkey having
		sum(ps_supplycost * ps_availqty) > (
			select
				sum(ps_supplycost * ps_availqty) *         inf
			from
				partsupp,
				supplier,
				nation
			where
				ps_suppkey = s_suppkey
				and s_nationkey = n_nationkey
				and n_name = 'ETHIOPIA'
		)
order by
	value desc;
ERROR:  column "inf" does not exist
LINE 17:     sum(ps_supplycost * ps_availqty) *         inf
                                                        ^

Query 11 executed in 0.134 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	l_shipmode,
	sum(case
		when o_orderpriority = '1-URGENT'
			or o_orderpriority = '2-HIGH'
			then 1
		else 0
	end) as high_line_count,
	sum(case
		when o_orderpriority <> '1-URGENT'
			and o_orderpriority <> '2-HIGH'
			then 1
		else 0
	end) as low_line_count
from
	orders,
	lineitem
where
	o_orderkey = l_orderkey
	and l_shipmode in ('FOB', 'RAIL')
	and l_commitdate < l_receiptdate
	and l_shipdate < l_commitdate
	and l_receiptdate >= date '1994-01-01'
	and l_receiptdate < date '1994-01-01' + interval '1 year'
group by
	l_shipmode
order by
	l_shipmode;
                                                                                                                                 QUERY PLAN                                                                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=425840.21..426315.01 rows=7 width=27)
   Group Key: lineitem.l_shipmode
   ->  Gather Merge  (cost=425840.21..426314.83 rows=14 width=27)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=424840.18..425313.19 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Sort  (cost=424840.18..424899.30 rows=23647 width=27)
                     Sort Key: lineitem.l_shipmode
                     ->  Nested Loop  (cost=0.43..423122.30 rows=23647 width=27)
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..337529.21 rows=23647 width=15)
                                 Filter: ((l_shipmode = ANY ('{FOB,RAIL}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01 00:00:00'::timestamp without time zone))
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..3.62 rows=1 width=20)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
 JIT:
   Functions: 15
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(16 rows)

COMMIT;
COMMIT

Query 12 executed in 0.194 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	c_count,
	count(*) as custdist
from
	(
		select
			c_custkey,
			count(o_orderkey)
		from
			customer left outer join orders on
				c_custkey = o_custkey
				and o_comment not like '%pending%packages%'
		group by
			c_custkey
	) as c_orders (c_custkey, c_count)
group by
	c_count
order by
	custdist desc,
	c_count desc;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=275001.34..275001.84 rows=200 width=16)
   Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
   ->  HashAggregate  (cost=274991.70..274993.70 rows=200 width=16)
         Group Key: count(orders.o_orderkey)
         ->  Finalize GroupAggregate  (cost=194486.81..270491.70 rows=300000 width=12)
               Group Key: customer.c_custkey
               ->  Gather Merge  (cost=194486.81..264491.70 rows=600000 width=12)
                     Workers Planned: 2
                     ->  Sort  (cost=193486.79..194236.79 rows=300000 width=12)
                           Sort Key: customer.c_custkey
                           ->  Partial HashAggregate  (cost=148400.40..161067.39 rows=300000 width=12)
                                 Group Key: customer.c_custkey
                                 Planned Partitions: 4
                                 ->  Parallel Hash Right Join  (cost=7676.96..78798.11 rows=1237374 width=8)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..67873.00 rows=1237374 width=8)
                                             Filter: ((o_comment)::text !~~ '%pending%packages%'::text)
                                       ->  Parallel Hash  (cost=6114.46..6114.46 rows=125000 width=4)
                                             ->  Parallel Index Only Scan using customer_pkey on customer  (cost=0.42..6114.46 rows=125000 width=4)
 JIT:
   Functions: 18
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(22 rows)

COMMIT;
COMMIT

Query 13 executed in 0.176 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	100.00 * sum(case
		when p_type like 'PROMO%'
			then l_extendedprice * (1 - l_discount)
		else 0
	end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue
from
	lineitem,
	part
where
	l_partkey = p_partkey
	and l_shipdate >= date '1994-02-01'
	and l_shipdate < cast(date '1994-02-01' + interval '1 month' as date);
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=315978.08..315978.09 rows=1 width=32)
   ->  Gather  (cost=315977.84..315978.05 rows=2 width=64)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=314977.84..314977.85 rows=1 width=64)
               ->  Parallel Hash Join  (cost=300740.36..313991.00 rows=56391 width=33)
                     Hash Cond: (part.p_partkey = lineitem.l_partkey)
                     ->  Parallel Seq Scan on part  (cost=0.00..9890.67 rows=166667 width=25)
                     ->  Parallel Hash  (cost=300035.47..300035.47 rows=56391 width=16)
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..300035.47 rows=56391 width=16)
                                 Filter: ((l_shipdate >= '1994-02-01'::date) AND (l_shipdate < '1994-03-01'::date))
 JIT:
   Functions: 17
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(13 rows)

COMMIT;
COMMIT

Query 14 executed in 0.193 second(s).
BEGIN;
BEGIN
create or replace view revenue0 (supplier_no, total_revenue) as
	select
		l_suppkey,
		sum(l_extendedprice * (1 - l_discount))
	from
		lineitem
	where
		l_shipdate >= '1994-04-01'
		and l_shipdate < date'1994-04-01' + interval '90 days'
	group by
		l_suppkey;
CREATE VIEW
EXPLAIN
select
	s_suppkey,
	s_name,
	s_address,
	s_phone,
	total_revenue
from
	supplier,
	revenue0
where
	s_suppkey = supplier_no
	and total_revenue = (
		select
			max(total_revenue)
		from
			revenue0
	)
order by
	s_suppkey;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=614488.63..620343.93 rows=100 width=103)
   InitPlan 1
     ->  Aggregate  (cost=309965.77..309965.78 rows=1 width=32)
           ->  Finalize GroupAggregate  (cost=304522.56..309716.86 rows=19913 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather Merge  (cost=304522.56..309169.25 rows=39826 width=36)
                       Workers Planned: 2
                       ->  Sort  (cost=303522.54..303572.32 rows=19913 width=36)
                             Sort Key: lineitem_1.l_suppkey
                             ->  Partial HashAggregate  (cost=301851.69..302100.61 rows=19913 width=36)
                                   Group Key: lineitem_1.l_suppkey
                                   ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..300035.47 rows=181622 width=16)
                                         Filter: ((l_shipdate >= '1994-04-01'::date) AND (l_shipdate < '1994-06-30 00:00:00'::timestamp without time zone))
   ->  Finalize GroupAggregate  (cost=304522.56..309766.64 rows=100 width=36)
         Group Key: lineitem.l_suppkey
         Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
         ->  Gather Merge  (cost=304522.56..309169.25 rows=39826 width=36)
               Workers Planned: 2
               ->  Sort  (cost=303522.54..303572.32 rows=19913 width=36)
                     Sort Key: lineitem.l_suppkey
                     ->  Partial HashAggregate  (cost=301851.69..302100.61 rows=19913 width=36)
                           Group Key: lineitem.l_suppkey
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..300035.47 rows=181622 width=16)
                                 Filter: ((l_shipdate >= '1994-04-01'::date) AND (l_shipdate < '1994-06-30 00:00:00'::timestamp without time zone))
   ->  Index Scan using supplier_pkey on supplier  (cost=0.29..6.10 rows=1 width=71)
         Index Cond: (s_suppkey = lineitem.l_suppkey)
 JIT:
   Functions: 25
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(29 rows)

drop view revenue0;
DROP VIEW
COMMIT;
COMMIT

Query 15 executed in 0.196 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	p_brand,
	p_type,
	p_size,
	count(distinct ps_suppkey) as supplier_cnt
from
	partsupp,
	part
where
	p_partkey = ps_partkey
	and p_brand <> 'Brand#12'
	and p_type not like 'SMALL ANODIZED%'
	and p_size in (17, 31, 13, 14, 16, 39, 36, 37)
	and ps_suppkey not in (
		select
			s_suppkey
		from
			supplier
		where
			s_comment like '%Customer%Complaints%'
	)
group by
	p_brand,
	p_type,
	p_size
order by
	supplier_cnt desc,
	p_brand,
	p_type,
	p_size;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=68209.18..68289.31 rows=32052 width=44)
   Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
   ->  GroupAggregate  (cost=50392.81..65810.39 rows=32052 width=44)
         Group Key: part.p_brand, part.p_type, part.p_size
         ->  Gather Merge  (cost=50392.81..64296.11 rows=119376 width=40)
               Workers Planned: 2
               ->  Sort  (cost=49392.79..49517.14 rows=49740 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Parallel Hash Join  (cost=10634.32..45512.54 rows=49740 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=722.43..34725.64 rows=333333 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..722.00 rows=2 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Parallel Hash  (cost=9601.01..9601.01 rows=24870 width=40)
                                 ->  Parallel Bitmap Heap Scan on part  (cost=707.98..9601.01 rows=24870 width=40)
                                       Recheck Cond: (p_size = ANY ('{17,31,13,14,16,39,36,37}'::integer[]))
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL ANODIZED%'::text))
                                       ->  Bitmap Index Scan on p_s  (cost=0.00..693.06 rows=64227 width=0)
                                             Index Cond: (p_size = ANY ('{17,31,13,14,16,39,36,37}'::integer[]))
(21 rows)

COMMIT;
COMMIT

Query 16 executed in 0.147 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice) / 7.0 as avg_yearly
from
	lineitem,
	part
where
	p_partkey = l_partkey
	and p_brand = 'Brand#21'
	and p_container = 'LG PACK'
	and l_quantity < (
		select
			0.2 * avg(l_quantity)
		from
			lineitem
		where
			l_partkey = p_partkey
	);
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=4128497.48..4128497.49 rows=1 width=32)
   ->  Hash Join  (cost=1733.26..4128486.53 rows=4379 width=8)
         Hash Cond: (lineitem.l_partkey = part.p_partkey)
         Join Filter: (lineitem.l_quantity < (SubPlan 1))
         ->  Seq Scan on lineitem  (cost=0.00..345027.96 rows=11997996 width=17)
         ->  Hash  (cost=1727.79..1727.79 rows=438 width=4)
               ->  Bitmap Heap Scan on part  (cost=305.11..1727.79 rows=438 width=4)
                     Recheck Cond: ((p_container = 'LG PACK'::bpchar) AND (p_brand = 'Brand#21'::bpchar))
                     ->  BitmapAnd  (cost=305.11..305.11 rows=438 width=0)
                           ->  Bitmap Index Scan on idx_part_p_container  (cost=0.00..119.42 rows=10533 width=0)
                                 Index Cond: (p_container = 'LG PACK'::bpchar)
                           ->  Bitmap Index Scan on idx_part_p_brand  (cost=0.00..185.22 rows=16640 width=0)
                                 Index Cond: (p_brand = 'Brand#21'::bpchar)
         SubPlan 1
           ->  Aggregate  (cost=375023.03..375023.04 rows=1 width=32)
                 ->  Seq Scan on lineitem lineitem_1  (cost=0.00..375022.95 rows=31 width=5)
                       Filter: (l_partkey = part.p_partkey)
 JIT:
   Functions: 24
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(20 rows)

COMMIT;
COMMIT

Query 17 executed in 0.176 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice,
	sum(l_quantity)
from
	customer,
	orders,
	lineitem
where
	o_orderkey in (
		select
			l_orderkey
		from
			lineitem
		group by
			l_orderkey having
				sum(l_quantity) > 312
	)
	and c_custkey = o_custkey
	and o_orderkey = l_orderkey
group by
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice
order by
	o_totalprice desc,
	o_orderdate
LIMIT 100;
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1176121.94..1176122.19 rows=100 width=71)
   ->  Sort  (cost=1176121.94..1177406.20 rows=513702 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=902969.87..1156488.62 rows=513702 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Incremental Sort  (cost=902969.87..1146214.58 rows=513702 width=44)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     Presorted Key: customer.c_custkey
                     ->  Nested Loop  (cost=902969.10..1130577.56 rows=513702 width=44)
                           ->  Merge Join  (cost=902968.67..921022.10 rows=128447 width=43)
                                 Merge Cond: (customer.c_custkey = orders.o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.42..15056.20 rows=300000 width=23)
                                 ->  Materialize  (cost=902968.18..903610.41 rows=128447 width=24)
                                       ->  Sort  (cost=902968.18..903289.30 rows=128447 width=24)
                                             Sort Key: orders.o_custkey
                                             ->  Hash Join  (cost=799310.42..889433.43 rows=128447 width=24)
                                                   Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                                   ->  Seq Scan on orders  (cost=0.00..82248.00 rows=3000000 width=20)
                                                   ->  Hash  (cost=797704.83..797704.83 rows=128447 width=4)
                                                         ->  Finalize GroupAggregate  (cost=696225.42..797704.83 rows=128447 width=4)
                                                               Group Key: lineitem_1.l_orderkey
                                                               Filter: (sum(lineitem_1.l_quantity) > '312'::numeric)
                                                               ->  Gather Merge  (cost=696225.42..786144.60 rows=770682 width=36)
                                                                     Workers Planned: 2
                                                                     ->  Sort  (cost=695225.40..696188.75 rows=385341 width=36)
                                                                           Sort Key: lineitem_1.l_orderkey
                                                                           ->  Partial HashAggregate  (cost=595298.66..648935.39 rows=385341 width=36)
                                                                                 Group Key: lineitem_1.l_orderkey
                                                                                 Planned Partitions: 16
                                                                                 ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..275039.65 rows=4999165 width=9)
                           ->  Index Scan using lineitem_pkey on lineitem  (cost=0.43..1.32 rows=31 width=9)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 34
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(35 rows)

COMMIT;
COMMIT

Query 18 executed in 0.186 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice* (1 - l_discount)) as revenue
from
	lineitem,
	part
where
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#23'
		and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')
		and l_quantity >= 7 and l_quantity <= 7+10
		and p_size between 1 and 5
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#22'
		and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')
		and l_quantity >= 17 and l_quantity <= 17+10
		and p_size between 1 and 10
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#24'
		and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')
		and l_quantity >= 21 and l_quantity <= 21+10
		and p_size between 1 and 15
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	);
                                                                                                                                                                                                                                                                                                                                                                           QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                           

 Finalize Aggregate  (cost=383747.10..383747.11 rows=1 width=32)
   ->  Gather  (cost=383746.88..383747.09 rows=2 width=32)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=382746.88..382746.89 rows=1 width=32)
               ->  Hash Join  (cost=26190.19..382746.19 rows=91 width=12)
                     Hash Cond: (lineitem.l_partkey = part.p_partkey)
                     Join Filter: (((part.p_brand = 'Brand#23'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (lineitem.l_quantity >= '7'::numeric) AND (lineitem.l_quantity <= '17'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#22'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (lineitem.l_quantity >= '17'::numeric) AND (lineitem.l_quantity <= '27'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (lineitem.l_quantity >= '21'::numeric) AND (lineitem.l_quantity <= '31'::numeric) AND (part.p_size <= 15)))
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=18450.94..374761.01 rows=93687 width=21)
                           Recheck Cond: (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[]))
                           Filter: ((l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '7'::numeric) AND (l_quantity <= '17'::numeric)) OR ((l_quantity >= '17'::numeric) AND (l_quantity <= '27'::numeric)) OR ((l_quantity >= '21'::numeric) AND (l_quantity <= '31'::numeric))))
                           ->  Bitmap Index Scan on idx_lineitem_l_shipmode  (cost=0.00..18394.72 rows=1716513 width=0)
                                 Index Cond: (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[]))
                     ->  Hash  (cost=7727.73..7727.73 rows=922 width=30)
                           ->  Bitmap Heap Scan on part  (cost=5047.31..7727.73 rows=922 width=30)
                                 Recheck Cond: (((p_brand = 'Brand#23'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5) AND (p_size >= 1)) OR ((p_brand = 'Brand#22'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10) AND (p_size >= 1)) OR ((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15) AND (p_size >= 1)))
                                 ->  BitmapOr  (cost=5047.31..5047.31 rows=922 width=0)
                                       ->  BitmapAnd  (cost=1135.36..1135.36 rows=148 width=0)
                                             ->  Bitmap Index Scan on idx_part_p_brand  (cost=0.00..172.62 rows=15493 width=0)
                                                   Index Cond: (p_brand = 'Brand#23'::bpchar)
                                             ->  Bitmap Index Scan on idx_part_p_container  (cost=0.00..437.40 rows=39427 width=0)
                                                   Index Cond: (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[]))
                                             ->  Bitmap Index Scan on p_s  (cost=0.00..524.15 rows=38773 width=0)
                                                   Index Cond: ((p_size <= 5) AND (p_size >= 1))
                                       ->  BitmapAnd  (cost=1684.53..1684.53 rows=301 width=0)
                                             ->  Bitmap Index Scan on idx_part_p_brand  (cost=0.00..169.62 rows=15093 width=0)
                                                   Index Cond: (p_brand = 'Brand#22'::bpchar)
                                             ->  Bitmap Index Scan on idx_part_p_container  (cost=0.00..443.70 rows=40267 width=0)
                                                   Index Cond: (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[]))
                                             ->  Bitmap Index Scan on p_s  (cost=0.00..1070.02 rows=79360 width=0)
                                                   Index Cond: ((p_size <= 10) AND (p_size >= 1))
                                       ->  BitmapAnd  (cost=2226.91..2226.91 rows=473 width=0)
                                             ->  Bitmap Index Scan on idx_part_p_brand  (cost=0.00..173.62 rows=15627 width=0)
                                                   Index Cond: (p_brand = 'Brand#24'::bpchar)
                                             ->  Bitmap Index Scan on idx_part_p_container  (cost=0.00..445.80 rows=40547 width=0)
                                                   Index Cond: (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[]))
                                             ->  Bitmap Index Scan on p_s  (cost=0.00..1606.29 rows=119387 width=0)
                                                   Index Cond: ((p_size <= 15) AND (p_size >= 1))
 JIT:
   Functions: 23
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(40 rows)

COMMIT;
COMMIT

Query 19 executed in 0.184 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	s_name,
	s_address
from
	supplier,
	nation
where
	s_suppkey in (
		select
			ps_suppkey
		from
			partsupp
		where
			ps_partkey in (
				select
					p_partkey
				from
					part
				where
					p_name like 'antique%'
			)
			and ps_availqty > (
				select
					0.5 * sum(l_quantity)
				from
					lineitem
				where
					l_partkey = ps_partkey
					and l_suppkey = ps_suppkey
					and l_shipdate >= '1997-01-01'
					and l_shipdate < cast(date '1997-01-01' + interval '1 year' as date)
			)
	)
	and s_nationkey = n_nationkey
	and n_name = 'SAUDI ARABIA'
order by
	s_name;
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Semi Join  (cost=0.71..9393289172.55 rows=215 width=51)
   Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
   ->  Nested Loop  (cost=0.29..1569.59 rows=800 width=55)
         Join Filter: (nation.n_nationkey = supplier.s_nationkey)
         ->  Index Scan using idx_supplier_s_name on supplier  (cost=0.29..1268.27 rows=20000 width=59)
         ->  Materialize  (cost=0.00..1.32 rows=1 width=4)
               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                     Filter: (n_name = 'SAUDI ARABIA'::bpchar)
   ->  Materialize  (cost=0.43..9393222972.43 rows=5387 width=4)
         ->  Nested Loop  (cost=0.43..9393222945.50 rows=5387 width=4)
               ->  Seq Scan on part  (cost=0.00..13224.00 rows=4040 width=4)
                     Filter: ((p_name)::text ~~ 'antique%'::text)
               ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..2325051.89 rows=2 width=8)
                     Index Cond: (ps_partkey = part.p_partkey)
                     Filter: ((ps_availqty)::numeric > (SubPlan 1))
                     SubPlan 1
                       ->  Aggregate  (cost=465007.93..465007.94 rows=1 width=32)
                             ->  Seq Scan on lineitem  (cost=0.00..465007.92 rows=1 width=5)
                                   Filter: ((l_shipdate >= '1997-01-01'::date) AND (l_shipdate < '1998-01-01'::date) AND (l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(22 rows)

COMMIT;
COMMIT

Query 20 executed in 0.175 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	s_name,
	count(*) as numwait
from
	supplier,
	lineitem l1,
	orders,
	nation
where
	s_suppkey = l1.l_suppkey
	and o_orderkey = l1.l_orderkey
	and o_orderstatus = 'F'
	and l1.l_receiptdate > l1.l_commitdate
	and exists (
		select
			*
		from
			lineitem l2
		where
			l2.l_orderkey = l1.l_orderkey
			and l2.l_suppkey <> l1.l_suppkey
	)
	and not exists (
		select
			*
		from
			lineitem l3
		where
			l3.l_orderkey = l1.l_orderkey
			and l3.l_suppkey <> l1.l_suppkey
			and l3.l_receiptdate > l3.l_commitdate
	)
	and s_nationkey = n_nationkey
	and n_name = 'RUSSIA'
group by
	s_name
order by
	numwait desc,
	s_name
LIMIT 100;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=492643.08..492643.08 rows=1 width=34)
   ->  Sort  (cost=492643.08..492643.08 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=492643.05..492643.07 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=492643.05..492643.05 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=297031.86..492643.04 rows=1 width=26)
                           Join Filter: (orders.o_orderkey = l2.l_orderkey)
                           ->  Gather  (cost=297031.42..492622.69 rows=1 width=38)
                                 Workers Planned: 2
                                 ->  Nested Loop Anti Join  (cost=296031.42..491622.59 rows=1 width=38)
                                       ->  Parallel Hash Join  (cost=296030.99..366299.05 rows=32152 width=38)
                                             Hash Cond: (orders.o_orderkey = l1.l_orderkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..67873.00 rows=602958 width=4)
                                                   Filter: (o_orderstatus = 'F'::bpchar)
                                             ->  Parallel Hash  (cost=295197.80..295197.80 rows=66655 width=34)
                                                   ->  Hash Join  (cost=744.73..295197.80 rows=66655 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Seq Scan on lineitem l1  (cost=0.00..287537.56 rows=1666388 width=8)
                                                               Filter: (l_receiptdate > l_commitdate)
                                                         ->  Hash  (cost=734.73..734.73 rows=800 width=30)
                                                               ->  Hash Join  (cost=1.32..734.73 rows=800 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Seq Scan on supplier  (cost=0.00..672.00 rows=20000 width=34)
                                                                     ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                                 Filter: (n_name = 'RUSSIA'::bpchar)
                                       ->  Index Scan using lineitem_pkey on lineitem l3  (cost=0.43..20.03 rows=10 width=8)
                                             Index Cond: (l_orderkey = l1.l_orderkey)
                                             Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                           ->  Index Scan using lineitem_pkey on lineitem l2  (cost=0.43..19.96 rows=31 width=8)
                                 Index Cond: (l_orderkey = l1.l_orderkey)
                                 Filter: (l_suppkey <> l1.l_suppkey)
 JIT:
   Functions: 51
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(37 rows)

COMMIT;
COMMIT

Query 21 executed in 0.200 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	cntrycode,
	count(*) as numcust,
	sum(c_acctbal) as totacctbal
from
	(
		select
			substring(c_phone from 1 for 2) as cntrycode,
			c_acctbal
		from
			customer
		where
			substring(c_phone from 1 for 2) in
				('30', '15', '25', '17', '10', '14', '19')
			and c_acctbal > (
				select
					avg(c_acctbal)
				from
					customer
				where
					c_acctbal > 0.00
					and substring(c_phone from 1 for 2) in
						('30', '15', '25', '17', '10', '14', '19')
			)
			and not exists (
				select
					*
				from
					orders
				where
					o_custkey = c_custkey
			)
	) as vip
group by
	cntrycode
order by
	cntrycode;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=98846.11..99043.46 rows=1479 width=72)
   Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
   InitPlan 1
     ->  Finalize Aggregate  (cost=11539.40..11539.41 rows=1 width=32)
           ->  Gather  (cost=11539.18..11539.39 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=10539.18..10539.19 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..10529.25 rows=3970 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{30,15,25,17,10,14,19}'::text[])))
   ->  Gather Merge  (cost=87306.70..87465.85 rows=1232 width=72)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=86306.68..86323.62 rows=616 width=72)
               Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Sort  (cost=86306.68..86308.22 rows=616 width=38)
                     Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                     ->  Parallel Hash Right Anti Join  (cost=10215.27..86278.14 rows=616 width=38)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Parallel Seq Scan on orders  (cost=0.00..64748.00 rows=1250000 width=4)
                           ->  Parallel Hash  (cost=10197.05..10197.05 rows=1458 width=26)
                                 ->  Parallel Bitmap Heap Scan on customer  (cost=1855.30..10197.05 rows=1458 width=26)
                                       Recheck Cond: (c_acctbal > (InitPlan 1).col1)
                                       Filter: (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{30,15,25,17,10,14,19}'::text[]))
                                       ->  Bitmap Index Scan on c_acb  (cost=0.00..1854.42 rows=100000 width=0)
                                             Index Cond: (c_acctbal > (InitPlan 1).col1)
(24 rows)

COMMIT;
COMMIT

Query 22 executed in 0.137 second(s).

