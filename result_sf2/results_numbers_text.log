=== Experiment: numbers_text ===
INDEX_ALL=0
INDEX_NUMBERS=1
INDEX_DATES=0
INDEX_TEXT=1
INDEX_DEFAULT=0

[Info] Running drop_indexes.sh
[Info] Dropping date indexes
[Info] Keeping numbers indexes
[Info] Keeping text indexes
[Info] Running create_indexes.sh
[Info] Creating indexes for text
[Info] Creating indexes for numbers

[Info] Running queries(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22) for numbers_text
BEGIN;
BEGIN
EXPLAIN
select
	l_returnflag,
	l_linestatus,
	sum(l_quantity) as sum_qty,
	sum(l_extendedprice) as sum_base_price,
	sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
	avg(l_quantity) as avg_qty,
	avg(l_extendedprice) as avg_price,
	avg(l_discount) as avg_disc,
	count(*) as count_order
from
	lineitem
where
	l_shipdate <= date '1998-12-01' - interval '101 days'
group by
	l_returnflag,
	l_linestatus
order by
	l_returnflag,
	l_linestatus;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=460279.93..460281.88 rows=6 width=236)
   Group Key: l_returnflag, l_linestatus
   ->  Gather Merge  (cost=460279.93..460281.33 rows=12 width=236)
         Workers Planned: 2
         ->  Sort  (cost=459279.91..459279.92 rows=6 width=236)
               Sort Key: l_returnflag, l_linestatus
               ->  Partial HashAggregate  (cost=459279.69..459279.83 rows=6 width=236)
                     Group Key: l_returnflag, l_linestatus
                     ->  Parallel Seq Scan on lineitem  (cost=0.00..287537.56 rows=4906918 width=25)
                           Filter: (l_shipdate <= '1998-08-22 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 9
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(13 rows)

COMMIT;
COMMIT

Query 1 execution times in seconds: 0.199,0.191,0.185,0.191,0.188,0.192,0.186,0.196,0.184,0.193
Average execution time: 0.1905 seconds

BEGIN;
BEGIN
EXPLAIN
select
	s_acctbal,
	s_name,
	n_name,
	p_partkey,
	p_mfgr,
	s_address,
	s_phone,
	s_comment
from
	part,
	supplier,
	partsupp,
	nation,
	region
where
	p_partkey = ps_partkey
	and s_suppkey = ps_suppkey
	and p_size = 35
	and p_type like '%COPPER'
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'ASIA'
	and ps_supplycost = (
		select
			min(ps_supplycost)
		from
			partsupp,
			supplier,
			nation,
			region
		where
			p_partkey = ps_partkey
			and s_suppkey = ps_suppkey
			and s_nationkey = n_nationkey
			and n_regionkey = r_regionkey
			and r_name = 'ASIA'
	)
order by
	s_acctbal desc,
	n_name,
	s_name,
	p_partkey
LIMIT 100;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=107827.94..107827.95 rows=1 width=270)
   ->  Sort  (cost=107827.94..107827.95 rows=1 width=270)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Hash Join  (cost=56524.89..107827.93 rows=1 width=270)
               Hash Cond: ((part.p_partkey = partsupp.ps_partkey) AND ((SubPlan 1) = partsupp.ps_supplycost))
               ->  Bitmap Heap Scan on part  (cost=89.48..8692.47 rows=1460 width=30)
                     Recheck Cond: (p_size = 35)
                     Filter: ((p_type)::text ~~ '%COPPER'::text)
                     ->  Bitmap Index Scan on p_s  (cost=0.00..89.12 rows=8093 width=0)
                           Index Cond: (p_size = 35)
               ->  Hash  (cost=40697.40..40697.40 rows=320000 width=250)
                     ->  Nested Loop  (cost=1.99..40697.40 rows=320000 width=250)
                           ->  Nested Loop  (cost=1.56..986.02 rows=4000 width=244)
                                 Join Filter: (nation.n_regionkey = region.r_regionkey)
                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                       Filter: (r_name = 'ASIA'::bpchar)
                                 ->  Hash Join  (cost=1.56..734.96 rows=20000 width=248)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..672.00 rows=20000 width=144)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=112)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=112)
                           ->  Index Scan using ps_sk on partsupp  (cost=0.43..9.12 rows=81 width=14)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=43.46..43.47 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..43.45 rows=1 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'ASIA'::bpchar)
                             ->  Nested Loop  (cost=0.85..42.34 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..41.72 rows=4 width=10)
                                         ->  Index Scan using ps_pk on partsupp partsupp_1  (cost=0.43..8.50 rows=4 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using s_sk on supplier supplier_1  (cost=0.29..8.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using n_nk on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
 JIT:
   Functions: 55
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(40 rows)

COMMIT;
COMMIT

Query 2 execution times in seconds: 0.204,0.197,0.204,0.197,0.203,0.205,0.201,0.206,0.204,0.203
Average execution time: 0.2024 seconds

BEGIN;
BEGIN
EXPLAIN
select
	l_orderkey,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	o_orderdate,
	o_shippriority
from
	customer,
	orders,
	lineitem
where
	c_mktsegment = 'FURNITURE'
	and c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate < date '1995-03-21'
	and l_shipdate > date '1995-03-21'
group by
	l_orderkey,
	o_orderdate,
	o_shippriority
order by
	revenue desc,
	o_orderdate
LIMIT 10;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=438767.34..438767.36 rows=10 width=44)
   ->  Sort  (cost=438767.34..440372.06 rows=641888 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=340421.43..424896.37 rows=641888 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=340421.43..410186.44 rows=534906 width=44)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=339421.41..347445.00 rows=267453 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=339421.41..340090.04 rows=267453 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Nested Loop  (cost=8573.39..309823.95 rows=267453 width=24)
                                       ->  Parallel Hash Join  (cost=8572.95..78055.48 rows=124714 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..67873.00 rows=613145 width=16)
                                                   Filter: (o_orderdate < '1995-03-21'::date)
                                             ->  Parallel Hash  (cost=8255.14..8255.14 rows=25425 width=4)
                                                   ->  Parallel Bitmap Heap Scan on customer  (cost=689.33..8255.14 rows=25425 width=4)
                                                         Recheck Cond: (c_mktsegment = 'FURNITURE'::bpchar)
                                                         ->  Bitmap Index Scan on idx_customer_c_mktsegment  (cost=0.00..674.07 rows=61020 width=0)
                                                               Index Cond: (c_mktsegment = 'FURNITURE'::bpchar)
                                       ->  Index Scan using l_ok on lineitem  (cost=0.43..1.70 rows=16 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_shipdate > '1995-03-21'::date)
 JIT:
   Functions: 29
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(27 rows)

COMMIT;
COMMIT

Query 3 execution times in seconds: 0.193,0.190,0.194,0.202,0.194,0.203,0.194,0.195,0.200,0.187
Average execution time: 0.1952 seconds

BEGIN;
BEGIN
EXPLAIN
select
	o_orderpriority,
	count(*) as order_count
from
	orders
where
	o_orderdate >= date '1996-07-01'
	and o_orderdate < cast(date '1996-07-01' + interval '3 month' as date)
	and exists (
		select
			*
		from
			lineitem
		where
			l_orderkey = o_orderkey
			and l_commitdate < l_receiptdate
	)
group by
	o_orderpriority
order by
	o_orderpriority;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=115784.93..115832.85 rows=5 width=24)
   Group Key: orders.o_orderpriority
   ->  Gather Merge  (cost=115784.93..115832.75 rows=10 width=24)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=114784.90..114831.57 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Sort  (cost=114784.90..114800.44 rows=6216 width=16)
                     Sort Key: orders.o_orderpriority
                     ->  Nested Loop Semi Join  (cost=0.43..114393.24 rows=6216 width=16)
                           ->  Parallel Seq Scan on orders  (cost=0.00..70998.00 rows=46339 width=20)
                                 Filter: ((o_orderdate >= '1996-07-01'::date) AND (o_orderdate < '1996-10-01'::date))
                           ->  Index Scan using l_ok on lineitem  (cost=0.43..4.93 rows=10 width=4)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Filter: (l_commitdate < l_receiptdate)
 JIT:
   Functions: 15
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(17 rows)

COMMIT;
COMMIT

Query 4 execution times in seconds: 0.186,0.192,0.185,0.185,0.191,0.187,0.190,0.186,0.186,0.179
Average execution time: 0.1867 seconds

BEGIN;
BEGIN
EXPLAIN
select
	n_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue
from
	customer,
	orders,
	lineitem,
	supplier,
	nation,
	region
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and l_suppkey = s_suppkey
	and c_nationkey = s_nationkey
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'ASIA'
	and o_orderdate >= date '1995-01-01'
	and o_orderdate < date '1995-01-01' + interval '1 year'
group by
	n_name
order by
	revenue desc;
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=180890.98..180891.04 rows=25 width=136)
   Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
   ->  Finalize GroupAggregate  (cost=180808.82..180890.40 rows=25 width=136)
         Group Key: nation.n_name
         ->  Gather Merge  (cost=180808.82..180889.71 rows=50 width=136)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=179808.80..179883.91 rows=25 width=136)
                     Group Key: nation.n_name
                     ->  Sort  (cost=179808.80..179823.76 rows=5984 width=116)
                           Sort Key: nation.n_name
                           ->  Hash Join  (cost=975.33..179433.40 rows=5984 width=116)
                                 Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                 ->  Nested Loop  (cost=3.33..177675.94 rows=149610 width=128)
                                       ->  Nested Loop  (cost=2.89..49287.21 rows=37409 width=116)
                                             ->  Hash Join  (cost=2.46..9219.21 rows=25000 width=116)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..8498.00 rows=125000 width=8)
                                                   ->  Hash  (cost=2.40..2.40 rows=5 width=108)
                                                         ->  Hash Join  (cost=1.07..2.40 rows=5 width=108)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=112)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'ASIA'::bpchar)
                                             ->  Index Scan using o_ck on orders  (cost=0.43..1.57 rows=3 width=8)
                                                   Index Cond: (o_custkey = customer.c_custkey)
                                                   Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate < '1996-01-01 00:00:00'::timestamp without time zone))
                                       ->  Index Scan using l_ok on lineitem  (cost=0.43..3.13 rows=30 width=20)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                 ->  Hash  (cost=672.00..672.00 rows=20000 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..672.00 rows=20000 width=8)
 JIT:
   Functions: 48
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(34 rows)

COMMIT;
COMMIT

Query 5 execution times in seconds: 0.200,0.192,0.204,0.192,0.199,0.202,0.197,0.192,0.188,0.190
Average execution time: 0.1956 seconds

BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice * l_discount) as revenue
from
	lineitem
where
	l_shipdate >= date '1996-01-01'
	and l_shipdate < cast(date '1996-01-01' + interval '1 year' as date)
	and l_discount between 0.02 - 0.01 and 0.02 + 0.01
	and l_quantity < 24;
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=338993.46..338993.47 rows=1 width=32)
   ->  Gather  (cost=338993.24..338993.45 rows=2 width=32)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=337993.24..337993.25 rows=1 width=32)
               ->  Parallel Seq Scan on lineitem  (cost=0.00..337529.21 rows=92804 width=12)
                     Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date) AND (l_discount >= 0.01) AND (l_discount <= 0.03) AND (l_quantity < '24'::numeric))
 JIT:
   Functions: 7
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(9 rows)

COMMIT;
COMMIT

Query 6 execution times in seconds: 0.186,0.183,0.182,0.184,0.188,0.183,0.183,0.187,0.177,0.178
Average execution time: 0.1831 seconds

BEGIN;
BEGIN
EXPLAIN
select
	supp_nation,
	cust_nation,
	l_year,
	sum(volume) as revenue
from
	(
		select
			n1.n_name as supp_nation,
			n2.n_name as cust_nation,
			extract(year from l_shipdate) as l_year,
			l_extendedprice * (1 - l_discount) as volume
		from
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2
		where
			s_suppkey = l_suppkey
			and o_orderkey = l_orderkey
			and c_custkey = o_custkey
			and s_nationkey = n1.n_nationkey
			and c_nationkey = n2.n_nationkey
			and (
				(n1.n_name = 'INDONESIA' and n2.n_name = 'IRAQ')
				or (n1.n_name = 'IRAQ' and n2.n_name = 'INDONESIA')
			)
			and l_shipdate between date '1995-01-01' and date '1996-12-31'
	) as shipping
group by
	supp_nation,
	cust_nation,
	l_year
order by
	supp_nation,
	cust_nation,
	l_year;
                                                                                      QUERY PLAN                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=146849.55..148451.01 rows=10032 width=272)
   Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
   ->  Gather Merge  (cost=146849.55..148174.73 rows=10064 width=272)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=145849.53..146013.07 rows=5032 width=272)
               Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Sort  (cost=145849.53..145862.11 rows=5032 width=252)
                     Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                     ->  Hash Join  (cost=110618.58..145540.14 rows=5032 width=252)
                           Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           Join Filter: (((n1.n_name = 'INDONESIA'::bpchar) AND (n2.n_name = 'IRAQ'::bpchar)) OR ((n1.n_name = 'IRAQ'::bpchar) AND (n2.n_name = 'INDONESIA'::bpchar)))
                           ->  Nested Loop  (cost=1.83..25510.35 rows=100000 width=108)
                                 ->  Hash Join  (cost=1.40..8883.15 rows=10000 width=108)
                                       Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..8498.00 rows=125000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=108)
                                             ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=108)
                                                   Filter: ((n_name = 'IRAQ'::bpchar) OR (n_name = 'INDONESIA'::bpchar))
                                 ->  Index Scan using o_ck on orders  (cost=0.43..1.48 rows=18 width=8)
                                       Index Cond: (o_custkey = customer.c_custkey)
                           ->  Hash  (cost=101604.31..101604.31 rows=290195 width=124)
                                 ->  Nested Loop  (cost=11.06..101604.31 rows=290195 width=124)
                                       ->  Nested Loop  (cost=10.62..956.35 rows=1600 width=108)
                                             ->  Index Scan using idx_nation_n_name on nation n1  (cost=0.14..12.64 rows=2 width=108)
                                                   Filter: ((n_name = 'INDONESIA'::bpchar) OR (n_name = 'IRAQ'::bpchar))
                                             ->  Bitmap Heap Scan on supplier  (cost=10.49..463.86 rows=800 width=8)
                                                   Recheck Cond: (s_nationkey = n1.n_nationkey)
                                                   ->  Bitmap Index Scan on s_nk  (cost=0.00..10.29 rows=800 width=0)
                                                         Index Cond: (s_nationkey = n1.n_nationkey)
                                       ->  Index Scan using l_sk on lineitem  (cost=0.43..61.07 rows=183 width=24)
                                             Index Cond: (l_suppkey = supplier.s_suppkey)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
 JIT:
   Functions: 46
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(35 rows)

COMMIT;
COMMIT

Query 7 execution times in seconds: 0.201,0.203,0.185,0.195,0.208,0.202,0.196,0.206,0.196,0.201
Average execution time: 0.1993 seconds

BEGIN;
BEGIN
EXPLAIN
select
	o_year,
	sum(case
		when nation = 'SAUDI ARABIA' then volume
		else 0
	end) / sum(volume) as mkt_share
from
	(
		select
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) as volume,
			n2.n_name as nation
		from
			part,
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2,
			region
		where
			p_partkey = l_partkey
			and s_suppkey = l_suppkey
			and l_orderkey = o_orderkey
			and o_custkey = c_custkey
			and c_nationkey = n1.n_nationkey
			and n1.n_regionkey = r_regionkey
			and r_name = 'MIDDLE EAST'
			and s_nationkey = n2.n_nationkey
			and o_orderdate between date '1995-01-01' and date '1996-12-31'
			and p_type = 'SMALL BURNISHED STEEL'
	) as all_nations
group by
	o_year
order by
	o_year;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=160737.02..161382.16 rows=2406 width=64)
   Group Key: (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=160737.02..161283.59 rows=4036 width=96)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=159736.99..159817.71 rows=2018 width=96)
               Group Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=159736.99..159742.04 rows=2018 width=148)
                     Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                     ->  Hash Join  (cost=6.02..159626.22 rows=2018 width=148)
                           Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                           ->  Nested Loop  (cost=4.46..159613.41 rows=2018 width=20)
                                 ->  Hash Join  (cost=4.17..158997.56 rows=2018 width=20)
                                       Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                       ->  Nested Loop  (cost=1.71..158937.08 rows=10090 width=24)
                                             ->  Nested Loop  (cost=1.29..154139.08 rows=10090 width=24)
                                                   ->  Nested Loop  (cost=0.86..138401.80 rows=33295 width=20)
                                                         ->  Parallel Index Scan using p_pk on part  (cost=0.42..16709.50 rows=1110 width=4)
                                                               Filter: ((p_type)::text = 'SMALL BURNISHED STEEL'::text)
                                                         ->  Index Scan using l_pk on lineitem  (cost=0.43..109.32 rows=31 width=24)
                                                               Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Index Scan using o_ok on orders  (cost=0.43..0.47 rows=1 width=12)
                                                         Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Index Scan using c_ck on customer  (cost=0.42..0.48 rows=1 width=8)
                                                   Index Cond: (c_custkey = orders.o_custkey)
                                       ->  Hash  (cost=2.40..2.40 rows=5 width=4)
                                             ->  Hash Join  (cost=1.07..2.40 rows=5 width=4)
                                                   Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                   ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                         ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                               Filter: (r_name = 'MIDDLE EAST'::bpchar)
                                 ->  Index Scan using s_sk on supplier  (cost=0.29..0.31 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                 ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=108)
 JIT:
   Functions: 53
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(39 rows)

COMMIT;
COMMIT

Query 8 execution times in seconds: 0.201,0.207,0.200,0.189,0.207,0.207,0.191,0.207,0.191,0.212
Average execution time: 0.2012 seconds

BEGIN;
BEGIN
EXPLAIN
select
	nation,
	o_year,
	sum(amount) as sum_profit
from
	(
		select
			n_name as nation,
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount
		from
			part,
			supplier,
			lineitem,
			partsupp,
			orders,
			nation
		where
			s_suppkey = l_suppkey
			and ps_suppkey = l_suppkey
			and ps_partkey = l_partkey
			and p_partkey = l_partkey
			and o_orderkey = l_orderkey
			and s_nationkey = n_nationkey
			and p_name like '%blue%'
	) as profit
group by
	nation,
	o_year
order by
	nation,
	o_year desc;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=286302.90..310265.57 rows=60150 width=168)
   Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=286302.90..308160.32 rows=120300 width=168)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=285302.88..293274.69 rows=60150 width=168)
               Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=285302.88..286186.57 rows=353478 width=159)
                     Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                     ->  Hash Join  (cost=112087.46..197147.65 rows=353478 width=159)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Hash Join  (cost=112085.90..195177.22 rows=353478 width=31)
                                 Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Parallel Seq Scan on orders  (cost=0.00..64748.00 rows=1250000 width=8)
                                 ->  Parallel Hash  (cost=105250.42..105250.42 rows=353478 width=31)
                                       ->  Nested Loop  (cost=11377.08..105250.42 rows=353478 width=31)
                                             Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                                             ->  Hash Join  (cost=11376.65..54941.10 rows=47138 width=26)
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Hash Join  (cost=10454.65..53895.34 rows=47138 width=18)
                                                         Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                                         ->  Parallel Seq Scan on partsupp  (cost=0.00..41690.67 rows=666667 width=14)
                                                         ->  Parallel Hash  (cost=10307.33..10307.33 rows=11785 width=4)
                                                               ->  Parallel Seq Scan on part  (cost=0.00..10307.33 rows=11785 width=4)
                                                                     Filter: ((p_name)::text ~~ '%blue%'::text)
                                                   ->  Hash  (cost=672.00..672.00 rows=20000 width=8)
                                                         ->  Seq Scan on supplier  (cost=0.00..672.00 rows=20000 width=8)
                                             ->  Index Scan using l_sk_pk on lineitem  (cost=0.43..1.05 rows=1 width=29)
                                                   Index Cond: ((l_suppkey = partsupp.ps_suppkey) AND (l_partkey = partsupp.ps_partkey))
                           ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=108)
 JIT:
   Functions: 51
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(33 rows)

COMMIT;
COMMIT

Query 9 execution times in seconds: 0.207,0.206,0.195,0.212,0.194,0.188,0.197,0.211,0.205,0.190
Average execution time: 0.2005 seconds

BEGIN;
BEGIN
EXPLAIN
select
	c_custkey,
	c_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	c_acctbal,
	n_name,
	c_address,
	c_phone,
	c_comment
from
	customer,
	orders,
	lineitem,
	nation
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate >= date '1994-07-01'
	and o_orderdate < cast(date '1994-07-01' + interval '3 month' as date)
	and l_returnflag = 'R'
	and c_nationkey = n_nationkey
group by
	c_custkey,
	c_name,
	c_acctbal,
	c_phone,
	n_name,
	c_address,
	c_comment
order by
	revenue desc
LIMIT 20;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=345794.37..345794.42 rows=20 width=279)
   ->  Sort  (cost=345794.37..346076.08 rows=112684 width=279)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=328318.27..342795.89 rows=112684 width=279)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=328318.27..340448.30 rows=93904 width=279)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=327318.24..328609.42 rows=46952 width=279)
                           Group Key: customer.c_custkey, nation.n_name
                           ->  Sort  (cost=327318.24..327435.62 rows=46952 width=259)
                                 Sort Key: customer.c_custkey, nation.n_name
                                 ->  Hash Join  (cost=307652.50..317896.53 rows=46952 width=259)
                                       Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                       ->  Parallel Hash Join  (cost=307650.94..317750.82 rows=46952 width=159)
                                             Hash Cond: (customer.c_custkey = orders.o_custkey)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..8498.00 rows=125000 width=147)
                                             ->  Parallel Hash  (cost=307064.04..307064.04 rows=46952 width=16)
                                                   ->  Nested Loop  (cost=0.43..307064.04 rows=46952 width=16)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..70998.00 rows=47581 width=8)
                                                               Filter: ((o_orderdate >= '1994-07-01'::date) AND (o_orderdate < '1994-10-01'::date))
                                                         ->  Index Scan using l_ok on lineitem  (cost=0.43..4.89 rows=7 width=16)
                                                               Index Cond: (l_orderkey = orders.o_orderkey)
                                                               Filter: (l_returnflag = 'R'::bpchar)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=108)
 JIT:
   Functions: 35
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(28 rows)

COMMIT;
COMMIT

Query 10 execution times in seconds: 0.200,0.198,0.188,0.187,0.201,0.195,0.194,0.194,0.199,0.195
Average execution time: 0.1951 seconds

BEGIN;
BEGIN
EXPLAIN
select
	ps_partkey,
	sum(ps_supplycost * ps_availqty) as value
from
	partsupp,
	supplier,
	nation
where
	ps_suppkey = s_suppkey
	and s_nationkey = n_nationkey
	and n_name = 'PERU'
group by
	ps_partkey having
		sum(ps_supplycost * ps_availqty) > (
			select
				sum(ps_supplycost * ps_availqty) *         inf
			from
				partsupp,
				supplier,
				nation
			where
				ps_suppkey = s_suppkey
				and s_nationkey = n_nationkey
				and n_name = 'PERU'
		)
order by
	value desc;
ERROR:  column "inf" does not exist
LINE 17:     sum(ps_supplycost * ps_availqty) *         inf
                                                        ^

Query 11 execution times in seconds: 0.140,0.138,0.138,0.138,0.132,0.139,0.136,0.140,0.142,0.140
Average execution time: 0.1383 seconds

BEGIN;
BEGIN
EXPLAIN
select
	l_shipmode,
	sum(case
		when o_orderpriority = '1-URGENT'
			or o_orderpriority = '2-HIGH'
			then 1
		else 0
	end) as high_line_count,
	sum(case
		when o_orderpriority <> '1-URGENT'
			and o_orderpriority <> '2-HIGH'
			then 1
		else 0
	end) as low_line_count
from
	orders,
	lineitem
where
	o_orderkey = l_orderkey
	and l_shipmode in ('RAIL', 'FOB')
	and l_commitdate < l_receiptdate
	and l_shipdate < l_commitdate
	and l_receiptdate >= date '1993-01-01'
	and l_receiptdate < date '1993-01-01' + interval '1 year'
group by
	l_shipmode
order by
	l_shipmode;
                                                                                                                                    QUERY PLAN                                                                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=427344.46..427835.86 rows=7 width=27)
   Group Key: lineitem.l_shipmode
   ->  Gather Merge  (cost=427344.46..427835.68 rows=14 width=27)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=426344.43..426834.04 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Sort  (cost=426344.43..426405.63 rows=24477 width=27)
                     Sort Key: lineitem.l_shipmode
                     ->  Parallel Hash Join  (cost=337835.18..424560.17 rows=24477 width=27)
                           Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Parallel Seq Scan on orders  (cost=0.00..64748.00 rows=1250000 width=20)
                           ->  Parallel Hash  (cost=337529.21..337529.21 rows=24477 width=15)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..337529.21 rows=24477 width=15)
                                       Filter: ((l_shipmode = ANY ('{RAIL,FOB}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1993-01-01'::date) AND (l_receiptdate < '1994-01-01 00:00:00'::timestamp without time zone))
 JIT:
   Functions: 21
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(17 rows)

COMMIT;
COMMIT

Query 12 execution times in seconds: 0.185,0.190,0.187,0.190,0.196,0.175,0.182,0.193,0.186,0.189
Average execution time: 0.1873 seconds

BEGIN;
BEGIN
EXPLAIN
select
	c_count,
	count(*) as custdist
from
	(
		select
			c_custkey,
			count(o_orderkey)
		from
			customer left outer join orders on
				c_custkey = o_custkey
				and o_comment not like '%pending%deposits%'
		group by
			c_custkey
	) as c_orders (c_custkey, c_count)
group by
	c_count
order by
	custdist desc,
	c_count desc;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=275000.34..275000.84 rows=200 width=16)
   Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
   ->  HashAggregate  (cost=274990.70..274992.70 rows=200 width=16)
         Group Key: count(orders.o_orderkey)
         ->  Finalize GroupAggregate  (cost=194485.81..270490.70 rows=300000 width=12)
               Group Key: customer.c_custkey
               ->  Gather Merge  (cost=194485.81..264490.70 rows=600000 width=12)
                     Workers Planned: 2
                     ->  Sort  (cost=193485.79..194235.79 rows=300000 width=12)
                           Sort Key: customer.c_custkey
                           ->  Partial HashAggregate  (cost=148399.40..161066.38 rows=300000 width=12)
                                 Group Key: customer.c_custkey
                                 Planned Partitions: 4
                                 ->  Parallel Hash Right Join  (cost=7675.96..78797.11 rows=1237374 width=8)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..67873.00 rows=1237374 width=8)
                                             Filter: ((o_comment)::text !~~ '%pending%deposits%'::text)
                                       ->  Parallel Hash  (cost=6113.46..6113.46 rows=125000 width=4)
                                             ->  Parallel Index Only Scan using c_ck on customer  (cost=0.42..6113.46 rows=125000 width=4)
 JIT:
   Functions: 18
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(22 rows)

COMMIT;
COMMIT

Query 13 execution times in seconds: 0.188,0.193,0.180,0.192,0.186,0.187,0.194,0.186,0.187,0.179
Average execution time: 0.1872 seconds

BEGIN;
BEGIN
EXPLAIN
select
	100.00 * sum(case
		when p_type like 'PROMO%'
			then l_extendedprice * (1 - l_discount)
		else 0
	end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue
from
	lineitem,
	part
where
	l_partkey = p_partkey
	and l_shipdate >= date '1993-02-01'
	and l_shipdate < cast(date '1993-02-01' + interval '1 month' as date);
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=316259.38..316259.39 rows=1 width=32)
   ->  Gather  (cost=316259.14..316259.35 rows=2 width=64)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=315259.14..315259.15 rows=1 width=64)
               ->  Parallel Hash Join  (cost=300843.27..314128.22 rows=64624 width=33)
                     Hash Cond: (part.p_partkey = lineitem.l_partkey)
                     ->  Parallel Seq Scan on part  (cost=0.00..9890.67 rows=166667 width=25)
                     ->  Parallel Hash  (cost=300035.47..300035.47 rows=64624 width=16)
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..300035.47 rows=64624 width=16)
                                 Filter: ((l_shipdate >= '1993-02-01'::date) AND (l_shipdate < '1993-03-01'::date))
 JIT:
   Functions: 17
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(13 rows)

COMMIT;
COMMIT

Query 14 execution times in seconds: 0.183,0.187,0.192,0.195,0.189,0.192,0.190,0.188,0.179,0.177
Average execution time: 0.1872 seconds

BEGIN;
BEGIN
create or replace view revenue0 (supplier_no, total_revenue) as
	select
		l_suppkey,
		sum(l_extendedprice * (1 - l_discount))
	from
		lineitem
	where
		l_shipdate >= '1997-01-01'
		and l_shipdate < date'1997-01-01' + interval '90 days'
	group by
		l_suppkey;
CREATE VIEW
EXPLAIN
select
	s_suppkey,
	s_name,
	s_address,
	s_phone,
	total_revenue
from
	supplier,
	revenue0
where
	s_suppkey = supplier_no
	and total_revenue = (
		select
			max(total_revenue)
		from
			revenue0
	)
order by
	s_suppkey;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=614431.37..620265.44 rows=99 width=103)
   InitPlan 1
     ->  Aggregate  (cost=309930.44..309930.45 rows=1 width=32)
           ->  Finalize GroupAggregate  (cost=304500.63..309682.14 rows=19864 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather Merge  (cost=304500.63..309135.88 rows=39728 width=36)
                       Workers Planned: 2
                       ->  Sort  (cost=303500.60..303550.26 rows=19864 width=36)
                             Sort Key: lineitem_1.l_suppkey
                             ->  Partial HashAggregate  (cost=301834.22..302082.52 rows=19864 width=36)
                                   Group Key: lineitem_1.l_suppkey
                                   ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..300035.47 rows=179875 width=16)
                                         Filter: ((l_shipdate >= '1997-01-01'::date) AND (l_shipdate < '1997-04-01 00:00:00'::timestamp without time zone))
   ->  Finalize GroupAggregate  (cost=304500.63..309731.80 rows=99 width=36)
         Group Key: lineitem.l_suppkey
         Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
         ->  Gather Merge  (cost=304500.63..309135.88 rows=39728 width=36)
               Workers Planned: 2
               ->  Sort  (cost=303500.60..303550.26 rows=19864 width=36)
                     Sort Key: lineitem.l_suppkey
                     ->  Partial HashAggregate  (cost=301834.22..302082.52 rows=19864 width=36)
                           Group Key: lineitem.l_suppkey
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..300035.47 rows=179875 width=16)
                                 Filter: ((l_shipdate >= '1997-01-01'::date) AND (l_shipdate < '1997-04-01 00:00:00'::timestamp without time zone))
   ->  Index Scan using s_sk on supplier  (cost=0.29..6.08 rows=1 width=71)
         Index Cond: (s_suppkey = lineitem.l_suppkey)
 JIT:
   Functions: 25
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(29 rows)

drop view revenue0;
DROP VIEW
COMMIT;
COMMIT

Query 15 execution times in seconds: 0.182,0.177,0.199,0.184,0.204,0.186,0.185,0.200,0.196,0.192
Average execution time: 0.1905 seconds

BEGIN;
BEGIN
EXPLAIN
select
	p_brand,
	p_type,
	p_size,
	count(distinct ps_suppkey) as supplier_cnt
from
	partsupp,
	part
where
	p_partkey = ps_partkey
	and p_brand <> 'Brand#55'
	and p_type not like 'MEDIUM POLISHED%'
	and p_size in (16, 18, 40, 30, 41, 4, 32, 5)
	and ps_suppkey not in (
		select
			s_suppkey
		from
			supplier
		where
			s_comment like '%Customer%Complaints%'
	)
group by
	p_brand,
	p_type,
	p_size
order by
	supplier_cnt desc,
	p_brand,
	p_type,
	p_size;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=67926.84..68006.66 rows=31928 width=44)
   Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
   ->  GroupAggregate  (cost=50255.43..65538.22 rows=31928 width=44)
         Group Key: part.p_brand, part.p_type, part.p_size
         ->  Gather Merge  (cost=50255.43..64035.74 rows=118320 width=40)
               Workers Planned: 2
               ->  Sort  (cost=49255.40..49378.65 rows=49300 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Parallel Hash Join  (cost=10626.42..45412.64 rows=49300 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Parallel Index Only Scan using ps_pk_sk on partsupp  (cost=722.43..34633.64 rows=333333 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..722.00 rows=2 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Parallel Hash  (cost=9595.86..9595.86 rows=24650 width=40)
                                 ->  Parallel Bitmap Heap Scan on part  (cost=705.75..9595.86 rows=24650 width=40)
                                       Recheck Cond: (p_size = ANY ('{16,18,40,30,41,4,32,5}'::integer[]))
                                       Filter: ((p_brand <> 'Brand#55'::bpchar) AND ((p_type)::text !~~ 'MEDIUM POLISHED%'::text))
                                       ->  Bitmap Index Scan on p_s  (cost=0.00..690.96 rows=63947 width=0)
                                             Index Cond: (p_size = ANY ('{16,18,40,30,41,4,32,5}'::integer[]))
(21 rows)

COMMIT;
COMMIT

Query 16 execution times in seconds: 0.143,0.146,0.151,0.142,0.149,0.140,0.141,0.146,0.146,0.149
Average execution time: 0.1453 seconds

BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice) / 7.0 as avg_yearly
from
	lineitem,
	part
where
	p_partkey = l_partkey
	and p_brand = 'Brand#52'
	and p_container = 'MED BAG'
	and l_quantity < (
		select
			0.2 * avg(l_quantity)
		from
			lineitem
		where
			l_partkey = p_partkey
	);
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=379387.67..379387.68 rows=1 width=32)
   ->  Hash Join  (cost=1564.48..379378.02 rows=3859 width=8)
         Hash Cond: (lineitem.l_partkey = part.p_partkey)
         Join Filter: (lineitem.l_quantity < (SubPlan 1))
         ->  Seq Scan on lineitem  (cost=0.00..345027.96 rows=11997996 width=17)
         ->  Hash  (cost=1559.66..1559.66 rows=386 width=4)
               ->  Bitmap Heap Scan on part  (cost=284.99..1559.66 rows=386 width=4)
                     Recheck Cond: ((p_container = 'MED BAG'::bpchar) AND (p_brand = 'Brand#52'::bpchar))
                     ->  BitmapAnd  (cost=284.99..284.99 rows=386 width=0)
                           ->  Bitmap Index Scan on idx_part_p_container  (cost=0.00..109.83 rows=9787 width=0)
                                 Index Cond: (p_container = 'MED BAG'::bpchar)
                           ->  Bitmap Index Scan on idx_part_p_brand  (cost=0.00..174.72 rows=15773 width=0)
                                 Index Cond: (p_brand = 'Brand#52'::bpchar)
         SubPlan 1
           ->  Aggregate  (cost=129.06..129.07 rows=1 width=32)
                 ->  Index Scan using l_pk on lineitem lineitem_1  (cost=0.43..128.98 rows=31 width=5)
                       Index Cond: (l_partkey = part.p_partkey)
 JIT:
   Functions: 24
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(20 rows)

COMMIT;
COMMIT

Query 17 execution times in seconds: 0.191,0.192,0.197,0.187,0.190,0.184,0.185,0.183,0.187,0.191
Average execution time: 0.1887 seconds

BEGIN;
BEGIN
EXPLAIN
select
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice,
	sum(l_quantity)
from
	customer,
	orders,
	lineitem
where
	o_orderkey in (
		select
			l_orderkey
		from
			lineitem
		group by
			l_orderkey having
				sum(l_quantity) > 315
	)
	and c_custkey = o_custkey
	and o_orderkey = l_orderkey
group by
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice
order by
	o_totalprice desc,
	o_orderdate
LIMIT 100;
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=831338.87..831339.12 rows=100 width=71)
   ->  Sort  (cost=831338.87..832680.01 rows=536458 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=743029.90..810835.83 rows=536458 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Gather Merge  (cost=743029.90..799659.62 rows=447048 width=71)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=742029.88..747059.17 rows=223524 width=71)
                           Group Key: customer.c_custkey, orders.o_orderkey
                           ->  Sort  (cost=742029.88..742588.69 rows=223524 width=44)
                                 Sort Key: customer.c_custkey, orders.o_orderkey
                                 ->  Nested Loop  (cost=617484.54..715292.19 rows=223524 width=44)
                                       ->  Parallel Hash Join  (cost=617484.11..626683.74 rows=55890 width=43)
                                             Hash Cond: (customer.c_custkey = orders.o_custkey)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..8498.00 rows=125000 width=23)
                                             ->  Parallel Hash  (cost=616785.48..616785.48 rows=55890 width=24)
                                                   ->  Hash Join  (cost=548756.23..616785.48 rows=55890 width=24)
                                                         Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..64748.00 rows=1250000 width=20)
                                                         ->  Hash  (cost=547079.52..547079.52 rows=134137 width=4)
                                                               ->  GroupAggregate  (cost=0.43..547079.52 rows=134137 width=4)
                                                                     Group Key: lineitem_1.l_orderkey
                                                                     Filter: (sum(lineitem_1.l_quantity) > '315'::numeric)
                                                                     ->  Index Scan using l_ok on lineitem lineitem_1  (cost=0.43..481053.38 rows=11997996 width=9)
                                       ->  Index Scan using l_ok on lineitem  (cost=0.43..1.29 rows=30 width=9)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 37
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(29 rows)

COMMIT;
COMMIT

Query 18 execution times in seconds: 0.196,0.188,0.192,0.202,0.200,0.202,0.193,0.196,0.186,0.183
Average execution time: 0.1938 seconds

BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice* (1 - l_discount)) as revenue
from
	lineitem,
	part
where
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#45'
		and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')
		and l_quantity >= 8 and l_quantity <= 8+10
		and p_size between 1 and 5
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#51'
		and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')
		and l_quantity >= 13 and l_quantity <= 13+10
		and p_size between 1 and 10
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#24'
		and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')
		and l_quantity >= 20 and l_quantity <= 20+10
		and p_size between 1 and 15
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	);


 Finalize Aggregate  (cost=66029.54..66029.55 rows=1 width=32)
   ->  Gather  (cost=66029.32..66029.53 rows=2 width=32)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=65029.32..65029.33 rows=1 width=32)
               ->  Nested Loop  (cost=0.43..65028.60 rows=96 width=12)
                     ->  Parallel Seq Scan on part  (cost=0.00..15307.33 rows=404 width=30)
                           Filter: ((p_size >= 1) AND (((p_brand = 'Brand#45'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#51'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                     ->  Index Scan using l_pk on lineitem  (cost=0.43..123.06 rows=1 width=21)
                           Index Cond: (l_partkey = part.p_partkey)
                           Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '8'::numeric) AND (l_quantity <= '18'::numeric)) OR ((l_quantity >= '13'::numeric) AND (l_quantity <= '23'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#45'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '8'::numeric) AND (l_quantity <= '18'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#51'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '13'::numeric) AND (l_quantity <= '23'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(10 rows)

COMMIT;
COMMIT

Query 19 execution times in seconds: 0.142,0.146,0.156,0.155,0.154,0.150,0.148,0.148,0.151,0.151
Average execution time: 0.1501 seconds

BEGIN;
BEGIN
EXPLAIN
select
	s_name,
	s_address
from
	supplier,
	nation
where
	s_suppkey in (
		select
			ps_suppkey
		from
			partsupp
		where
			ps_partkey in (
				select
					p_partkey
				from
					part
				where
					p_name like 'peach%'
			)
			and ps_availqty > (
				select
					0.5 * sum(l_quantity)
				from
					lineitem
				where
					l_partkey = ps_partkey
					and l_suppkey = ps_suppkey
					and l_shipdate >= '1994-01-01'
					and l_shipdate < cast(date '1994-01-01' + interval '1 year' as date)
			)
	)
	and s_nationkey = n_nationkey
	and n_name = 'FRANCE'
order by
	s_name;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=177018.59..177019.12 rows=215 width=51)
   Sort Key: supplier.s_name
   ->  Hash Semi Join  (cost=176497.87..177010.26 rows=215 width=51)
         Hash Cond: (supplier.s_suppkey = partsupp.ps_suppkey)
         ->  Nested Loop  (cost=10.49..517.31 rows=800 width=55)
               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                     Filter: (n_name = 'FRANCE'::bpchar)
               ->  Bitmap Heap Scan on supplier  (cost=10.49..508.00 rows=800 width=59)
                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                     ->  Bitmap Index Scan on s_nk  (cost=0.00..10.29 rows=800 width=0)
                           Index Cond: (s_nationkey = nation.n_nationkey)
         ->  Hash  (cost=176420.04..176420.04 rows=5387 width=4)
               ->  Nested Loop  (cost=0.43..176420.04 rows=5387 width=4)
                     ->  Seq Scan on part  (cost=0.00..13224.00 rows=4040 width=4)
                           Filter: ((p_name)::text ~~ 'peach%'::text)
                     ->  Index Scan using ps_pk on partsupp  (cost=0.43..40.39 rows=1 width=8)
                           Index Cond: (ps_partkey = part.p_partkey)
                           Filter: ((ps_availqty)::numeric > (SubPlan 1))
                           SubPlan 1
                             ->  Aggregate  (cost=8.46..8.48 rows=1 width=32)
                                   ->  Index Scan using l_sk_pk on lineitem  (cost=0.43..8.46 rows=1 width=5)
                                         Index Cond: ((l_suppkey = partsupp.ps_suppkey) AND (l_partkey = partsupp.ps_partkey))
                                         Filter: ((l_shipdate >= '1994-01-01'::date) AND (l_shipdate < '1995-01-01'::date))
 JIT:
   Functions: 30
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(26 rows)

COMMIT;
COMMIT

Query 20 execution times in seconds: 0.200,0.198,0.196,0.172,0.200,0.183,0.172,0.200,0.196,0.197
Average execution time: 0.1914 seconds

BEGIN;
BEGIN
EXPLAIN
select
	s_name,
	count(*) as numwait
from
	supplier,
	lineitem l1,
	orders,
	nation
where
	s_suppkey = l1.l_suppkey
	and o_orderkey = l1.l_orderkey
	and o_orderstatus = 'F'
	and l1.l_receiptdate > l1.l_commitdate
	and exists (
		select
			*
		from
			lineitem l2
		where
			l2.l_orderkey = l1.l_orderkey
			and l2.l_suppkey <> l1.l_suppkey
	)
	and not exists (
		select
			*
		from
			lineitem l3
		where
			l3.l_orderkey = l1.l_orderkey
			and l3.l_suppkey <> l1.l_suppkey
			and l3.l_receiptdate > l3.l_commitdate
	)
	and s_nationkey = n_nationkey
	and n_name = 'MOZAMBIQUE'
group by
	s_name
order by
	numwait desc,
	s_name
LIMIT 100;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=364615.30..364615.30 rows=1 width=34)
   ->  Sort  (cost=364615.30..364615.30 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=364615.27..364615.29 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=364615.27..364615.27 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop  (cost=1528.61..364615.26 rows=1 width=26)
                           ->  Nested Loop Semi Join  (cost=1528.18..364612.48 rows=1 width=34)
                                 ->  Gather  (cost=1527.75..364608.95 rows=1 width=34)
                                       Workers Planned: 2
                                       ->  Nested Loop Anti Join  (cost=527.75..363608.85 rows=1 width=34)
                                             ->  Hash Join  (cost=527.31..294980.39 rows=66655 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..287537.56 rows=1666388 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=517.31..517.31 rows=800 width=30)
                                                         ->  Nested Loop  (cost=10.49..517.31 rows=800 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'MOZAMBIQUE'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=10.49..508.00 rows=800 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on s_nk  (cost=0.00..10.29 rows=800 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Index Scan using l_ok on lineitem l3  (cost=0.43..3.59 rows=10 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using l_ok on lineitem l2  (cost=0.43..3.51 rows=30 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: (l_suppkey <> l1.l_suppkey)
                           ->  Index Scan using o_ok on orders  (cost=0.43..2.78 rows=1 width=4)
                                 Index Cond: (o_orderkey = l1.l_orderkey)
                                 Filter: (o_orderstatus = 'F'::bpchar)
 JIT:
   Functions: 38
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(36 rows)

COMMIT;
COMMIT

Query 21 execution times in seconds: 0.197,0.197,0.202,0.199,0.202,0.202,0.196,0.191,0.205,0.199
Average execution time: 0.1990 seconds

BEGIN;
BEGIN
EXPLAIN
select
	cntrycode,
	count(*) as numcust,
	sum(c_acctbal) as totacctbal
from
	(
		select
			substring(c_phone from 1 for 2) as cntrycode,
			c_acctbal
		from
			customer
		where
			substring(c_phone from 1 for 2) in
				('25', '33', '28', '32', '13', '15', '10')
			and c_acctbal > (
				select
					avg(c_acctbal)
				from
					customer
				where
					c_acctbal > 0.00
					and substring(c_phone from 1 for 2) in
						('25', '33', '28', '32', '13', '15', '10')
			)
			and not exists (
				select
					*
				from
					orders
				where
					o_custkey = c_custkey
			)
	) as vip
group by
	cntrycode
order by
	cntrycode;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=23767.74..23969.55 rows=1511 width=72)
   Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
   InitPlan 1
     ->  Finalize Aggregate  (cost=11539.36..11539.37 rows=1 width=32)
           ->  Gather  (cost=11539.14..11539.35 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=10539.14..10539.15 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..10529.25 rows=3954 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{25,33,28,32,13,15,10}'::text[])))
   ->  Gather Merge  (cost=12228.37..12391.13 rows=1260 width=72)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=11228.35..11245.67 rows=630 width=72)
               Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Sort  (cost=11228.35..11229.92 rows=630 width=38)
                     Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                     ->  Nested Loop Anti Join  (cost=1855.73..11199.06 rows=630 width=38)
                           ->  Parallel Bitmap Heap Scan on customer  (cost=1855.30..10197.05 rows=1458 width=26)
                                 Recheck Cond: (c_acctbal > (InitPlan 1).col1)
                                 Filter: (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{25,33,28,32,13,15,10}'::text[]))
                                 ->  Bitmap Index Scan on c_acb  (cost=0.00..1854.42 rows=100000 width=0)
                                       Index Cond: (c_acctbal > (InitPlan 1).col1)
                           ->  Index Only Scan using o_ck on orders  (cost=0.43..3.30 rows=18 width=4)
                                 Index Cond: (o_custkey = customer.c_custkey)
(23 rows)

COMMIT;
COMMIT

Query 22 execution times in seconds: 0.147,0.139,0.144,0.138,0.150,0.142,0.145,0.136,0.152,0.142
Average execution time: 0.1435 seconds


