=== Experiment: text ===
INDEX_ALL=0
INDEX_NUMBERS=0
INDEX_DATES=0
INDEX_TEXT=1

[Info] Running drop_indexes.sh
[Info] Dropping date indexes
[Info] Dropping numbers indexes
[Info] Keeping text indexes
[Info] Running create_indexes.sh
[Info] Creating indexes for text

[Info] Running queries(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22) for text
BEGIN;
BEGIN
EXPLAIN
select
	l_returnflag,
	l_linestatus,
	sum(l_quantity) as sum_qty,
	sum(l_extendedprice) as sum_base_price,
	sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
	avg(l_quantity) as avg_qty,
	avg(l_extendedprice) as avg_price,
	avg(l_discount) as avg_disc,
	count(*) as count_order
from
	lineitem
where
	l_shipdate <= date '1998-12-01' - interval '80 days'
group by
	l_returnflag,
	l_linestatus
order by
	l_returnflag,
	l_linestatus;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=616624.45..629658.44 rows=40000 width=248)
   Group Key: l_returnflag, l_linestatus
   ->  Gather Merge  (cost=616624.45..625958.44 rows=80000 width=248)
         Workers Planned: 2
         ->  Sort  (cost=615624.43..615724.43 rows=40000 width=248)
               Sort Key: l_returnflag, l_linestatus
               ->  Partial HashAggregate  (cost=561450.09..607915.39 rows=40000 width=248)
                     Group Key: l_returnflag, l_linestatus
                     Planned Partitions: 8
                     ->  Parallel Seq Scan on lineitem  (cost=0.00..287537.56 rows=1666388 width=88)
                           Filter: (l_shipdate <= '1998-09-12 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 9
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(14 rows)

COMMIT;
COMMIT

Query 1 executed in 0.193 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	s_acctbal,
	s_name,
	n_name,
	p_partkey,
	p_mfgr,
	s_address,
	s_phone,
	s_comment
from
	part,
	supplier,
	partsupp,
	nation,
	region
where
	p_partkey = ps_partkey
	and s_suppkey = ps_suppkey
	and p_size = 42
	and p_type like '%TIN'
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'EUROPE'
	and ps_supplycost = (
		select
			min(ps_supplycost)
		from
			partsupp,
			supplier,
			nation,
			region
		where
			p_partkey = ps_partkey
			and s_suppkey = ps_suppkey
			and s_nationkey = n_nationkey
			and n_regionkey = r_regionkey
			and r_name = 'EUROPE'
	)
order by
	s_acctbal desc,
	n_name,
	s_name,
	p_partkey
LIMIT 100;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=146527.87..146527.87 rows=1 width=270)
   ->  Sort  (cost=146527.87..146527.87 rows=1 width=270)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Hash Join  (cost=77801.46..146527.86 rows=1 width=270)
               Hash Cond: ((part.p_partkey = partsupp.ps_partkey) AND ((SubPlan 1) = partsupp.ps_supplycost))
               ->  Gather  (cost=1000.00..11883.00 rows=1590 width=30)
                     Workers Planned: 2
                     ->  Parallel Seq Scan on part  (cost=0.00..10724.00 rows=662 width=30)
                           Filter: (((p_type)::text ~~ '%TIN'::text) AND (p_size = 42))
               ->  Hash  (cost=61063.46..61063.46 rows=320000 width=250)
                     ->  Hash Join  (cost=839.46..61063.46 rows=320000 width=250)
                           Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on partsupp  (cost=0.00..51024.00 rows=1600000 width=14)
                           ->  Hash  (cost=789.46..789.46 rows=4000 width=244)
                                 ->  Hash Join  (cost=2.46..789.46 rows=4000 width=244)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..672.00 rows=20000 width=144)
                                       ->  Hash  (cost=2.40..2.40 rows=5 width=108)
                                             ->  Hash Join  (cost=1.07..2.40 rows=5 width=108)
                                                   Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=112)
                                                   ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                         ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                               Filter: (r_name = 'EUROPE'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=58.95..58.96 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..58.95 rows=1 width=6)
                             Join Filter: (region_1.r_regionkey = nation_1.n_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'EUROPE'::bpchar)
                             ->  Nested Loop  (cost=0.85..57.82 rows=5 width=10)
                                   ->  Nested Loop  (cost=0.71..57.04 rows=5 width=10)
                                         ->  Index Scan using partsupp_pkey on partsupp partsupp_1  (cost=0.43..15.52 rows=5 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..8.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
 JIT:
   Functions: 63
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(41 rows)

COMMIT;
COMMIT

Query 2 executed in 0.203 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	l_orderkey,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	o_orderdate,
	o_shippriority
from
	customer,
	orders,
	lineitem
where
	c_mktsegment = 'BUILDING'
	and c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate < date '1995-03-10'
	and l_shipdate > date '1995-03-10'
group by
	l_orderkey,
	o_orderdate,
	o_shippriority
order by
	revenue desc,
	o_orderdate
LIMIT 10;
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=453855.03..453855.05 rows=10 width=44)
   ->  Sort  (cost=453855.03..454830.40 rows=390150 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=394078.87..445424.03 rows=390150 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=394078.87..436483.10 rows=325124 width=44)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=393078.84..397955.70 rows=162562 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=393078.84..393485.25 rows=162562 width=48)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Parallel Hash Join  (cost=79543.23..374007.09 rows=162562 width=48)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..287537.56 rows=1666388 width=40)
                                             Filter: (l_shipdate > '1995-03-10'::date)
                                       ->  Parallel Hash  (cost=78018.96..78018.96 rows=121942 width=12)
                                             ->  Parallel Hash Join  (cost=8574.77..78018.96 rows=121942 width=12)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..67873.00 rows=598537 width=16)
                                                         Filter: (o_orderdate < '1995-03-10'::date)
                                                   ->  Parallel Hash  (cost=8256.44..8256.44 rows=25467 width=4)
                                                         ->  Parallel Bitmap Heap Scan on customer  (cost=690.10..8256.44 rows=25467 width=4)
                                                               Recheck Cond: (c_mktsegment = 'BUILDING'::bpchar)
                                                               ->  Bitmap Index Scan on idx_customer_c_mktsegment  (cost=0.00..674.82 rows=61120 width=0)
                                                                     Index Cond: (c_mktsegment = 'BUILDING'::bpchar)
 JIT:
   Functions: 34
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(28 rows)

COMMIT;
COMMIT

Query 3 executed in 0.198 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	o_orderpriority,
	count(*) as order_count
from
	orders
where
	o_orderdate >= date '1994-06-01'
	and o_orderdate < cast(date '1994-06-01' + interval '3 month' as date)
	and exists (
		select
			*
		from
			lineitem
		where
			l_orderkey = o_orderkey
			and l_commitdate < l_receiptdate
	)
group by
	o_orderpriority
order by
	o_orderpriority;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Sort  (cost=386998.63..386998.64 rows=5 width=24)
   Sort Key: orders.o_orderpriority
   ->  HashAggregate  (cost=386998.52..386998.57 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop  (cost=385021.71..386706.78 rows=58348 width=16)
               ->  HashAggregate  (cost=385021.28..385023.28 rows=200 width=4)
                     Group Key: lineitem.l_orderkey
                     ->  Seq Scan on lineitem  (cost=0.00..375022.95 rows=3999332 width=4)
                           Filter: (l_commitdate < l_receiptdate)
               ->  Index Scan using orders_pkey on orders  (cost=0.43..8.41 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
                     Filter: ((o_orderdate >= '1994-06-01'::date) AND (o_orderdate < '1994-09-01'::date))
 JIT:
   Functions: 13
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(15 rows)

COMMIT;
COMMIT

Query 4 executed in 0.190 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	n_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue
from
	customer,
	orders,
	lineitem,
	supplier,
	nation,
	region
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and l_suppkey = s_suppkey
	and c_nationkey = s_nationkey
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'EUROPE'
	and o_orderdate >= date '1994-01-01'
	and o_orderdate < date '1994-01-01' + interval '1 year'
group by
	n_name
order by
	revenue desc;
                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=377747.82..377747.88 rows=25 width=136)
   Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
   ->  Finalize GroupAggregate  (cost=377664.87..377747.24 rows=25 width=136)
         Group Key: nation.n_name
         ->  Gather Merge  (cost=377664.87..377746.55 rows=50 width=136)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=376664.84..376740.75 rows=25 width=136)
                     Group Key: nation.n_name
                     ->  Sort  (cost=376664.84..376679.96 rows=6048 width=140)
                           Sort Key: nation.n_name
                           ->  Hash Join  (cost=83864.28..376284.96 rows=6048 width=140)
                                 Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                 ->  Parallel Hash Join  (cost=82892.28..374519.27 rows=151179 width=152)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Hash Join  (cost=73360.56..361523.04 rows=755894 width=44)
                                             Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                             ->  Parallel Seq Scan on lineitem  (cost=0.00..275039.65 rows=4999165 width=44)
                                             ->  Parallel Hash  (cost=70998.00..70998.00 rows=189005 width=8)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..70998.00 rows=189005 width=8)
                                                         Filter: ((o_orderdate >= '1994-01-01'::date) AND (o_orderdate < '1995-01-01 00:00:00'::timestamp without time zone))
                                       ->  Parallel Hash  (cost=9219.21..9219.21 rows=25000 width=116)
                                             ->  Hash Join  (cost=2.46..9219.21 rows=25000 width=116)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..8498.00 rows=125000 width=8)
                                                   ->  Hash  (cost=2.40..2.40 rows=5 width=108)
                                                         ->  Hash Join  (cost=1.07..2.40 rows=5 width=108)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=112)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'EUROPE'::bpchar)
                                 ->  Hash  (cost=672.00..672.00 rows=20000 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..672.00 rows=20000 width=8)
 JIT:
   Functions: 57
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(36 rows)

COMMIT;
COMMIT

Query 5 executed in 0.198 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice * l_discount) as revenue
from
	lineitem
where
	l_shipdate >= date '1994-01-01'
	and l_shipdate < cast(date '1994-01-01' + interval '1 year' as date)
	and l_discount between 0.03 - 0.01 and 0.03 + 0.01
	and l_quantity < 24;
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=338529.65..338529.66 rows=1 width=32)
   ->  Gather  (cost=338529.43..338529.64 rows=2 width=32)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=337529.43..337529.44 rows=1 width=32)
               ->  Parallel Seq Scan on lineitem  (cost=0.00..337529.21 rows=42 width=36)
                     Filter: ((l_shipdate >= '1994-01-01'::date) AND (l_shipdate < '1995-01-01'::date) AND (l_discount >= 0.02) AND (l_discount <= 0.04) AND (l_quantity < '24'::numeric))
 JIT:
   Functions: 7
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(9 rows)

COMMIT;
COMMIT

Query 6 executed in 0.186 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	supp_nation,
	cust_nation,
	l_year,
	sum(volume) as revenue
from
	(
		select
			n1.n_name as supp_nation,
			n2.n_name as cust_nation,
			extract(year from l_shipdate) as l_year,
			l_extendedprice * (1 - l_discount) as volume
		from
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2
		where
			s_suppkey = l_suppkey
			and o_orderkey = l_orderkey
			and c_custkey = o_custkey
			and s_nationkey = n1.n_nationkey
			and c_nationkey = n2.n_nationkey
			and (
				(n1.n_name = 'ETHIOPIA' and n2.n_name = 'EGYPT')
				or (n1.n_name = 'EGYPT' and n2.n_name = 'ETHIOPIA')
			)
			and l_shipdate between date '1995-01-01' and date '1996-12-31'
	) as shipping
group by
	supp_nation,
	cust_nation,
	l_year
order by
	supp_nation,
	cust_nation,
	l_year;
                                                                                      QUERY PLAN                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=309889.63..309916.56 rows=200 width=272)
   Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
   ->  Gather Merge  (cost=309889.63..309911.49 rows=166 width=272)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=308889.60..308892.30 rows=83 width=272)
               Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Sort  (cost=308889.60..308889.81 rows=83 width=276)
                     Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                     ->  Hash Join  (cost=757.05..308886.96 rows=83 width=276)
                           Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                           Join Filter: (((n1.n_name = 'ETHIOPIA'::bpchar) AND (n2.n_name = 'EGYPT'::bpchar)) OR ((n1.n_name = 'EGYPT'::bpchar) AND (n2.n_name = 'ETHIOPIA'::bpchar)))
                           ->  Nested Loop  (cost=755.65..308880.10 rows=2000 width=148)
                                 ->  Nested Loop  (cost=755.23..307978.57 rows=2000 width=148)
                                       ->  Hash Join  (cost=754.80..300904.01 rows=2000 width=148)
                                             Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                             ->  Parallel Seq Scan on lineitem  (cost=0.00..300035.47 rows=24996 width=48)
                                                   Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                             ->  Hash  (cost=734.80..734.80 rows=1600 width=108)
                                                   ->  Hash Join  (cost=1.40..734.80 rows=1600 width=108)
                                                         Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                         ->  Seq Scan on supplier  (cost=0.00..672.00 rows=20000 width=8)
                                                         ->  Hash  (cost=1.38..1.38 rows=2 width=108)
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=108)
                                                                     Filter: ((n_name = 'ETHIOPIA'::bpchar) OR (n_name = 'EGYPT'::bpchar))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..3.54 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.42..0.45 rows=1 width=8)
                                       Index Cond: (c_custkey = orders.o_custkey)
                           ->  Hash  (cost=1.38..1.38 rows=2 width=108)
                                 ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=108)
                                       Filter: ((n_name = 'EGYPT'::bpchar) OR (n_name = 'ETHIOPIA'::bpchar))
 JIT:
   Functions: 52
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(34 rows)

COMMIT;
COMMIT

Query 7 executed in 0.189 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	o_year,
	sum(case
		when nation = 'VIETNAM' then volume
		else 0
	end) / sum(volume) as mkt_share
from
	(
		select
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) as volume,
			n2.n_name as nation
		from
			part,
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2,
			region
		where
			p_partkey = l_partkey
			and s_suppkey = l_suppkey
			and l_orderkey = o_orderkey
			and o_custkey = c_custkey
			and c_nationkey = n1.n_nationkey
			and n1.n_regionkey = r_regionkey
			and r_name = 'ASIA'
			and s_nationkey = n2.n_nationkey
			and o_orderdate between date '1995-01-01' and date '1996-12-31'
			and p_type = 'STANDARD BURNISHED COPPER'
	) as all_nations
group by
	o_year
order by
	o_year;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=316173.99..316828.01 rows=2406 width=64)
   Group Key: (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=316173.99..316728.69 rows=4096 width=96)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=315173.97..315255.89 rows=2048 width=96)
               Group Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=315173.97..315179.09 rows=2048 width=172)
                     Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                     ->  Hash Join  (cost=5615.41..315061.33 rows=2048 width=172)
                           Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                           ->  Nested Loop  (cost=5613.85..315048.36 rows=2048 width=44)
                                 ->  Hash Join  (cost=5613.56..314423.36 rows=2048 width=44)
                                       Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                       ->  Nested Loop  (cost=5611.10..314362.01 rows=10240 width=48)
                                             ->  Nested Loop  (cost=5610.67..309498.30 rows=10240 width=48)
                                                   ->  Parallel Hash Join  (cost=5610.24..293772.83 rows=33270 width=44)
                                                         Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                                         ->  Parallel Seq Scan on lineitem  (cost=0.00..275039.65 rows=4999165 width=48)
                                                         ->  Parallel Hash  (cost=5590.67..5590.67 rows=1566 width=4)
                                                               ->  Parallel Bitmap Heap Scan on part  (cost=33.05..5590.67 rows=1566 width=4)
                                                                     Recheck Cond: ((p_type)::text = 'STANDARD BURNISHED COPPER'::text)
                                                                     ->  Bitmap Index Scan on idx_part_p_type  (cost=0.00..32.39 rows=2662 width=0)
                                                                           Index Cond: ((p_type)::text = 'STANDARD BURNISHED COPPER'::text)
                                                   ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=12)
                                                         Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Index Scan using customer_pkey on customer  (cost=0.42..0.47 rows=1 width=8)
                                                   Index Cond: (c_custkey = orders.o_custkey)
                                       ->  Hash  (cost=2.40..2.40 rows=5 width=4)
                                             ->  Hash Join  (cost=1.07..2.40 rows=5 width=4)
                                                   Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                   ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                         ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                               Filter: (r_name = 'ASIA'::bpchar)
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.31 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                 ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=108)
 JIT:
   Functions: 59
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(42 rows)

COMMIT;
COMMIT

Query 8 executed in 0.194 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	nation,
	o_year,
	sum(amount) as sum_profit
from
	(
		select
			n_name as nation,
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount
		from
			part,
			supplier,
			lineitem,
			partsupp,
			orders,
			nation
		where
			s_suppkey = l_suppkey
			and ps_suppkey = l_suppkey
			and ps_partkey = l_partkey
			and p_partkey = l_partkey
			and o_orderkey = l_orderkey
			and s_nationkey = n_nationkey
			and p_name like '%bisque%'
	) as profit
group by
	nation,
	o_year
order by
	nation,
	o_year desc;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=511553.03..533495.80 rows=60150 width=168)
   Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=511553.03..531390.55 rows=120300 width=168)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=510553.01..516504.92 rows=60150 width=168)
               Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=510553.01..511184.22 rows=252483 width=196)
                     Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                     ->  Hash Join  (cost=151538.79..463733.93 rows=252483 width=196)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Hash Join  (cost=151537.23..462326.04 rows=252483 width=68)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Hash Join  (cost=66281.23..365606.27 rows=252483 width=68)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Hash Join  (cost=65359.23..364021.36 rows=252483 width=72)
                                             Hash Cond: ((lineitem.l_suppkey = partsupp.ps_suppkey) AND (lineitem.l_partkey = partsupp.ps_partkey))
                                             ->  Parallel Hash Join  (cost=10412.56..298575.15 rows=252483 width=70)
                                                   Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                                   ->  Parallel Seq Scan on lineitem  (cost=0.00..275039.65 rows=4999165 width=66)
                                                   ->  Parallel Hash  (cost=10307.33..10307.33 rows=8418 width=4)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..10307.33 rows=8418 width=4)
                                                               Filter: ((p_name)::text ~~ '%bisque%'::text)
                                             ->  Parallel Hash  (cost=41690.67..41690.67 rows=666667 width=14)
                                                   ->  Parallel Seq Scan on partsupp  (cost=0.00..41690.67 rows=666667 width=14)
                                       ->  Hash  (cost=672.00..672.00 rows=20000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..672.00 rows=20000 width=8)
                                 ->  Parallel Hash  (cost=64748.00..64748.00 rows=1250000 width=8)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..64748.00 rows=1250000 width=8)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=108)
 JIT:
   Functions: 55
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

COMMIT;
COMMIT

Query 9 executed in 0.192 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	c_custkey,
	c_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	c_acctbal,
	n_name,
	c_address,
	c_phone,
	c_comment
from
	customer,
	orders,
	lineitem,
	nation
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate >= date '1994-01-01'
	and o_orderdate < cast(date '1994-01-01' + interval '3 month' as date)
	and l_returnflag = 'R'
	and c_nationkey = n_nationkey
group by
	c_custkey,
	c_name,
	c_acctbal,
	c_phone,
	n_name,
	c_address,
	c_comment
order by
	revenue desc
LIMIT 20;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=209378.92..209378.97 rows=20 width=280)
   ->  Sort  (cost=209378.92..209384.33 rows=2162 width=280)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=209043.58..209321.39 rows=2162 width=280)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=209043.58..209276.35 rows=1802 width=280)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=208043.55..208068.33 rows=901 width=280)
                           Group Key: customer.c_custkey, nation.n_name
                           ->  Sort  (cost=208043.55..208045.80 rows=901 width=284)
                                 Sort Key: customer.c_custkey, nation.n_name
                                 ->  Hash Join  (cost=72232.38..207999.33 rows=901 width=284)
                                       Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                       ->  Nested Loop  (cost=72230.82..207995.01 rows=901 width=184)
                                             ->  Parallel Hash Join  (cost=72230.40..207329.43 rows=901 width=40)
                                                   Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                                   ->  Parallel Bitmap Heap Scan on lineitem  (cost=669.36..135702.77 rows=24996 width=40)
                                                         Recheck Cond: (l_returnflag = 'R'::bpchar)
                                                         ->  Bitmap Index Scan on idx_lineitem_l_returnflag  (cost=0.00..654.36 rows=59990 width=0)
                                                               Index Cond: (l_returnflag = 'R'::bpchar)
                                                   ->  Parallel Hash  (cost=70998.00..70998.00 rows=45043 width=8)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..70998.00 rows=45043 width=8)
                                                               Filter: ((o_orderdate >= '1994-01-01'::date) AND (o_orderdate < '1994-04-01'::date))
                                             ->  Index Scan using customer_pkey on customer  (cost=0.42..0.74 rows=1 width=148)
                                                   Index Cond: (c_custkey = orders.o_custkey)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=108)
 JIT:
   Functions: 36
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(30 rows)

COMMIT;
COMMIT

Query 10 executed in 0.194 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	ps_partkey,
	sum(ps_supplycost * ps_availqty) as value
from
	partsupp,
	supplier,
	nation
where
	ps_suppkey = s_suppkey
	and s_nationkey = n_nationkey
	and n_name = 'MOROCCO'
group by
	ps_partkey having
		sum(ps_supplycost * ps_availqty) > (
			select
				sum(ps_supplycost * ps_availqty) *         inf
			from
				partsupp,
				supplier,
				nation
			where
				ps_suppkey = s_suppkey
				and s_nationkey = n_nationkey
				and n_name = 'MOROCCO'
		)
order by
	value desc;
ERROR:  column "inf" does not exist
LINE 17:     sum(ps_supplycost * ps_availqty) *         inf
                                                        ^

Query 11 executed in 0.136 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	l_shipmode,
	sum(case
		when o_orderpriority = '1-URGENT'
			or o_orderpriority = '2-HIGH'
			then 1
		else 0
	end) as high_line_count,
	sum(case
		when o_orderpriority <> '1-URGENT'
			and o_orderpriority <> '2-HIGH'
			then 1
		else 0
	end) as low_line_count
from
	orders,
	lineitem
where
	o_orderkey = l_orderkey
	and l_shipmode in ('FOB', 'RAIL')
	and l_commitdate < l_receiptdate
	and l_shipdate < l_commitdate
	and l_receiptdate >= date '1994-01-01'
	and l_receiptdate < date '1994-01-01' + interval '1 year'
group by
	l_shipmode
order by
	l_shipmode;
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=271053.81..271062.11 rows=57 width=60)
   Group Key: lineitem.l_shipmode
   ->  Gather Merge  (cost=271053.81..271061.12 rows=56 width=60)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=270053.79..270054.63 rows=28 width=60)
               Group Key: lineitem.l_shipmode
               ->  Sort  (cost=270053.79..270053.86 rows=28 width=60)
                     Sort Key: lineitem.l_shipmode
                     ->  Nested Loop  (cost=1317.17..270053.12 rows=28 width=60)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=1316.74..269816.59 rows=28 width=48)
                                 Recheck Cond: (l_shipmode = ANY ('{FOB,RAIL}'::bpchar[]))
                                 Filter: ((l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01 00:00:00'::timestamp without time zone))
                                 ->  Bitmap Index Scan on idx_lineitem_l_shipmode  (cost=0.00..1316.72 rows=119980 width=0)
                                       Index Cond: (l_shipmode = ANY ('{FOB,RAIL}'::bpchar[]))
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..8.45 rows=1 width=20)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
 JIT:
   Functions: 17
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(19 rows)

COMMIT;
COMMIT

Query 12 executed in 0.191 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	c_count,
	count(*) as custdist
from
	(
		select
			c_custkey,
			count(o_orderkey)
		from
			customer left outer join orders on
				c_custkey = o_custkey
				and o_comment not like '%pending%requests%'
		group by
			c_custkey
	) as c_orders (c_custkey, c_count)
group by
	c_count
order by
	custdist desc,
	c_count desc;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=274159.35..274159.85 rows=200 width=16)
   Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
   ->  HashAggregate  (cost=274149.70..274151.70 rows=200 width=16)
         Group Key: count(orders.o_orderkey)
         ->  Finalize GroupAggregate  (cost=193644.82..269649.70 rows=300000 width=12)
               Group Key: customer.c_custkey
               ->  Gather Merge  (cost=193644.82..263649.70 rows=600000 width=12)
                     Workers Planned: 2
                     ->  Sort  (cost=192644.79..193394.79 rows=300000 width=12)
                           Sort Key: customer.c_custkey
                           ->  Partial HashAggregate  (cost=147657.05..160225.39 rows=300000 width=12)
                                 Group Key: customer.c_custkey
                                 Planned Partitions: 4
                                 ->  Parallel Hash Right Join  (cost=7676.96..78764.97 rows=1224748 width=8)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..67873.00 rows=1224748 width=8)
                                             Filter: ((o_comment)::text !~~ '%pending%requests%'::text)
                                       ->  Parallel Hash  (cost=6114.46..6114.46 rows=125000 width=4)
                                             ->  Parallel Index Only Scan using customer_pkey on customer  (cost=0.42..6114.46 rows=125000 width=4)
 JIT:
   Functions: 18
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(22 rows)

COMMIT;
COMMIT

Query 13 executed in 0.188 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	100.00 * sum(case
		when p_type like 'PROMO%'
			then l_extendedprice * (1 - l_discount)
		else 0
	end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue
from
	lineitem,
	part
where
	l_partkey = p_partkey
	and l_shipdate >= date '1995-02-01'
	and l_shipdate < cast(date '1995-02-01' + interval '1 month' as date);
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=316184.76..316184.78 rows=1 width=32)
   ->  Gather  (cost=316184.53..316184.74 rows=2 width=64)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=315184.53..315184.54 rows=1 width=64)
               ->  Parallel Hash Join  (cost=13114.00..314747.09 rows=24996 width=57)
                     Hash Cond: (lineitem.l_partkey = part.p_partkey)
                     ->  Parallel Seq Scan on lineitem  (cost=0.00..300035.47 rows=24996 width=40)
                           Filter: ((l_shipdate >= '1995-02-01'::date) AND (l_shipdate < '1995-03-01'::date))
                     ->  Parallel Hash  (cost=9890.67..9890.67 rows=166667 width=25)
                           ->  Parallel Seq Scan on part  (cost=0.00..9890.67 rows=166667 width=25)
 JIT:
   Functions: 16
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(13 rows)

COMMIT;
COMMIT

Query 14 executed in 0.192 second(s).
BEGIN;
BEGIN
create or replace view revenue0 (supplier_no, total_revenue) as
	select
		l_suppkey,
		sum(l_extendedprice * (1 - l_discount))
	from
		lineitem
	where
		l_shipdate >= '1994-05-01'
		and l_shipdate < date'1994-05-01' + interval '90 days'
	group by
		l_suppkey;
CREATE VIEW
EXPLAIN
select
	s_suppkey,
	s_name,
	s_address,
	s_phone,
	total_revenue
from
	supplier,
	revenue0
where
	s_suppkey = supplier_no
	and total_revenue = (
		select
			max(total_revenue)
		from
			revenue0
	)
order by
	s_suppkey;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=606092.18..606467.33 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=303230.50..303230.51 rows=1 width=32)
           ->  Finalize GroupAggregate  (cost=302861.38..303228.00 rows=200 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather Merge  (cost=302861.38..303222.50 rows=400 width=36)
                       Workers Planned: 2
                       ->  Partial GroupAggregate  (cost=301861.36..302176.31 rows=200 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Sort  (cost=301861.36..301923.85 rows=24996 width=40)
                                   Sort Key: lineitem_1.l_suppkey
                                   ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..300035.47 rows=24996 width=40)
                                         Filter: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-07-30 00:00:00'::timestamp without time zone))
   ->  Finalize GroupAggregate  (cost=302861.38..303228.50 rows=1 width=36)
         Group Key: lineitem.l_suppkey
         Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
         ->  Gather Merge  (cost=302861.38..303222.50 rows=400 width=36)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=301861.36..302176.31 rows=200 width=36)
                     Group Key: lineitem.l_suppkey
                     ->  Sort  (cost=301861.36..301923.85 rows=24996 width=40)
                           Sort Key: lineitem.l_suppkey
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..300035.47 rows=24996 width=40)
                                 Filter: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-07-30 00:00:00'::timestamp without time zone))
   ->  Index Scan using supplier_pkey on supplier  (cost=0.29..8.30 rows=1 width=71)
         Index Cond: (s_suppkey = lineitem.l_suppkey)
 JIT:
   Functions: 31
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(29 rows)

drop view revenue0;
DROP VIEW
COMMIT;
COMMIT

Query 15 executed in 0.195 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	p_brand,
	p_type,
	p_size,
	count(distinct ps_suppkey) as supplier_cnt
from
	partsupp,
	part
where
	p_partkey = ps_partkey
	and p_brand <> 'Brand#22'
	and p_type not like 'MEDIUM PLATED%'
	and p_size in (25, 6, 23, 21, 27, 46, 13, 40)
	and ps_suppkey not in (
		select
			s_suppkey
		from
			supplier
		where
			s_comment like '%Customer%Complaints%'
	)
group by
	p_brand,
	p_type,
	p_size
order by
	supplier_cnt desc,
	p_brand,
	p_type,
	p_size;
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=70893.65..70973.61 rows=31982 width=44)
   Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
   ->  GroupAggregate  (cost=53159.60..68500.60 rows=31982 width=44)
         Group Key: part.p_brand, part.p_type, part.p_size
         ->  Gather Merge  (cost=53159.60..66993.02 rows=118776 width=40)
               Workers Planned: 2
               ->  Sort  (cost=52159.58..52283.30 rows=49490 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Parallel Hash Join  (cost=13422.41..48300.63 rows=49490 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=722.43..34725.64 rows=333333 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..722.00 rows=2 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Parallel Hash  (cost=12390.67..12390.67 rows=24745 width=40)
                                 ->  Parallel Seq Scan on part  (cost=0.00..12390.67 rows=24745 width=40)
                                       Filter: ((p_brand <> 'Brand#22'::bpchar) AND ((p_type)::text !~~ 'MEDIUM PLATED%'::text) AND (p_size = ANY ('{25,6,23,21,27,46,13,40}'::integer[])))
(18 rows)

COMMIT;
COMMIT

Query 16 executed in 0.145 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice) / 7.0 as avg_yearly
from
	lineitem,
	part
where
	p_partkey = l_partkey
	and p_brand = 'Brand#23'
	and p_container = 'MED JAR'
	and l_quantity < (
		select
			0.2 * avg(l_quantity)
		from
			lineitem
		where
			l_partkey = p_partkey
	);
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=4129832.24..4129832.26 rows=1 width=32)
   ->  Hash Join  (cost=1570.31..4129822.54 rows=3879 width=18)
         Hash Cond: (lineitem.l_partkey = part.p_partkey)
         Join Filter: (lineitem.l_quantity < (SubPlan 1))
         ->  Seq Scan on lineitem  (cost=0.00..345027.96 rows=11997996 width=40)
         ->  Hash  (cost=1565.46..1565.46 rows=388 width=4)
               ->  Bitmap Heap Scan on part  (cost=284.69..1565.46 rows=388 width=4)
                     Recheck Cond: ((p_container = 'MED JAR'::bpchar) AND (p_brand = 'Brand#23'::bpchar))
                     ->  BitmapAnd  (cost=284.69..284.69 rows=388 width=0)
                           ->  Bitmap Index Scan on idx_part_p_container  (cost=0.00..111.62 rows=10027 width=0)
                                 Index Cond: (p_container = 'MED JAR'::bpchar)
                           ->  Bitmap Index Scan on idx_part_p_brand  (cost=0.00..172.62 rows=15493 width=0)
                                 Index Cond: (p_brand = 'Brand#23'::bpchar)
         SubPlan 1
           ->  Aggregate  (cost=375172.93..375172.94 rows=1 width=32)
                 ->  Seq Scan on lineitem lineitem_1  (cost=0.00..375022.95 rows=59990 width=18)
                       Filter: (l_partkey = part.p_partkey)
 JIT:
   Functions: 24
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(20 rows)

COMMIT;
COMMIT

Query 17 executed in 0.189 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice,
	sum(l_quantity)
from
	customer,
	orders,
	lineitem
where
	o_orderkey in (
		select
			l_orderkey
		from
			lineitem
		group by
			l_orderkey having
				sum(l_quantity) > 315
	)
	and c_custkey = o_custkey
	and o_orderkey = l_orderkey
group by
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice
order by
	o_totalprice desc,
	o_orderdate
LIMIT 100;
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=412305.34..412305.59 rows=100 width=71)
   ->  Sort  (cost=412305.34..412306.01 rows=268 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=412289.07..412295.10 rows=268 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Sort  (cost=412289.07..412289.74 rows=268 width=57)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     ->  Nested Loop  (cost=301046.93..412278.26 rows=268 width=57)
                           ->  Nested Loop  (cost=301046.50..301694.50 rows=67 width=43)
                                 ->  Nested Loop  (cost=301046.07..301664.30 rows=67 width=24)
                                       ->  Finalize GroupAggregate  (cost=301045.64..301098.31 rows=67 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '315'::numeric)
                                             ->  Gather Merge  (cost=301045.64..301092.31 rows=400 width=36)
                                                   Workers Planned: 2
                                                   ->  Sort  (cost=300045.62..300046.12 rows=200 width=36)
                                                         Sort Key: lineitem_1.l_orderkey
                                                         ->  Partial HashAggregate  (cost=300035.47..300037.97 rows=200 width=36)
                                                               Group Key: lineitem_1.l_orderkey
                                                               ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..275039.65 rows=4999165 width=22)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..8.45 rows=1 width=20)
                                             Index Cond: (o_orderkey = lineitem_1.l_orderkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.42..0.45 rows=1 width=23)
                                       Index Cond: (c_custkey = orders.o_custkey)
                           ->  Index Scan using lineitem_pkey on lineitem  (cost=0.43..1050.60 rows=59990 width=22)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 26
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(29 rows)

COMMIT;
COMMIT

Query 18 executed in 0.193 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice* (1 - l_discount)) as revenue
from
	lineitem,
	part
where
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#33'
		and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')
		and l_quantity >= 7 and l_quantity <= 7+10
		and p_size between 1 and 5
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#15'
		and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')
		and l_quantity >= 19 and l_quantity <= 19+10
		and p_size between 1 and 10
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#34'
		and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')
		and l_quantity >= 21 and l_quantity <= 21+10
		and p_size between 1 and 15
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	);


 Aggregate  (cost=4381.15..4381.16 rows=1 width=32)
   ->  Nested Loop  (cost=1979.76..4381.14 rows=1 width=36)
         ->  Bitmap Heap Scan on lineitem  (cost=1979.33..4304.39 rows=9 width=58)
               Recheck Cond: ((l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])))
               Filter: (((l_quantity >= '7'::numeric) AND (l_quantity <= '17'::numeric)) OR ((l_quantity >= '19'::numeric) AND (l_quantity <= '29'::numeric)) OR ((l_quantity >= '21'::numeric) AND (l_quantity <= '31'::numeric)))
               ->  BitmapAnd  (cost=1979.33..1979.33 rows=600 width=0)
                     ->  Bitmap Index Scan on idx_lineitem_l_shipinstruct  (cost=0.00..662.36 rows=59990 width=0)
                           Index Cond: (l_shipinstruct = 'DELIVER IN PERSON'::bpchar)
                     ->  Bitmap Index Scan on idx_lineitem_l_shipmode  (cost=0.00..1316.72 rows=119980 width=0)
                           Index Cond: (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[]))
         ->  Index Scan using part_pkey on part  (cost=0.42..8.52 rows=1 width=30)
               Index Cond: (p_partkey = lineitem.l_partkey)
               Filter: ((p_size >= 1) AND (((p_brand = 'Brand#33'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#15'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#34'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))) AND (((p_brand = 'Brand#33'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (lineitem.l_quantity >= '7'::numeric) AND (lineitem.l_quantity <= '17'::numeric) AND (p_size <= 5)) OR ((p_brand = 'Brand#15'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (lineitem.l_quantity >= '19'::numeric) AND (lineitem.l_quantity <= '29'::numeric) AND (p_size <= 10)) OR ((p_brand = 'Brand#34'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (lineitem.l_quantity >= '21'::numeric) AND (lineitem.l_quantity <= '31'::numeric) AND (p_size <= 15))))
(13 rows)

COMMIT;
COMMIT

Query 19 executed in 0.143 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	s_name,
	s_address
from
	supplier,
	nation
where
	s_suppkey in (
		select
			ps_suppkey
		from
			partsupp
		where
			ps_partkey in (
				select
					p_partkey
				from
					part
				where
					p_name like 'linen%'
			)
			and ps_availqty > (
				select
					0.5 * sum(l_quantity)
				from
					lineitem
				where
					l_partkey = ps_partkey
					and l_suppkey = ps_suppkey
					and l_shipdate >= '1993-01-01'
					and l_shipdate < cast(date '1993-01-01' + interval '1 year' as date)
			)
	)
	and s_nationkey = n_nationkey
	and n_name = 'UNITED STATES'
order by
	s_name;
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Semi Join  (cost=0.71..9393289172.55 rows=215 width=51)
   Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
   ->  Nested Loop  (cost=0.29..1569.59 rows=800 width=55)
         Join Filter: (nation.n_nationkey = supplier.s_nationkey)
         ->  Index Scan using idx_supplier_s_name on supplier  (cost=0.29..1268.27 rows=20000 width=59)
         ->  Materialize  (cost=0.00..1.32 rows=1 width=4)
               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                     Filter: (n_name = 'UNITED STATES'::bpchar)
   ->  Materialize  (cost=0.43..9393222972.43 rows=5387 width=4)
         ->  Nested Loop  (cost=0.43..9393222945.50 rows=5387 width=4)
               ->  Seq Scan on part  (cost=0.00..13224.00 rows=4040 width=4)
                     Filter: ((p_name)::text ~~ 'linen%'::text)
               ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..2325051.89 rows=2 width=8)
                     Index Cond: (ps_partkey = part.p_partkey)
                     Filter: ((ps_availqty)::numeric > (SubPlan 1))
                     SubPlan 1
                       ->  Aggregate  (cost=465007.93..465007.94 rows=1 width=32)
                             ->  Seq Scan on lineitem  (cost=0.00..465007.92 rows=1 width=18)
                                   Filter: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01'::date) AND (l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(22 rows)

COMMIT;
COMMIT

Query 20 executed in 0.189 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	s_name,
	count(*) as numwait
from
	supplier,
	lineitem l1,
	orders,
	nation
where
	s_suppkey = l1.l_suppkey
	and o_orderkey = l1.l_orderkey
	and o_orderstatus = 'F'
	and l1.l_receiptdate > l1.l_commitdate
	and exists (
		select
			*
		from
			lineitem l2
		where
			l2.l_orderkey = l1.l_orderkey
			and l2.l_suppkey <> l1.l_suppkey
	)
	and not exists (
		select
			*
		from
			lineitem l3
		where
			l3.l_orderkey = l1.l_orderkey
			and l3.l_suppkey <> l1.l_suppkey
			and l3.l_receiptdate > l3.l_commitdate
	)
	and s_nationkey = n_nationkey
	and n_name = 'BRAZIL'
group by
	s_name
order by
	numwait desc,
	s_name
LIMIT 100;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1046893.50..1046893.75 rows=100 width=34)
   ->  Sort  (cost=1046893.50..1046941.73 rows=19292 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  Finalize GroupAggregate  (cost=1043886.64..1046156.17 rows=19292 width=34)
               Group Key: supplier.s_name
               ->  Gather Merge  (cost=1043886.64..1045882.87 rows=16076 width=34)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=1042886.62..1043027.28 rows=8038 width=34)
                           Group Key: supplier.s_name
                           ->  Sort  (cost=1042886.62..1042906.71 rows=8038 width=26)
                                 Sort Key: supplier.s_name
                                 ->  Nested Loop  (cost=672679.78..1042365.25 rows=8038 width=26)
                                       ->  Parallel Hash Semi Join  (cost=672679.35..996115.44 rows=16664 width=34)
                                             Hash Cond: (l1.l_orderkey = l2.l_orderkey)
                                             Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Hash Anti Join  (cost=315622.14..618547.89 rows=33328 width=34)
                                                   Hash Cond: (l1.l_orderkey = l3.l_orderkey)
                                                   Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                                   ->  Hash Join  (cost=744.73..295197.80 rows=66655 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Seq Scan on lineitem l1  (cost=0.00..287537.56 rows=1666388 width=8)
                                                               Filter: (l_receiptdate > l_commitdate)
                                                         ->  Hash  (cost=734.73..734.73 rows=800 width=30)
                                                               ->  Hash Join  (cost=1.32..734.73 rows=800 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Seq Scan on supplier  (cost=0.00..672.00 rows=20000 width=34)
                                                                     ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                                 Filter: (n_name = 'BRAZIL'::bpchar)
                                                   ->  Parallel Hash  (cost=287537.56..287537.56 rows=1666388 width=8)
                                                         ->  Parallel Seq Scan on lineitem l3  (cost=0.00..287537.56 rows=1666388 width=8)
                                                               Filter: (l_receiptdate > l_commitdate)
                                             ->  Parallel Hash  (cost=275039.65..275039.65 rows=4999165 width=8)
                                                   ->  Parallel Seq Scan on lineitem l2  (cost=0.00..275039.65 rows=4999165 width=8)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..2.78 rows=1 width=4)
                                             Index Cond: (o_orderkey = l1.l_orderkey)
                                             Filter: (o_orderstatus = 'F'::bpchar)
 JIT:
   Functions: 57
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(40 rows)

COMMIT;
COMMIT

Query 21 executed in 0.197 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	cntrycode,
	count(*) as numcust,
	sum(c_acctbal) as totacctbal
from
	(
		select
			substring(c_phone from 1 for 2) as cntrycode,
			c_acctbal
		from
			customer
		where
			substring(c_phone from 1 for 2) in
				('34', '21', '28', '27', '31', '16', '24')
			and c_acctbal > (
				select
					avg(c_acctbal)
				from
					customer
				where
					c_acctbal > 0.00
					and substring(c_phone from 1 for 2) in
						('34', '21', '28', '27', '31', '16', '24')
			)
			and not exists (
				select
					*
				from
					orders
				where
					o_custkey = c_custkey
			)
	) as vip
group by
	cntrycode
order by
	cntrycode;
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=99178.32..99375.66 rows=1479 width=72)
   Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
   InitPlan 1
     ->  Finalize Aggregate  (cost=11539.40..11539.41 rows=1 width=32)
           ->  Gather  (cost=11539.18..11539.39 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=10539.18..10539.19 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..10529.25 rows=3970 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{34,21,28,27,31,16,24}'::text[])))
   ->  Gather Merge  (cost=87638.91..87798.05 rows=1232 width=72)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=86638.88..86655.82 rows=616 width=72)
               Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Sort  (cost=86638.88..86640.42 rows=616 width=38)
                     Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                     ->  Parallel Hash Right Anti Join  (cost=10547.48..86610.34 rows=616 width=38)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Parallel Seq Scan on orders  (cost=0.00..64748.00 rows=1250000 width=4)
                           ->  Parallel Hash  (cost=10529.25..10529.25 rows=1458 width=26)
                                 ->  Parallel Seq Scan on customer  (cost=0.00..10529.25 rows=1458 width=26)
                                       Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{34,21,28,27,31,16,24}'::text[])))
(21 rows)

COMMIT;
COMMIT

Query 22 executed in 0.144 second(s).

