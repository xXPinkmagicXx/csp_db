=== Experiment: numbers ===
INDEX_ALL=0
INDEX_NUMBERS=1
INDEX_DATES=0
INDEX_TEXT=0

[Info] Running drop_indexes.sh
[Info] Dropping date indexes
[Info] Keeping numbers indexes
[Info] Dropping text indexes
[Info] Running create_indexes.sh
[Info] Creating indexes for numbers

[Info] Running queries(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22) for numbers
BEGIN;
BEGIN
EXPLAIN
select
	l_returnflag,
	l_linestatus,
	sum(l_quantity) as sum_qty,
	sum(l_extendedprice) as sum_base_price,
	sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
	avg(l_quantity) as avg_qty,
	avg(l_extendedprice) as avg_price,
	avg(l_discount) as avg_disc,
	count(*) as count_order
from
	lineitem
where
	l_shipdate <= date '1998-12-01' - interval '118 days'
group by
	l_returnflag,
	l_linestatus
order by
	l_returnflag,
	l_linestatus;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=616624.45..629658.44 rows=40000 width=248)
   Group Key: l_returnflag, l_linestatus
   ->  Gather Merge  (cost=616624.45..625958.44 rows=80000 width=248)
         Workers Planned: 2
         ->  Sort  (cost=615624.43..615724.43 rows=40000 width=248)
               Sort Key: l_returnflag, l_linestatus
               ->  Partial HashAggregate  (cost=561450.09..607915.39 rows=40000 width=248)
                     Group Key: l_returnflag, l_linestatus
                     Planned Partitions: 8
                     ->  Parallel Seq Scan on lineitem  (cost=0.00..287537.56 rows=1666388 width=88)
                           Filter: (l_shipdate <= '1998-08-05 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 9
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(14 rows)

COMMIT;
COMMIT

Query 1 executed in 0.193 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	s_acctbal,
	s_name,
	n_name,
	p_partkey,
	p_mfgr,
	s_address,
	s_phone,
	s_comment
from
	part,
	supplier,
	partsupp,
	nation,
	region
where
	p_partkey = ps_partkey
	and s_suppkey = ps_suppkey
	and p_size = 46
	and p_type like '%COPPER'
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'ASIA'
	and ps_supplycost = (
		select
			min(ps_supplycost)
		from
			partsupp,
			supplier,
			nation,
			region
		where
			p_partkey = ps_partkey
			and s_suppkey = ps_suppkey
			and s_nationkey = n_nationkey
			and n_regionkey = r_regionkey
			and r_name = 'ASIA'
	)
order by
	s_acctbal desc,
	n_name,
	s_name,
	p_partkey
LIMIT 100;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=68019.99..68020.00 rows=1 width=270)
   ->  Sort  (cost=68019.99..68020.00 rows=1 width=270)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=48566.81..68019.98 rows=1 width=270)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Gather Merge  (cost=1000.45..18294.22 rows=1472 width=30)
                     Workers Planned: 2
                     ->  Parallel Index Scan using part_pkey on part  (cost=0.42..17124.29 rows=613 width=30)
                           Filter: (((p_type)::text ~~ '%COPPER'::text) AND (p_size = 46))
               ->  Sort  (cost=47566.37..47589.90 rows=9412 width=250)
                     Sort Key: partsupp.ps_partkey
                     ->  Gather  (cost=1773.96..46945.16 rows=9412 width=250)
                           Workers Planned: 2
                           ->  Hash Join  (cost=773.96..45003.96 rows=3922 width=250)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Parallel Seq Scan on partsupp  (cost=0.00..41690.67 rows=666667 width=14)
                                 ->  Hash  (cost=772.49..772.49 rows=118 width=244)
                                       ->  Hash Join  (cost=24.31..772.49 rows=118 width=244)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..672.00 rows=20000 width=144)
                                             ->  Hash  (cost=24.29..24.29 rows=1 width=108)
                                                   ->  Hash Join  (cost=12.14..24.29 rows=1 width=108)
                                                         Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..11.70 rows=170 width=112)
                                                         ->  Hash  (cost=12.12..12.12 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..12.12 rows=1 width=4)
                                                                     Filter: (r_name = 'ASIA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=60.22..60.23 rows=1 width=32)
                       ->  Nested Loop  (cost=1.01..60.22 rows=1 width=6)
                             ->  Nested Loop  (cost=0.86..57.87 rows=5 width=10)
                                   ->  Nested Loop  (cost=0.71..57.04 rows=5 width=10)
                                         ->  Index Scan using partsupp_pkey on partsupp partsupp_1  (cost=0.43..15.52 rows=5 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..8.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
                             ->  Memoize  (cost=0.15..0.46 rows=1 width=4)
                                   Cache Key: nation_1.n_regionkey
                                   Cache Mode: logical
                                   ->  Index Scan using region_pkey on region region_1  (cost=0.14..0.45 rows=1 width=4)
                                         Index Cond: (r_regionkey = nation_1.n_regionkey)
                                         Filter: (r_name = 'ASIA'::bpchar)
(45 rows)

COMMIT;
COMMIT

Query 2 executed in 0.155 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	l_orderkey,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	o_orderdate,
	o_shippriority
from
	customer,
	orders,
	lineitem
where
	c_mktsegment = 'AUTOMOBILE'
	and c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate < date '1995-03-16'
	and l_shipdate > date '1995-03-16'
group by
	l_orderkey,
	o_orderdate,
	o_shippriority
order by
	revenue desc,
	o_orderdate
LIMIT 10;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=453152.10..453152.13 rows=10 width=44)
   ->  Sort  (cost=453152.10..454112.55 rows=384178 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=394290.84..444850.15 rows=384178 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=394290.84..436046.08 rows=320148 width=44)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=393290.81..398093.03 rows=160074 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=393290.81..393691.00 rows=160074 width=48)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Parallel Hash Join  (cost=80075.72..374529.21 rows=160074 width=48)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..287537.56 rows=1666388 width=40)
                                             Filter: (l_shipdate > '1995-03-16'::date)
                                       ->  Parallel Hash  (cost=78574.77..78574.77 rows=120076 width=12)
                                             ->  Parallel Hash Join  (cost=9122.33..78574.77 rows=120076 width=12)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..67873.00 rows=601683 width=16)
                                                         Filter: (o_orderdate < '1995-03-16'::date)
                                                   ->  Parallel Hash  (cost=8810.50..8810.50 rows=24946 width=4)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..8810.50 rows=24946 width=4)
                                                               Filter: (c_mktsegment = 'AUTOMOBILE'::bpchar)
 JIT:
   Functions: 34
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(26 rows)

COMMIT;
COMMIT

Query 3 executed in 0.192 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	o_orderpriority,
	count(*) as order_count
from
	orders
where
	o_orderdate >= date '1995-05-01'
	and o_orderdate < cast(date '1995-05-01' + interval '3 month' as date)
	and exists (
		select
			*
		from
			lineitem
		where
			l_orderkey = o_orderkey
			and l_commitdate < l_receiptdate
	)
group by
	o_orderpriority
order by
	o_orderpriority;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Sort  (cost=386998.59..386998.60 rows=5 width=24)
   Sort Key: orders.o_orderpriority
   ->  HashAggregate  (cost=386998.48..386998.53 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop  (cost=385021.71..386706.78 rows=58340 width=16)
               ->  HashAggregate  (cost=385021.28..385023.28 rows=200 width=4)
                     Group Key: lineitem.l_orderkey
                     ->  Seq Scan on lineitem  (cost=0.00..375022.95 rows=3999332 width=4)
                           Filter: (l_commitdate < l_receiptdate)
               ->  Index Scan using orders_pkey on orders  (cost=0.43..8.41 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
                     Filter: ((o_orderdate >= '1995-05-01'::date) AND (o_orderdate < '1995-08-01'::date))
 JIT:
   Functions: 13
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(15 rows)

COMMIT;
COMMIT

Query 4 executed in 0.168 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	n_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue
from
	customer,
	orders,
	lineitem,
	supplier,
	nation,
	region
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and l_suppkey = s_suppkey
	and c_nationkey = s_nationkey
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'AFRICA'
	and o_orderdate >= date '1993-01-01'
	and o_orderdate < date '1993-01-01' + interval '1 year'
group by
	n_name
order by
	revenue desc;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=312153.67..312154.10 rows=170 width=136)
   Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
   ->  Finalize GroupAggregate  (cost=312099.09..312147.38 rows=170 width=136)
         Group Key: nation.n_name
         ->  Gather Merge  (cost=312099.09..312142.70 rows=340 width=136)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=311099.07..311103.43 rows=170 width=136)
                     Group Key: nation.n_name
                     ->  Sort  (cost=311099.07..311099.52 rows=179 width=140)
                           Sort Key: nation.n_name
                           ->  Nested Loop  (cost=774.81..311092.37 rows=179 width=140)
                                 Join Filter: (customer.c_nationkey = supplier.s_nationkey)
                                 ->  Nested Loop  (cost=774.39..308755.00 rows=4466 width=152)
                                       ->  Hash Join  (cost=773.96..294855.43 rows=29407 width=152)
                                             Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                             ->  Parallel Seq Scan on lineitem  (cost=0.00..275039.65 rows=4999165 width=44)
                                             ->  Hash  (cost=772.49..772.49 rows=118 width=116)
                                                   ->  Hash Join  (cost=24.31..772.49 rows=118 width=116)
                                                         Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                         ->  Seq Scan on supplier  (cost=0.00..672.00 rows=20000 width=8)
                                                         ->  Hash  (cost=24.29..24.29 rows=1 width=108)
                                                               ->  Hash Join  (cost=12.14..24.29 rows=1 width=108)
                                                                     Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation  (cost=0.00..11.70 rows=170 width=112)
                                                                     ->  Hash  (cost=12.12..12.12 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..12.12 rows=1 width=4)
                                                                                 Filter: (r_name = 'AFRICA'::bpchar)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
                                             Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01 00:00:00'::timestamp without time zone))
                                 ->  Index Scan using customer_pkey on customer  (cost=0.42..0.51 rows=1 width=8)
                                       Index Cond: (c_custkey = orders.o_custkey)
 JIT:
   Functions: 49
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(35 rows)

COMMIT;
COMMIT

Query 5 executed in 0.198 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice * l_discount) as revenue
from
	lineitem
where
	l_shipdate >= date '1993-01-01'
	and l_shipdate < cast(date '1993-01-01' + interval '1 year' as date)
	and l_discount between 0.02 - 0.01 and 0.02 + 0.01
	and l_quantity < 25;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Aggregate  (cost=135467.87..135467.88 rows=1 width=32)
   ->  Bitmap Heap Scan on lineitem  (cost=75184.06..135467.36 rows=100 width=36)
         Recheck Cond: ((l_discount >= 0.01) AND (l_discount <= 0.03) AND (l_quantity < '25'::numeric))
         Filter: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01'::date))
         ->  BitmapAnd  (cost=75184.06..75184.06 rows=19997 width=0)
               ->  Bitmap Index Scan on l_disc  (cost=0.00..1260.34 rows=59990 width=0)
                     Index Cond: ((l_discount >= 0.01) AND (l_discount <= 0.03))
               ->  Bitmap Index Scan on l_q  (cost=0.00..73923.42 rows=3999332 width=0)
                     Index Cond: (l_quantity < '25'::numeric)
 JIT:
   Functions: 7
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(12 rows)

COMMIT;
COMMIT

Query 6 executed in 0.189 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	supp_nation,
	cust_nation,
	l_year,
	sum(volume) as revenue
from
	(
		select
			n1.n_name as supp_nation,
			n2.n_name as cust_nation,
			extract(year from l_shipdate) as l_year,
			l_extendedprice * (1 - l_discount) as volume
		from
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2
		where
			s_suppkey = l_suppkey
			and o_orderkey = l_orderkey
			and c_custkey = o_custkey
			and s_nationkey = n1.n_nationkey
			and c_nationkey = n2.n_nationkey
			and (
				(n1.n_name = 'PERU' and n2.n_name = 'JORDAN')
				or (n1.n_name = 'JORDAN' and n2.n_name = 'PERU')
			)
			and l_shipdate between date '1995-01-01' and date '1996-12-31'
	) as shipping
group by
	supp_nation,
	cust_nation,
	l_year
order by
	supp_nation,
	cust_nation,
	l_year;
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=303059.75..303059.88 rows=4 width=272)
   Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
   ->  Sort  (cost=303059.75..303059.76 rows=4 width=276)
         Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Gather  (cost=1754.75..303059.71 rows=4 width=276)
               Workers Planned: 2
               ->  Hash Join  (cost=754.75..302059.31 rows=2 width=276)
                     Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'JORDAN'::bpchar)) OR ((n1.n_name = 'JORDAN'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Nested Loop  (cost=742.18..302045.96 rows=294 width=148)
                           ->  Nested Loop  (cost=741.76..301913.44 rows=294 width=148)
                                 ->  Hash Join  (cost=741.33..300873.48 rows=294 width=148)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..300035.47 rows=24996 width=48)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=738.39..738.39 rows=235 width=108)
                                             ->  Hash Join  (cost=12.58..738.39 rows=235 width=108)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Seq Scan on supplier  (cost=0.00..672.00 rows=20000 width=8)
                                                   ->  Hash  (cost=12.55..12.55 rows=2 width=108)
                                                         ->  Seq Scan on nation n1  (cost=0.00..12.55 rows=2 width=108)
                                                               Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'JORDAN'::bpchar))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..3.54 rows=1 width=8)
                                       Index Cond: (o_orderkey = lineitem.l_orderkey)
                           ->  Index Scan using customer_pkey on customer  (cost=0.42..0.45 rows=1 width=8)
                                 Index Cond: (c_custkey = orders.o_custkey)
                     ->  Hash  (cost=12.55..12.55 rows=2 width=108)
                           ->  Seq Scan on nation n2  (cost=0.00..12.55 rows=2 width=108)
                                 Filter: ((n_name = 'JORDAN'::bpchar) OR (n_name = 'PERU'::bpchar))
 JIT:
   Functions: 49
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(32 rows)

COMMIT;
COMMIT

Query 7 executed in 0.208 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	o_year,
	sum(case
		when nation = 'JORDAN' then volume
		else 0
	end) / sum(volume) as mkt_share
from
	(
		select
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) as volume,
			n2.n_name as nation
		from
			part,
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2,
			region
		where
			p_partkey = l_partkey
			and s_suppkey = l_suppkey
			and l_orderkey = o_orderkey
			and o_custkey = c_custkey
			and c_nationkey = n1.n_nationkey
			and n1.n_regionkey = r_regionkey
			and r_name = 'MIDDLE EAST'
			and s_nationkey = n2.n_nationkey
			and o_orderdate between date '1995-01-01' and date '1996-12-31'
			and p_type = 'LARGE PLATED COPPER'
	) as all_nations
group by
	o_year
order by
	o_year;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=320162.24..320182.89 rows=145 width=64)
   Group Key: (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=320162.24..320178.49 rows=120 width=96)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=319162.22..319164.62 rows=60 width=96)
               Group Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=319162.22..319162.37 rows=60 width=172)
                     Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                     ->  Nested Loop  (cost=10346.80..319160.45 rows=60 width=172)
                           ->  Nested Loop  (cost=10346.64..319154.58 rows=60 width=44)
                                 ->  Hash Join  (cost=10346.36..319136.27 rows=60 width=44)
                                       Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                       ->  Nested Loop  (cost=10322.05..319072.97 rows=10240 width=48)
                                             ->  Nested Loop  (cost=10321.63..314209.25 rows=10240 width=48)
                                                   ->  Parallel Hash Join  (cost=10321.20..298483.79 rows=33270 width=44)
                                                         Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                                         ->  Parallel Seq Scan on lineitem  (cost=0.00..275039.65 rows=4999165 width=48)
                                                         ->  Parallel Hash  (cost=10307.33..10307.33 rows=1109 width=4)
                                                               ->  Parallel Seq Scan on part  (cost=0.00..10307.33 rows=1109 width=4)
                                                                     Filter: ((p_type)::text = 'LARGE PLATED COPPER'::text)
                                                   ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=12)
                                                         Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Index Scan using customer_pkey on customer  (cost=0.42..0.47 rows=1 width=8)
                                                   Index Cond: (c_custkey = orders.o_custkey)
                                       ->  Hash  (cost=24.29..24.29 rows=1 width=4)
                                             ->  Hash Join  (cost=12.14..24.29 rows=1 width=4)
                                                   Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on nation n1  (cost=0.00..11.70 rows=170 width=8)
                                                   ->  Hash  (cost=12.12..12.12 rows=1 width=4)
                                                         ->  Seq Scan on region  (cost=0.00..12.12 rows=1 width=4)
                                                               Filter: (r_name = 'MIDDLE EAST'::bpchar)
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.31 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Memoize  (cost=0.15..0.17 rows=1 width=108)
                                 Cache Key: supplier.s_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using nation_pkey on nation n2  (cost=0.14..0.16 rows=1 width=108)
                                       Index Cond: (n_nationkey = supplier.s_nationkey)
 JIT:
   Functions: 60
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(42 rows)

COMMIT;
COMMIT

Query 8 executed in 0.198 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	nation,
	o_year,
	sum(amount) as sum_profit
from
	(
		select
			n_name as nation,
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount
		from
			part,
			supplier,
			lineitem,
			partsupp,
			orders,
			nation
		where
			s_suppkey = l_suppkey
			and ps_suppkey = l_suppkey
			and ps_partkey = l_partkey
			and p_partkey = l_partkey
			and o_orderkey = l_orderkey
			and s_nationkey = n_nationkey
			and p_name like '%moccasin%'
	) as profit
group by
	nation,
	o_year
order by
	nation,
	o_year desc;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=497664.73..561539.08 rows=409020 width=168)
   Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=497664.73..551363.96 rows=403982 width=168)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=496664.71..503734.39 rows=201991 width=168)
               Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=496664.71..497169.68 rows=201991 width=196)
                     Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                     ->  Hash Join  (cost=66274.43..459531.33 rows=201991 width=196)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Nested Loop  (cost=66260.61..458469.08 rows=201991 width=68)
                                 ->  Hash Join  (cost=66260.18..364005.56 rows=201991 width=68)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Hash Join  (cost=65338.18..362553.22 rows=201991 width=72)
                                             Hash Cond: ((lineitem.l_suppkey = partsupp.ps_suppkey) AND (lineitem.l_partkey = partsupp.ps_partkey))
                                             ->  Parallel Hash Join  (cost=10391.51..298554.10 rows=201991 width=70)
                                                   Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                                   ->  Parallel Seq Scan on lineitem  (cost=0.00..275039.65 rows=4999165 width=66)
                                                   ->  Parallel Hash  (cost=10307.33..10307.33 rows=6734 width=4)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..10307.33 rows=6734 width=4)
                                                               Filter: ((p_name)::text ~~ '%moccasin%'::text)
                                             ->  Parallel Hash  (cost=41690.67..41690.67 rows=666667 width=14)
                                                   ->  Parallel Seq Scan on partsupp  (cost=0.00..41690.67 rows=666667 width=14)
                                       ->  Hash  (cost=672.00..672.00 rows=20000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..672.00 rows=20000 width=8)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=8)
                                       Index Cond: (o_orderkey = lineitem.l_orderkey)
                           ->  Hash  (cost=11.70..11.70 rows=170 width=108)
                                 ->  Seq Scan on nation  (cost=0.00..11.70 rows=170 width=108)
 JIT:
   Functions: 51
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(32 rows)

COMMIT;
COMMIT

Query 9 executed in 0.203 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	c_custkey,
	c_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	c_acctbal,
	n_name,
	c_address,
	c_phone,
	c_comment
from
	customer,
	orders,
	lineitem,
	nation
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate >= date '1993-06-01'
	and o_orderdate < cast(date '1993-06-01' + interval '3 month' as date)
	and l_returnflag = 'R'
	and c_nationkey = n_nationkey
group by
	c_custkey,
	c_name,
	c_acctbal,
	c_phone,
	n_name,
	c_address,
	c_comment
order by
	revenue desc
LIMIT 20;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=361348.67..361348.72 rows=20 width=280)
   ->  Sort  (cost=361348.67..361354.57 rows=2360 width=280)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=360982.75..361285.87 rows=2360 width=280)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=360982.75..361236.71 rows=1966 width=280)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=359982.73..360009.76 rows=983 width=280)
                           Group Key: customer.c_custkey, nation.n_name
                           ->  Sort  (cost=359982.73..359985.19 rows=983 width=284)
                                 Sort Key: customer.c_custkey, nation.n_name
                                 ->  Hash Join  (cost=71627.02..359933.87 rows=983 width=284)
                                       Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                       ->  Nested Loop  (cost=71613.20..359917.40 rows=983 width=184)
                                             ->  Parallel Hash Join  (cost=71612.77..359215.95 rows=983 width=40)
                                                   Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                                   ->  Parallel Seq Scan on lineitem  (cost=0.00..287537.56 rows=24996 width=40)
                                                         Filter: (l_returnflag = 'R'::bpchar)
                                                   ->  Parallel Hash  (cost=70998.00..70998.00 rows=49182 width=8)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..70998.00 rows=49182 width=8)
                                                               Filter: ((o_orderdate >= '1993-06-01'::date) AND (o_orderdate < '1993-09-01'::date))
                                             ->  Index Scan using customer_pkey on customer  (cost=0.42..0.71 rows=1 width=148)
                                                   Index Cond: (c_custkey = orders.o_custkey)
                                       ->  Hash  (cost=11.70..11.70 rows=170 width=108)
                                             ->  Seq Scan on nation  (cost=0.00..11.70 rows=170 width=108)
 JIT:
   Functions: 36
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(28 rows)

COMMIT;
COMMIT

Query 10 executed in 0.187 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	ps_partkey,
	sum(ps_supplycost * ps_availqty) as value
from
	partsupp,
	supplier,
	nation
where
	ps_suppkey = s_suppkey
	and s_nationkey = n_nationkey
	and n_name = 'IRAN'
group by
	ps_partkey having
		sum(ps_supplycost * ps_availqty) > (
			select
				sum(ps_supplycost * ps_availqty) *         inf
			from
				partsupp,
				supplier,
				nation
			where
				ps_suppkey = s_suppkey
				and s_nationkey = n_nationkey
				and n_name = 'IRAN'
		)
order by
	value desc;
ERROR:  column "inf" does not exist
LINE 17:     sum(ps_supplycost * ps_availqty) *         inf
                                                        ^

Query 11 executed in 0.142 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	l_shipmode,
	sum(case
		when o_orderpriority = '1-URGENT'
			or o_orderpriority = '2-HIGH'
			then 1
		else 0
	end) as high_line_count,
	sum(case
		when o_orderpriority <> '1-URGENT'
			and o_orderpriority <> '2-HIGH'
			then 1
		else 0
	end) as low_line_count
from
	orders,
	lineitem
where
	o_orderkey = l_orderkey
	and l_shipmode in ('SHIP', 'RAIL')
	and l_commitdate < l_receiptdate
	and l_shipdate < l_commitdate
	and l_receiptdate >= date '1997-01-01'
	and l_receiptdate < date '1997-01-01' + interval '1 year'
group by
	l_shipmode
order by
	l_shipmode;
                                                                                                                                  QUERY PLAN                                                                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=338766.44..338774.73 rows=57 width=60)
   Group Key: lineitem.l_shipmode
   ->  Gather Merge  (cost=338766.44..338773.74 rows=56 width=60)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=337766.42..337767.26 rows=28 width=60)
               Group Key: lineitem.l_shipmode
               ->  Sort  (cost=337766.42..337766.49 rows=28 width=60)
                     Sort Key: lineitem.l_shipmode
                     ->  Nested Loop  (cost=0.43..337765.74 rows=28 width=60)
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..337529.21 rows=28 width=48)
                                 Filter: ((l_shipmode = ANY ('{SHIP,RAIL}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1997-01-01'::date) AND (l_receiptdate < '1998-01-01 00:00:00'::timestamp without time zone))
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..8.45 rows=1 width=20)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
 JIT:
   Functions: 15
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(16 rows)

COMMIT;
COMMIT

Query 12 executed in 0.186 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	c_count,
	count(*) as custdist
from
	(
		select
			c_custkey,
			count(o_orderkey)
		from
			customer left outer join orders on
				c_custkey = o_custkey
				and o_comment not like '%pending%deposits%'
		group by
			c_custkey
	) as c_orders (c_custkey, c_count)
group by
	c_count
order by
	custdist desc,
	c_count desc;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=275001.34..275001.84 rows=200 width=16)
   Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
   ->  HashAggregate  (cost=274991.70..274993.70 rows=200 width=16)
         Group Key: count(orders.o_orderkey)
         ->  Finalize GroupAggregate  (cost=194486.81..270491.70 rows=300000 width=12)
               Group Key: customer.c_custkey
               ->  Gather Merge  (cost=194486.81..264491.70 rows=600000 width=12)
                     Workers Planned: 2
                     ->  Sort  (cost=193486.79..194236.79 rows=300000 width=12)
                           Sort Key: customer.c_custkey
                           ->  Partial HashAggregate  (cost=148400.40..161067.39 rows=300000 width=12)
                                 Group Key: customer.c_custkey
                                 Planned Partitions: 4
                                 ->  Parallel Hash Right Join  (cost=7676.96..78798.11 rows=1237374 width=8)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..67873.00 rows=1237374 width=8)
                                             Filter: ((o_comment)::text !~~ '%pending%deposits%'::text)
                                       ->  Parallel Hash  (cost=6114.46..6114.46 rows=125000 width=4)
                                             ->  Parallel Index Only Scan using customer_pkey on customer  (cost=0.42..6114.46 rows=125000 width=4)
 JIT:
   Functions: 18
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(22 rows)

COMMIT;
COMMIT

Query 13 executed in 0.178 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	100.00 * sum(case
		when p_type like 'PROMO%'
			then l_extendedprice * (1 - l_discount)
		else 0
	end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue
from
	lineitem,
	part
where
	l_partkey = p_partkey
	and l_shipdate >= date '1997-11-01'
	and l_shipdate < cast(date '1997-11-01' + interval '1 month' as date);
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=316184.76..316184.78 rows=1 width=32)
   ->  Gather  (cost=316184.53..316184.74 rows=2 width=64)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=315184.53..315184.54 rows=1 width=64)
               ->  Parallel Hash Join  (cost=13114.00..314747.09 rows=24996 width=57)
                     Hash Cond: (lineitem.l_partkey = part.p_partkey)
                     ->  Parallel Seq Scan on lineitem  (cost=0.00..300035.47 rows=24996 width=40)
                           Filter: ((l_shipdate >= '1997-11-01'::date) AND (l_shipdate < '1997-12-01'::date))
                     ->  Parallel Hash  (cost=9890.67..9890.67 rows=166667 width=25)
                           ->  Parallel Seq Scan on part  (cost=0.00..9890.67 rows=166667 width=25)
 JIT:
   Functions: 16
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(13 rows)

COMMIT;
COMMIT

Query 14 executed in 0.188 second(s).
BEGIN;
BEGIN
create or replace view revenue0 (supplier_no, total_revenue) as
	select
		l_suppkey,
		sum(l_extendedprice * (1 - l_discount))
	from
		lineitem
	where
		l_shipdate >= '1995-08-01'
		and l_shipdate < date'1995-08-01' + interval '90 days'
	group by
		l_suppkey;
CREATE VIEW
EXPLAIN
select
	s_suppkey,
	s_name,
	s_address,
	s_phone,
	total_revenue
from
	supplier,
	revenue0
where
	s_suppkey = supplier_no
	and total_revenue = (
		select
			max(total_revenue)
		from
			revenue0
	)
order by
	s_suppkey;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=606092.18..606467.33 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=303230.50..303230.51 rows=1 width=32)
           ->  Finalize GroupAggregate  (cost=302861.38..303228.00 rows=200 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather Merge  (cost=302861.38..303222.50 rows=400 width=36)
                       Workers Planned: 2
                       ->  Partial GroupAggregate  (cost=301861.36..302176.31 rows=200 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Sort  (cost=301861.36..301923.85 rows=24996 width=40)
                                   Sort Key: lineitem_1.l_suppkey
                                   ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..300035.47 rows=24996 width=40)
                                         Filter: ((l_shipdate >= '1995-08-01'::date) AND (l_shipdate < '1995-10-30 00:00:00'::timestamp without time zone))
   ->  Finalize GroupAggregate  (cost=302861.38..303228.50 rows=1 width=36)
         Group Key: lineitem.l_suppkey
         Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
         ->  Gather Merge  (cost=302861.38..303222.50 rows=400 width=36)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=301861.36..302176.31 rows=200 width=36)
                     Group Key: lineitem.l_suppkey
                     ->  Sort  (cost=301861.36..301923.85 rows=24996 width=40)
                           Sort Key: lineitem.l_suppkey
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..300035.47 rows=24996 width=40)
                                 Filter: ((l_shipdate >= '1995-08-01'::date) AND (l_shipdate < '1995-10-30 00:00:00'::timestamp without time zone))
   ->  Index Scan using supplier_pkey on supplier  (cost=0.29..8.30 rows=1 width=71)
         Index Cond: (s_suppkey = lineitem.l_suppkey)
 JIT:
   Functions: 31
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(29 rows)

drop view revenue0;
DROP VIEW
COMMIT;
COMMIT

Query 15 executed in 0.197 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	p_brand,
	p_type,
	p_size,
	count(distinct ps_suppkey) as supplier_cnt
from
	partsupp,
	part
where
	p_partkey = ps_partkey
	and p_brand <> 'Brand#53'
	and p_type not like 'STANDARD BRUSHED%'
	and p_size in (22, 4, 26, 12, 27, 49, 1, 9)
	and ps_suppkey not in (
		select
			s_suppkey
		from
			supplier
		where
			s_comment like '%Customer%Complaints%'
	)
group by
	p_brand,
	p_type,
	p_size
order by
	supplier_cnt desc,
	p_brand,
	p_type,
	p_size;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=67453.70..67532.59 rows=31556 width=44)
   Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
   ->  GroupAggregate  (cost=50206.02..65095.58 rows=31556 width=44)
         Group Key: part.p_brand, part.p_type, part.p_size
         ->  Gather Merge  (cost=50206.02..63627.62 rows=115240 width=40)
               Workers Planned: 2
               ->  Sort  (cost=49206.00..49326.04 rows=48017 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Parallel Hash Join  (cost=10594.16..45472.37 rows=48017 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=722.43..34725.64 rows=333333 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..722.00 rows=2 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Parallel Hash  (cost=9571.62..9571.62 rows=24008 width=40)
                                 ->  Parallel Bitmap Heap Scan on part  (cost=695.40..9571.62 rows=24008 width=40)
                                       Recheck Cond: (p_size = ANY ('{22,4,26,12,27,49,1,9}'::integer[]))
                                       Filter: ((p_brand <> 'Brand#53'::bpchar) AND ((p_type)::text !~~ 'STANDARD BRUSHED%'::text))
                                       ->  Bitmap Index Scan on p_s  (cost=0.00..681.00 rows=62613 width=0)
                                             Index Cond: (p_size = ANY ('{22,4,26,12,27,49,1,9}'::integer[]))
(21 rows)

COMMIT;
COMMIT

Query 16 executed in 0.145 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice) / 7.0 as avg_yearly
from
	lineitem,
	part
where
	p_partkey = l_partkey
	and p_brand = 'Brand#33'
	and p_container = 'MED PACK'
	and l_quantity < (
		select
			0.2 * avg(l_quantity)
		from
			lineitem
		where
			l_partkey = p_partkey
	);
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Aggregate  (cost=4140031.65..4140031.66 rows=1 width=32)
   ->  Hash Join  (cost=11769.34..4140021.57 rows=4029 width=18)
         Hash Cond: (lineitem.l_partkey = part.p_partkey)
         Join Filter: (lineitem.l_quantity < (SubPlan 1))
         ->  Seq Scan on lineitem  (cost=0.00..345027.96 rows=11997996 width=40)
         ->  Hash  (cost=11764.30..11764.30 rows=403 width=4)
               ->  Gather  (cost=1000.00..11764.30 rows=403 width=4)
                     Workers Planned: 2
                     ->  Parallel Seq Scan on part  (cost=0.00..10724.00 rows=168 width=4)
                           Filter: ((p_brand = 'Brand#33'::bpchar) AND (p_container = 'MED PACK'::bpchar))
         SubPlan 1
           ->  Aggregate  (cost=375172.93..375172.94 rows=1 width=32)
                 ->  Seq Scan on lineitem lineitem_1  (cost=0.00..375022.95 rows=59990 width=18)
                       Filter: (l_partkey = part.p_partkey)
 JIT:
   Functions: 24
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

COMMIT;
COMMIT

Query 17 executed in 0.189 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice,
	sum(l_quantity)
from
	customer,
	orders,
	lineitem
where
	o_orderkey in (
		select
			l_orderkey
		from
			lineitem
		group by
			l_orderkey having
				sum(l_quantity) > 314
	)
	and c_custkey = o_custkey
	and o_orderkey = l_orderkey
group by
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice
order by
	o_totalprice desc,
	o_orderdate
LIMIT 100;
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=412305.34..412305.59 rows=100 width=71)
   ->  Sort  (cost=412305.34..412306.01 rows=268 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=412289.07..412295.10 rows=268 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Sort  (cost=412289.07..412289.74 rows=268 width=57)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     ->  Nested Loop  (cost=301046.93..412278.26 rows=268 width=57)
                           ->  Nested Loop  (cost=301046.50..301694.50 rows=67 width=43)
                                 ->  Nested Loop  (cost=301046.07..301664.30 rows=67 width=24)
                                       ->  Finalize GroupAggregate  (cost=301045.64..301098.31 rows=67 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '314'::numeric)
                                             ->  Gather Merge  (cost=301045.64..301092.31 rows=400 width=36)
                                                   Workers Planned: 2
                                                   ->  Sort  (cost=300045.62..300046.12 rows=200 width=36)
                                                         Sort Key: lineitem_1.l_orderkey
                                                         ->  Partial HashAggregate  (cost=300035.47..300037.97 rows=200 width=36)
                                                               Group Key: lineitem_1.l_orderkey
                                                               ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..275039.65 rows=4999165 width=22)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..8.45 rows=1 width=20)
                                             Index Cond: (o_orderkey = lineitem_1.l_orderkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.42..0.45 rows=1 width=23)
                                       Index Cond: (c_custkey = orders.o_custkey)
                           ->  Index Scan using lineitem_pkey on lineitem  (cost=0.43..1050.60 rows=59990 width=22)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 26
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(29 rows)

COMMIT;
COMMIT

Query 18 executed in 0.191 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice* (1 - l_discount)) as revenue
from
	lineitem,
	part
where
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#33'
		and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')
		and l_quantity >= 9 and l_quantity <= 9+10
		and p_size between 1 and 5
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#14'
		and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')
		and l_quantity >= 11 and l_quantity <= 11+10
		and p_size between 1 and 10
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#35'
		and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')
		and l_quantity >= 25 and l_quantity <= 25+10
		and p_size between 1 and 15
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	);


 Aggregate  (cost=339878.16..339878.17 rows=1 width=32)
   ->  Gather  (cost=4781.43..339878.15 rows=1 width=36)
         Workers Planned: 2
         ->  Nested Loop  (cost=3781.43..338878.05 rows=1 width=36)
               ->  Parallel Bitmap Heap Scan on lineitem  (cost=3781.01..338843.94 rows=4 width=58)
                     Recheck Cond: (((l_quantity >= '9'::numeric) AND (l_quantity <= '19'::numeric)) OR ((l_quantity >= '11'::numeric) AND (l_quantity <= '21'::numeric)) OR ((l_quantity >= '25'::numeric) AND (l_quantity <= '35'::numeric)))
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                     ->  BitmapOr  (cost=3781.01..3781.01 rows=179970 width=0)
                           ->  Bitmap Index Scan on l_q  (cost=0.00..1260.34 rows=59990 width=0)
                                 Index Cond: ((l_quantity >= '9'::numeric) AND (l_quantity <= '19'::numeric))
                           ->  Bitmap Index Scan on l_q  (cost=0.00..1260.34 rows=59990 width=0)
                                 Index Cond: ((l_quantity >= '11'::numeric) AND (l_quantity <= '21'::numeric))
                           ->  Bitmap Index Scan on l_q  (cost=0.00..1260.34 rows=59990 width=0)
                                 Index Cond: ((l_quantity >= '25'::numeric) AND (l_quantity <= '35'::numeric))
               ->  Index Scan using part_pkey on part  (cost=0.42..8.52 rows=1 width=30)
                     Index Cond: (p_partkey = lineitem.l_partkey)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#33'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#14'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#35'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))) AND (((p_brand = 'Brand#33'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (lineitem.l_quantity >= '9'::numeric) AND (lineitem.l_quantity <= '19'::numeric) AND (p_size <= 5)) OR ((p_brand = 'Brand#14'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (lineitem.l_quantity >= '11'::numeric) AND (lineitem.l_quantity <= '21'::numeric) AND (p_size <= 10)) OR ((p_brand = 'Brand#35'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (lineitem.l_quantity >= '25'::numeric) AND (lineitem.l_quantity <= '35'::numeric) AND (p_size <= 15))))
 JIT:
   Functions: 12
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(20 rows)

COMMIT;
COMMIT

Query 19 executed in 0.187 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	s_name,
	s_address
from
	supplier,
	nation
where
	s_suppkey in (
		select
			ps_suppkey
		from
			partsupp
		where
			ps_partkey in (
				select
					p_partkey
				from
					part
				where
					p_name like 'lemon%'
			)
			and ps_availqty > (
				select
					0.5 * sum(l_quantity)
				from
					lineitem
				where
					l_partkey = ps_partkey
					and l_suppkey = ps_suppkey
					and l_shipdate >= '1993-01-01'
					and l_shipdate < cast(date '1993-01-01' + interval '1 year' as date)
			)
	)
	and s_nationkey = n_nationkey
	and n_name = 'ROMANIA'
order by
	s_name;
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4391094876.77..4391094876.85 rows=32 width=51)
   Sort Key: supplier.s_name
   ->  Nested Loop Semi Join  (cost=1.14..4391094875.97 rows=32 width=51)
         ->  Nested Loop  (cost=0.29..1316.40 rows=118 width=55)
               Join Filter: (nation.n_nationkey = supplier.s_nationkey)
               ->  Index Scan using supplier_pkey on supplier  (cost=0.29..1004.27 rows=20000 width=59)
               ->  Materialize  (cost=0.00..12.13 rows=1 width=4)
                     ->  Seq Scan on nation  (cost=0.00..12.12 rows=1 width=4)
                           Filter: (n_name = 'ROMANIA'::bpchar)
         ->  Nested Loop  (cost=0.85..37212657.27 rows=1 width=4)
               ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..37212643.44 rows=27 width=8)
                     Index Cond: (ps_suppkey = supplier.s_suppkey)
                     Filter: ((ps_availqty)::numeric > (SubPlan 1))
                     SubPlan 1
                       ->  Aggregate  (cost=465007.93..465007.94 rows=1 width=32)
                             ->  Seq Scan on lineitem  (cost=0.00..465007.92 rows=1 width=18)
                                   Filter: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01'::date) AND (l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
               ->  Index Scan using part_pkey on part  (cost=0.42..0.51 rows=1 width=4)
                     Index Cond: (p_partkey = partsupp.ps_partkey)
                     Filter: ((p_name)::text ~~ 'lemon%'::text)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(23 rows)

COMMIT;
COMMIT

Query 20 executed in 0.192 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	s_name,
	count(*) as numwait
from
	supplier,
	lineitem l1,
	orders,
	nation
where
	s_suppkey = l1.l_suppkey
	and o_orderkey = l1.l_orderkey
	and o_orderstatus = 'F'
	and l1.l_receiptdate > l1.l_commitdate
	and exists (
		select
			*
		from
			lineitem l2
		where
			l2.l_orderkey = l1.l_orderkey
			and l2.l_suppkey <> l1.l_suppkey
	)
	and not exists (
		select
			*
		from
			lineitem l3
		where
			l3.l_orderkey = l1.l_orderkey
			and l3.l_suppkey <> l1.l_suppkey
			and l3.l_receiptdate > l3.l_commitdate
	)
	and s_nationkey = n_nationkey
	and n_name = 'EGYPT'
group by
	s_name
order by
	numwait desc,
	s_name
LIMIT 100;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1001334.47..1001334.72 rows=100 width=34)
   ->  Sort  (cost=1001334.47..1001341.56 rows=2837 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  Finalize GroupAggregate  (cost=1000892.30..1001226.04 rows=2837 width=34)
               Group Key: supplier.s_name
               ->  Gather Merge  (cost=1000892.30..1001185.85 rows=2364 width=34)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=999892.28..999912.96 rows=1182 width=34)
                           Group Key: supplier.s_name
                           ->  Sort  (cost=999892.28..999895.23 rows=1182 width=26)
                                 Sort Key: supplier.s_name
                                 ->  Nested Loop  (cost=672674.48..999831.95 rows=1182 width=26)
                                       ->  Parallel Hash Semi Join  (cost=672674.05..993031.96 rows=2450 width=34)
                                             Hash Cond: (l1.l_orderkey = l2.l_orderkey)
                                             Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Hash Anti Join  (cost=315616.84..616301.07 rows=4901 width=34)
                                                   Hash Cond: (l1.l_orderkey = l3.l_orderkey)
                                                   Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                                   ->  Hash Join  (cost=739.43..294624.26 rows=9802 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Seq Scan on lineitem l1  (cost=0.00..287537.56 rows=1666388 width=8)
                                                               Filter: (l_receiptdate > l_commitdate)
                                                         ->  Hash  (cost=737.95..737.95 rows=118 width=30)
                                                               ->  Hash Join  (cost=12.14..737.95 rows=118 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Seq Scan on supplier  (cost=0.00..672.00 rows=20000 width=34)
                                                                     ->  Hash  (cost=12.12..12.12 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..12.12 rows=1 width=4)
                                                                                 Filter: (n_name = 'EGYPT'::bpchar)
                                                   ->  Parallel Hash  (cost=287537.56..287537.56 rows=1666388 width=8)
                                                         ->  Parallel Seq Scan on lineitem l3  (cost=0.00..287537.56 rows=1666388 width=8)
                                                               Filter: (l_receiptdate > l_commitdate)
                                             ->  Parallel Hash  (cost=275039.65..275039.65 rows=4999165 width=8)
                                                   ->  Parallel Seq Scan on lineitem l2  (cost=0.00..275039.65 rows=4999165 width=8)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..2.78 rows=1 width=4)
                                             Index Cond: (o_orderkey = l1.l_orderkey)
                                             Filter: (o_orderstatus = 'F'::bpchar)
 JIT:
   Functions: 57
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(40 rows)

COMMIT;
COMMIT

Query 21 executed in 0.206 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	cntrycode,
	count(*) as numcust,
	sum(c_acctbal) as totacctbal
from
	(
		select
			substring(c_phone from 1 for 2) as cntrycode,
			c_acctbal
		from
			customer
		where
			substring(c_phone from 1 for 2) in
				('18', '19', '27', '22', '10', '17', '13')
			and c_acctbal > (
				select
					avg(c_acctbal)
				from
					customer
				where
					c_acctbal > 0.00
					and substring(c_phone from 1 for 2) in
						('18', '19', '27', '22', '10', '17', '13')
			)
			and not exists (
				select
					*
				from
					orders
				where
					o_custkey = c_custkey
			)
	) as vip
group by
	cntrycode
order by
	cntrycode;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=98846.11..99043.46 rows=1479 width=72)
   Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
   InitPlan 1
     ->  Finalize Aggregate  (cost=11539.40..11539.41 rows=1 width=32)
           ->  Gather  (cost=11539.18..11539.39 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=10539.18..10539.19 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..10529.25 rows=3970 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{18,19,27,22,10,17,13}'::text[])))
   ->  Gather Merge  (cost=87306.70..87465.85 rows=1232 width=72)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=86306.68..86323.62 rows=616 width=72)
               Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Sort  (cost=86306.68..86308.22 rows=616 width=38)
                     Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                     ->  Parallel Hash Right Anti Join  (cost=10215.27..86278.14 rows=616 width=38)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Parallel Seq Scan on orders  (cost=0.00..64748.00 rows=1250000 width=4)
                           ->  Parallel Hash  (cost=10197.05..10197.05 rows=1458 width=26)
                                 ->  Parallel Bitmap Heap Scan on customer  (cost=1855.30..10197.05 rows=1458 width=26)
                                       Recheck Cond: (c_acctbal > (InitPlan 1).col1)
                                       Filter: (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{18,19,27,22,10,17,13}'::text[]))
                                       ->  Bitmap Index Scan on c_acb  (cost=0.00..1854.42 rows=100000 width=0)
                                             Index Cond: (c_acctbal > (InitPlan 1).col1)
(24 rows)

COMMIT;
COMMIT

Query 22 executed in 0.146 second(s).

