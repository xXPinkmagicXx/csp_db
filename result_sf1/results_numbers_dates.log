=== Experiment: numbers_dates ===
INDEX_ALL=0
INDEX_NUMBERS=1
INDEX_DATES=1
INDEX_TEXT=0
INDEX_DEFAULT=0

[Info] Running drop_indexes.sh
[Info] Keeping date indexes
[Info] Keeping numbers indexes
[Info] Dropping text indexes
[Info] Running create_indexes.sh
[Info] Creating indexes for dates
[Info] Creating indexes for numbers

[Info] Running queries(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22) for numbers_dates
BEGIN;
BEGIN
EXPLAIN
select
	l_returnflag,
	l_linestatus,
	sum(l_quantity) as sum_qty,
	sum(l_extendedprice) as sum_base_price,
	sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
	avg(l_quantity) as avg_qty,
	avg(l_extendedprice) as avg_price,
	avg(l_discount) as avg_disc,
	count(*) as count_order
from
	lineitem
where
	l_shipdate <= date '1998-12-01' - interval '97 days'
group by
	l_returnflag,
	l_linestatus
order by
	l_returnflag,
	l_linestatus;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=230871.69..230873.64 rows=6 width=236)
   Group Key: l_returnflag, l_linestatus
   ->  Gather Merge  (cost=230871.69..230873.09 rows=12 width=236)
         Workers Planned: 2
         ->  Sort  (cost=229871.67..229871.68 rows=6 width=236)
               Sort Key: l_returnflag, l_linestatus
               ->  Partial HashAggregate  (cost=229871.45..229871.59 rows=6 width=236)
                     Group Key: l_returnflag, l_linestatus
                     ->  Parallel Seq Scan on lineitem  (cost=0.00..143856.33 rows=2457575 width=25)
                           Filter: (l_shipdate <= '1998-08-26 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 9
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(13 rows)

COMMIT;
COMMIT

Query 1 execution times in seconds: 0.189,0.174,0.190,0.190,0.195,0.196,0.195,0.185,0.194,0.195
Average execution time: 0.1903 seconds

BEGIN;
BEGIN
EXPLAIN
select
	s_acctbal,
	s_name,
	n_name,
	p_partkey,
	p_mfgr,
	s_address,
	s_phone,
	s_comment
from
	part,
	supplier,
	partsupp,
	nation,
	region
where
	p_partkey = ps_partkey
	and s_suppkey = ps_suppkey
	and p_size = 11
	and p_type like '%BRASS'
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'EUROPE'
	and ps_supplycost = (
		select
			min(ps_supplycost)
		from
			partsupp,
			supplier,
			nation,
			region
		where
			p_partkey = ps_partkey
			and s_suppkey = ps_suppkey
			and s_nationkey = n_nationkey
			and n_regionkey = r_regionkey
			and r_name = 'EUROPE'
	)
order by
	s_acctbal desc,
	n_name,
	s_name,
	p_partkey
LIMIT 100;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=55290.97..55290.98 rows=1 width=270)
   ->  Sort  (cost=55290.97..55290.98 rows=1 width=270)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Hash Join  (cost=28234.97..55290.96 rows=1 width=270)
               Hash Cond: ((part.p_partkey = partsupp.ps_partkey) AND ((SubPlan 1) = partsupp.ps_supplycost))
               ->  Bitmap Heap Scan on part  (cost=49.04..4408.57 rows=792 width=30)
                     Recheck Cond: (p_size = 11)
                     Filter: ((p_type)::text ~~ '%BRASS'::text)
                     ->  Bitmap Index Scan on p_s  (cost=0.00..48.84 rows=4340 width=0)
                           Index Cond: (p_size = 11)
               ->  Hash  (cost=20316.92..20316.92 rows=160000 width=250)
                     ->  Nested Loop  (cost=1.99..20316.92 rows=160000 width=250)
                           ->  Nested Loop  (cost=1.56..481.32 rows=2000 width=244)
                                 Join Filter: (nation.n_regionkey = region.r_regionkey)
                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                       Filter: (r_name = 'EUROPE'::bpchar)
                                 ->  Hash Join  (cost=1.56..355.26 rows=10000 width=248)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=144)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=112)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=112)
                           ->  Index Scan using ps_sk on partsupp  (cost=0.42..9.12 rows=80 width=14)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=43.45..43.46 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..43.45 rows=1 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'EUROPE'::bpchar)
                             ->  Nested Loop  (cost=0.85..42.33 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..41.71 rows=4 width=10)
                                         ->  Index Scan using ps_pk on partsupp partsupp_1  (cost=0.42..8.50 rows=4 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using s_sk on supplier supplier_1  (cost=0.29..8.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using n_nk on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
(37 rows)

COMMIT;
COMMIT

Query 2 execution times in seconds: 0.145,0.154,0.150,0.151,0.151,0.153,0.156,0.151,0.149,0.152
Average execution time: 0.1512 seconds

BEGIN;
BEGIN
EXPLAIN
select
	l_orderkey,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	o_orderdate,
	o_shippriority
from
	customer,
	orders,
	lineitem
where
	c_mktsegment = 'MACHINERY'
	and c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate < date '1995-03-26'
	and l_shipdate > date '1995-03-26'
group by
	l_orderkey,
	o_orderdate,
	o_shippriority
order by
	revenue desc,
	o_orderdate
LIMIT 10;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=195981.73..195981.76 rows=10 width=44)
   ->  Sort  (cost=195981.73..196773.27 rows=316613 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=147472.32..189139.84 rows=316613 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=147472.32..181884.13 rows=263844 width=44)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=146472.30..150429.96 rows=131922 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=146472.30..146802.10 rows=131922 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Nested Loop  (cost=4540.05..132547.28 rows=131922 width=24)
                                       ->  Parallel Hash Join  (cost=4539.61..39287.55 rows=61730 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..33948.50 rows=304538 width=16)
                                                   Filter: (o_orderdate < '1995-03-26'::date)
                                             ->  Parallel Hash  (cost=4381.25..4381.25 rows=12669 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..4381.25 rows=12669 width=4)
                                                         Filter: (c_mktsegment = 'MACHINERY'::bpchar)
                                       ->  Index Scan using l_ok on lineitem  (cost=0.43..1.42 rows=9 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_shipdate > '1995-03-26'::date)
 JIT:
   Functions: 29
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(25 rows)

COMMIT;
COMMIT

Query 3 execution times in seconds: 0.182,0.171,0.194,0.188,0.183,0.195,0.197,0.195,0.197,0.193
Average execution time: 0.1895 seconds

BEGIN;
BEGIN
EXPLAIN
select
	o_orderpriority,
	count(*) as order_count
from
	orders
where
	o_orderdate >= date '1997-04-01'
	and o_orderdate < cast(date '1997-04-01' + interval '3 month' as date)
	and exists (
		select
			*
		from
			lineitem
		where
			l_orderkey = o_orderkey
			and l_commitdate < l_receiptdate
	)
group by
	o_orderpriority
order by
	o_orderpriority;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=64171.41..64220.93 rows=5 width=24)
   Group Key: orders.o_orderpriority
   ->  Gather Merge  (cost=64171.41..64220.83 rows=10 width=24)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=63171.39..63219.65 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Sort  (cost=63171.39..63187.46 rows=6428 width=16)
                     Sort Key: orders.o_orderpriority
                     ->  Nested Loop Semi Join  (cost=863.25..62764.82 rows=6428 width=16)
                           ->  Parallel Bitmap Heap Scan on orders  (cost=862.82..27388.08 rows=25951 width=20)
                                 Recheck Cond: ((o_orderdate >= '1997-04-01'::date) AND (o_orderdate < '1997-07-01'::date))
                                 ->  Bitmap Index Scan on o_od  (cost=0.00..847.25 rows=62282 width=0)
                                       Index Cond: ((o_orderdate >= '1997-04-01'::date) AND (o_orderdate < '1997-07-01'::date))
                           ->  Index Scan using l_ok on lineitem  (cost=0.43..4.50 rows=5 width=4)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Filter: (l_commitdate < l_receiptdate)
(16 rows)

COMMIT;
COMMIT

Query 4 execution times in seconds: 0.146,0.145,0.142,0.142,0.144,0.143,0.143,0.143,0.148,0.138
Average execution time: 0.1434 seconds

BEGIN;
BEGIN
EXPLAIN
select
	n_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue
from
	customer,
	orders,
	lineitem,
	supplier,
	nation,
	region
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and l_suppkey = s_suppkey
	and c_nationkey = s_nationkey
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'ASIA'
	and o_orderdate >= date '1996-01-01'
	and o_orderdate < date '1996-01-01' + interval '1 year'
group by
	n_name
order by
	revenue desc;
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=83368.87..83368.93 rows=25 width=136)
   Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
   ->  Finalize GroupAggregate  (cost=83324.09..83368.29 rows=25 width=136)
         Group Key: nation.n_name
         ->  Gather Merge  (cost=83324.09..83367.60 rows=50 width=136)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=82324.07..82361.81 rows=25 width=136)
                     Group Key: nation.n_name
                     ->  Sort  (cost=82324.07..82331.55 rows=2994 width=116)
                           Sort Key: nation.n_name
                           ->  Hash Join  (cost=476.32..82151.20 rows=2994 width=116)
                                 Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                 ->  Nested Loop  (cost=3.32..81285.19 rows=74859 width=128)
                                       ->  Nested Loop  (cost=2.89..24312.84 rows=18711 width=116)
                                             ->  Hash Join  (cost=2.46..4586.84 rows=12500 width=116)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..4225.00 rows=62500 width=8)
                                                   ->  Hash  (cost=2.40..2.40 rows=5 width=108)
                                                         ->  Hash Join  (cost=1.07..2.40 rows=5 width=108)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=112)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'ASIA'::bpchar)
                                             ->  Index Scan using o_ck on orders  (cost=0.43..1.55 rows=3 width=8)
                                                   Index Cond: (o_custkey = customer.c_custkey)
                                                   Filter: ((o_orderdate >= '1996-01-01'::date) AND (o_orderdate < '1997-01-01 00:00:00'::timestamp without time zone))
                                       ->  Index Scan using l_ok on lineitem  (cost=0.43..2.88 rows=16 width=20)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                 ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(31 rows)

COMMIT;
COMMIT

Query 5 execution times in seconds: 0.151,0.153,0.159,0.157,0.158,0.150,0.154,0.154,0.154,0.150
Average execution time: 0.1540 seconds

BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice * l_discount) as revenue
from
	lineitem
where
	l_shipdate >= date '1997-01-01'
	and l_shipdate < cast(date '1997-01-01' + interval '1 year' as date)
	and l_discount between 0.08 - 0.01 and 0.08 + 0.01
	and l_quantity < 24;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=168848.98..168848.99 rows=1 width=32)
   ->  Gather  (cost=168848.75..168848.96 rows=2 width=32)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=167848.75..167848.76 rows=1 width=32)
               ->  Parallel Bitmap Heap Scan on lineitem  (cost=12574.71..167603.00 rows=49150 width=12)
                     Recheck Cond: ((l_shipdate >= '1997-01-01'::date) AND (l_shipdate < '1998-01-01'::date))
                     Filter: ((l_discount >= 0.07) AND (l_discount <= 0.09) AND (l_quantity < '24'::numeric))
                     ->  Bitmap Index Scan on l_sd  (cost=0.00..12545.22 rows=930879 width=0)
                           Index Cond: ((l_shipdate >= '1997-01-01'::date) AND (l_shipdate < '1998-01-01'::date))
 JIT:
   Functions: 9
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(12 rows)

COMMIT;
COMMIT

Query 6 execution times in seconds: 0.193,0.189,0.189,0.192,0.178,0.171,0.187,0.187,0.187,0.183
Average execution time: 0.1856 seconds

BEGIN;
BEGIN
EXPLAIN
select
	supp_nation,
	cust_nation,
	l_year,
	sum(volume) as revenue
from
	(
		select
			n1.n_name as supp_nation,
			n2.n_name as cust_nation,
			extract(year from l_shipdate) as l_year,
			l_extendedprice * (1 - l_discount) as volume
		from
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2
		where
			s_suppkey = l_suppkey
			and o_orderkey = l_orderkey
			and c_custkey = o_custkey
			and s_nationkey = n1.n_nationkey
			and c_nationkey = n2.n_nationkey
			and (
				(n1.n_name = 'EGYPT' and n2.n_name = 'CHINA')
				or (n1.n_name = 'CHINA' and n2.n_name = 'EGYPT')
			)
			and l_shipdate between date '1995-01-01' and date '1996-12-31'
	) as shipping
group by
	supp_nation,
	cust_nation,
	l_year
order by
	supp_nation,
	cust_nation,
	l_year;
                                                                                   QUERY PLAN                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=72829.49..73650.11 rows=6073 width=272)
   Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
   ->  Gather Merge  (cost=72829.49..73495.77 rows=5060 width=272)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=71829.47..71911.69 rows=2530 width=272)
               Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Sort  (cost=71829.47..71835.79 rows=2530 width=252)
                     Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                     ->  Hash Join  (cost=367.36..71686.46 rows=2530 width=252)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           Join Filter: (((n1.n_name = 'EGYPT'::bpchar) AND (n2.n_name = 'CHINA'::bpchar)) OR ((n1.n_name = 'CHINA'::bpchar) AND (n2.n_name = 'EGYPT'::bpchar)))
                           ->  Nested Loop  (cost=2.26..70989.74 rows=60804 width=124)
                                 ->  Nested Loop  (cost=1.83..12583.67 rows=50000 width=108)
                                       ->  Hash Join  (cost=1.40..4418.27 rows=5000 width=108)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..4225.00 rows=62500 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=108)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=108)
                                                         Filter: ((n_name = 'CHINA'::bpchar) OR (n_name = 'EGYPT'::bpchar))
                                       ->  Index Scan using o_ck on orders  (cost=0.43..1.46 rows=17 width=8)
                                             Index Cond: (o_custkey = customer.c_custkey)
                                 ->  Index Scan using l_ok on lineitem  (cost=0.43..1.12 rows=5 width=24)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=355.10..355.10 rows=800 width=108)
                                 ->  Hash Join  (cost=1.40..355.10 rows=800 width=108)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=108)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=108)
                                                   Filter: ((n_name = 'EGYPT'::bpchar) OR (n_name = 'CHINA'::bpchar))
(31 rows)

COMMIT;
COMMIT

Query 7 execution times in seconds: 0.153,0.155,0.154,0.145,0.153,0.156,0.149,0.155,0.148,0.141
Average execution time: 0.1509 seconds

BEGIN;
BEGIN
EXPLAIN
select
	o_year,
	sum(case
		when nation = 'BRAZIL' then volume
		else 0
	end) / sum(volume) as mkt_share
from
	(
		select
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) as volume,
			n2.n_name as nation
		from
			part,
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2,
			region
		where
			p_partkey = l_partkey
			and s_suppkey = l_suppkey
			and l_orderkey = o_orderkey
			and o_custkey = c_custkey
			and c_nationkey = n1.n_nationkey
			and n1.n_regionkey = r_regionkey
			and r_name = 'AMERICA'
			and s_nationkey = n2.n_nationkey
			and o_orderdate between date '1995-01-01' and date '1996-12-31'
			and p_type = 'SMALL PLATED TIN'
	) as all_nations
group by
	o_year
order by
	o_year;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=75717.68..76065.79 rows=2406 width=64)
   Group Key: (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=75717.68..75992.32 rows=2028 width=96)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=74717.65..74758.21 rows=1014 width=96)
               Group Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=74717.65..74720.19 rows=1014 width=148)
                     Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                     ->  Hash Join  (cost=5.59..74667.03 rows=1014 width=148)
                           Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                           ->  Nested Loop  (cost=4.03..74659.81 rows=1014 width=20)
                                 ->  Hash Join  (cost=3.74..74352.90 rows=1014 width=20)
                                       Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                       ->  Nested Loop  (cost=1.28..74321.29 rows=5069 width=24)
                                             ->  Nested Loop  (cost=0.86..71926.14 rows=5069 width=24)
                                                   ->  Nested Loop  (cost=0.43..64131.77 rows=16578 width=20)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..5169.67 rows=552 width=4)
                                                               Filter: ((p_type)::text = 'SMALL PLATED TIN'::text)
                                                         ->  Index Scan using l_pk on lineitem  (cost=0.43..106.52 rows=30 width=24)
                                                               Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=12)
                                                         Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Index Scan using c_ck on customer  (cost=0.42..0.47 rows=1 width=8)
                                                   Index Cond: (c_custkey = orders.o_custkey)
                                       ->  Hash  (cost=2.40..2.40 rows=5 width=4)
                                             ->  Hash Join  (cost=1.07..2.40 rows=5 width=4)
                                                   Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                   ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                         ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                               Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Scan using s_sk on supplier  (cost=0.29..0.30 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                 ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=108)
(36 rows)

COMMIT;
COMMIT

Query 8 execution times in seconds: 0.150,0.145,0.155,0.148,0.159,0.158,0.155,0.157,0.159,0.159
Average execution time: 0.1545 seconds

BEGIN;
BEGIN
EXPLAIN
select
	nation,
	o_year,
	sum(amount) as sum_profit
from
	(
		select
			n_name as nation,
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount
		from
			part,
			supplier,
			lineitem,
			partsupp,
			orders,
			nation
		where
			s_suppkey = l_suppkey
			and ps_suppkey = l_suppkey
			and ps_partkey = l_partkey
			and p_partkey = l_partkey
			and o_orderkey = l_orderkey
			and s_nationkey = n_nationkey
			and p_name like '%brown%'
	) as profit
group by
	nation,
	o_year
order by
	nation,
	o_year desc;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=54317.17..69657.69 rows=60150 width=168)
   Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=54317.17..67745.24 rows=101020 width=168)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=53317.15..55085.00 rows=50510 width=168)
               Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=53317.15..53443.42 rows=50510 width=159)
                     Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                     ->  Nested Loop  (cost=450.85..45398.74 rows=50510 width=159)
                           ->  Nested Loop  (cost=450.42..21777.07 rows=50510 width=131)
                                 Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                                 ->  Hash Join  (cost=449.99..14605.28 rows=6733 width=126)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Hash Join  (cost=448.43..14583.05 rows=6733 width=26)
                                             Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                             ->  Nested Loop  (cost=0.42..14117.36 rows=6733 width=18)
                                                   ->  Parallel Seq Scan on part  (cost=0.00..5169.67 rows=1683 width=4)
                                                         Filter: ((p_name)::text ~~ '%brown%'::text)
                                                   ->  Index Scan using ps_pk on partsupp  (cost=0.42..5.28 rows=4 width=14)
                                                         Index Cond: (ps_partkey = part.p_partkey)
                                             ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                                   ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=108)
                                 ->  Index Scan using l_sk_pk on lineitem  (cost=0.43..1.05 rows=1 width=29)
                                       Index Cond: ((l_suppkey = partsupp.ps_suppkey) AND (l_partkey = partsupp.ps_partkey))
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=8)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
(28 rows)

COMMIT;
COMMIT

Query 9 execution times in seconds: 0.162,0.162,0.165,0.147,0.166,0.157,0.159,0.149,0.152,0.210
Average execution time: 0.1629 seconds

BEGIN;
BEGIN
EXPLAIN
select
	c_custkey,
	c_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	c_acctbal,
	n_name,
	c_address,
	c_phone,
	c_comment
from
	customer,
	orders,
	lineitem,
	nation
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate >= date '1993-02-01'
	and o_orderdate < cast(date '1993-02-01' + interval '3 month' as date)
	and l_returnflag = 'R'
	and c_nationkey = n_nationkey
group by
	c_custkey,
	c_name,
	c_acctbal,
	c_phone,
	n_name,
	c_address,
	c_comment
order by
	revenue desc
LIMIT 20;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=152990.48..152990.53 rows=20 width=279)
   ->  Sort  (cost=152990.48..153124.55 rows=53625 width=279)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=144673.79..151563.54 rows=53625 width=279)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=144673.79..150446.35 rows=44688 width=279)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=143673.76..144288.22 rows=22344 width=279)
                           Group Key: customer.c_custkey, nation.n_name
                           ->  Sort  (cost=143673.76..143729.62 rows=22344 width=259)
                                 Sort Key: customer.c_custkey, nation.n_name
                                 ->  Hash Join  (cost=134218.85..139308.68 rows=22344 width=259)
                                       Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                       ->  Parallel Hash Join  (cost=134217.29..139238.51 rows=22344 width=159)
                                             Hash Cond: (customer.c_custkey = orders.o_custkey)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..4225.00 rows=62500 width=147)
                                             ->  Parallel Hash  (cost=133937.99..133937.99 rows=22344 width=16)
                                                   ->  Nested Loop  (cost=753.53..133937.99 rows=22344 width=16)
                                                         ->  Parallel Bitmap Heap Scan on orders  (cost=753.09..27228.53 rows=22629 width=8)
                                                               Recheck Cond: ((o_orderdate >= '1993-02-01'::date) AND (o_orderdate < '1993-05-01'::date))
                                                               ->  Bitmap Index Scan on o_od  (cost=0.00..739.52 rows=54309 width=0)
                                                                     Index Cond: ((o_orderdate >= '1993-02-01'::date) AND (o_orderdate < '1993-05-01'::date))
                                                         ->  Index Scan using l_ok on lineitem  (cost=0.43..4.68 rows=4 width=16)
                                                               Index Cond: (l_orderkey = orders.o_orderkey)
                                                               Filter: (l_returnflag = 'R'::bpchar)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=108)
 JIT:
   Functions: 35
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(30 rows)

COMMIT;
COMMIT

Query 10 execution times in seconds: 0.200,0.197,0.194,0.197,0.190,0.175,0.200,0.195,0.202,0.194
Average execution time: 0.1944 seconds

BEGIN;
BEGIN
EXPLAIN
select
	ps_partkey,
	sum(ps_supplycost * ps_availqty) as value
from
	partsupp,
	supplier,
	nation
where
	ps_suppkey = s_suppkey
	and s_nationkey = n_nationkey
	and n_name = 'RUSSIA'
group by
	ps_partkey having
		sum(ps_supplycost * ps_availqty) > (
			select
				sum(ps_supplycost * ps_availqty) *         inf
			from
				partsupp,
				supplier,
				nation
			where
				ps_suppkey = s_suppkey
				and s_nationkey = n_nationkey
				and n_name = 'RUSSIA'
		)
order by
	value desc;
ERROR:  column "inf" does not exist
LINE 17:     sum(ps_supplycost * ps_availqty) *         inf
                                                        ^

Query 11 execution times in seconds: 0.140,0.137,0.135,0.141,0.138,0.135,0.140,0.141,0.132,0.143
Average execution time: 0.1382 seconds

BEGIN;
BEGIN
EXPLAIN
select
	l_shipmode,
	sum(case
		when o_orderpriority = '1-URGENT'
			or o_orderpriority = '2-HIGH'
			then 1
		else 0
	end) as high_line_count,
	sum(case
		when o_orderpriority <> '1-URGENT'
			and o_orderpriority <> '2-HIGH'
			then 1
		else 0
	end) as low_line_count
from
	orders,
	lineitem
where
	o_orderkey = l_orderkey
	and l_shipmode in ('TRUCK', 'REG AIR')
	and l_commitdate < l_receiptdate
	and l_shipdate < l_commitdate
	and l_receiptdate >= date '1993-01-01'
	and l_receiptdate < date '1993-01-01' + interval '1 year'
group by
	l_shipmode
order by
	l_shipmode;
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=208616.23..208853.05 rows=7 width=27)
   Group Key: lineitem.l_shipmode
   ->  Gather Merge  (cost=208616.23..208852.88 rows=14 width=27)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=207616.21..207851.24 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Sort  (cost=207616.21..207645.58 rows=11748 width=27)
                     Sort Key: lineitem.l_shipmode
                     ->  Parallel Hash Join  (cost=167355.83..206822.03 rows=11748 width=27)
                           Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Parallel Seq Scan on orders  (cost=0.00..32386.00 rows=625000 width=20)
                           ->  Parallel Hash  (cost=167208.98..167208.98 rows=11748 width=15)
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=12243.19..167208.98 rows=11748 width=15)
                                       Recheck Cond: ((l_receiptdate >= '1993-01-01'::date) AND (l_receiptdate < '1994-01-01 00:00:00'::timestamp without time zone))
                                       Filter: ((l_shipmode = ANY ('{TRUCK,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate))
                                       ->  Bitmap Index Scan on l_rd  (cost=0.00..12236.14 rows=907971 width=0)
                                             Index Cond: ((l_receiptdate >= '1993-01-01'::date) AND (l_receiptdate < '1994-01-01 00:00:00'::timestamp without time zone))
 JIT:
   Functions: 23
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(20 rows)

COMMIT;
COMMIT

Query 12 execution times in seconds: 0.193,0.188,0.198,0.187,0.192,0.180,0.196,0.194,0.191,0.196
Average execution time: 0.1915 seconds

BEGIN;
BEGIN
EXPLAIN
select
	c_count,
	count(*) as custdist
from
	(
		select
			c_custkey,
			count(o_orderkey)
		from
			customer left outer join orders on
				c_custkey = o_custkey
				and o_comment not like '%special%packages%'
		group by
			c_custkey
	) as c_orders (c_custkey, c_count)
group by
	c_count
order by
	custdist desc,
	c_count desc;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=136832.49..136832.99 rows=200 width=16)
   Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
   ->  HashAggregate  (cost=136822.84..136824.84 rows=200 width=16)
         Group Key: count(orders.o_orderkey)
         ->  Finalize GroupAggregate  (cost=96570.40..134572.84 rows=150000 width=12)
               Group Key: customer.c_custkey
               ->  Gather Merge  (cost=96570.40..131572.84 rows=300000 width=12)
                     Workers Planned: 2
                     ->  Sort  (cost=95570.38..95945.38 rows=150000 width=12)
                           Sort Key: customer.c_custkey
                           ->  Partial HashAggregate  (cost=73824.75..80108.92 rows=150000 width=12)
                                 Group Key: customer.c_custkey
                                 Planned Partitions: 4
                                 ->  Parallel Hash Right Join  (cost=3822.69..39378.71 rows=612374 width=8)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..33948.50 rows=612374 width=8)
                                             Filter: ((o_comment)::text !~~ '%special%packages%'::text)
                                       ->  Parallel Hash  (cost=3041.44..3041.44 rows=62500 width=4)
                                             ->  Parallel Index Only Scan using c_ck on customer  (cost=0.42..3041.44 rows=62500 width=4)
 JIT:
   Functions: 18
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(22 rows)

COMMIT;
COMMIT

Query 13 execution times in seconds: 0.190,0.179,0.182,0.186,0.189,0.185,0.177,0.184,0.194,0.187
Average execution time: 0.1853 seconds

BEGIN;
BEGIN
EXPLAIN
select
	100.00 * sum(case
		when p_type like 'PROMO%'
			then l_extendedprice * (1 - l_discount)
		else 0
	end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue
from
	lineitem,
	part
where
	l_partkey = p_partkey
	and l_shipdate >= date '1994-02-01'
	and l_shipdate < cast(date '1994-02-01' + interval '1 month' as date);
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=106410.85..106410.87 rows=1 width=32)
   ->  Gather  (cost=106410.62..106410.83 rows=2 width=64)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=105410.62..105410.63 rows=1 width=64)
               ->  Parallel Hash Join  (cost=6836.15..104969.05 rows=25232 width=33)
                     Hash Cond: (lineitem.l_partkey = part.p_partkey)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=833.15..98899.82 rows=25232 width=16)
                           Recheck Cond: ((l_shipdate >= '1994-02-01'::date) AND (l_shipdate < '1994-03-01'::date))
                           ->  Bitmap Index Scan on l_sd  (cost=0.00..818.01 rows=60558 width=0)
                                 Index Cond: ((l_shipdate >= '1994-02-01'::date) AND (l_shipdate < '1994-03-01'::date))
                     ->  Parallel Hash  (cost=4961.33..4961.33 rows=83333 width=25)
                           ->  Parallel Seq Scan on part  (cost=0.00..4961.33 rows=83333 width=25)
 JIT:
   Functions: 17
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(15 rows)

COMMIT;
COMMIT

Query 14 execution times in seconds: 0.192,0.191,0.187,0.194,0.194,0.191,0.181,0.192,0.194,0.186
Average execution time: 0.1902 seconds

BEGIN;
BEGIN
create or replace view revenue0 (supplier_no, total_revenue) as
	select
		l_suppkey,
		sum(l_extendedprice * (1 - l_discount))
	from
		lineitem
	where
		l_shipdate >= '1994-08-01'
		and l_shipdate < date'1994-08-01' + interval '90 days'
	group by
		l_suppkey;
CREATE VIEW
EXPLAIN
select
	s_suppkey,
	s_name,
	s_address,
	s_phone,
	total_revenue
from
	supplier,
	revenue0
where
	s_suppkey = supplier_no
	and total_revenue = (
		select
			max(total_revenue)
		from
			revenue0
	)
order by
	s_suppkey;
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=293803.69..296739.79 rows=50 width=103)
   InitPlan 1
     ->  Aggregate  (cost=148265.99..148266.00 rows=1 width=32)
           ->  Finalize GroupAggregate  (cost=145537.41..148141.21 rows=9982 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather Merge  (cost=145537.41..147866.71 rows=19964 width=36)
                       Workers Planned: 2
                       ->  Sort  (cost=144537.39..144562.34 rows=9982 width=36)
                             Sort Key: lineitem_1.l_suppkey
                             ->  Partial HashAggregate  (cost=143749.55..143874.33 rows=9982 width=36)
                                   Group Key: lineitem_1.l_suppkey
                                   ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=3173.64..142786.46 rows=96309 width=16)
                                         Recheck Cond: ((l_shipdate >= '1994-08-01'::date) AND (l_shipdate < '1994-10-30 00:00:00'::timestamp without time zone))
                                         ->  Bitmap Index Scan on l_sd  (cost=0.00..3115.85 rows=231142 width=0)
                                               Index Cond: ((l_shipdate >= '1994-08-01'::date) AND (l_shipdate < '1994-10-30 00:00:00'::timestamp without time zone))
   ->  Finalize GroupAggregate  (cost=145537.41..148166.17 rows=50 width=36)
         Group Key: lineitem.l_suppkey
         Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
         ->  Gather Merge  (cost=145537.41..147866.71 rows=19964 width=36)
               Workers Planned: 2
               ->  Sort  (cost=144537.39..144562.34 rows=9982 width=36)
                     Sort Key: lineitem.l_suppkey
                     ->  Partial HashAggregate  (cost=143749.55..143874.33 rows=9982 width=36)
                           Group Key: lineitem.l_suppkey
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=3173.64..142786.46 rows=96309 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-08-01'::date) AND (l_shipdate < '1994-10-30 00:00:00'::timestamp without time zone))
                                 ->  Bitmap Index Scan on l_sd  (cost=0.00..3115.85 rows=231142 width=0)
                                       Index Cond: ((l_shipdate >= '1994-08-01'::date) AND (l_shipdate < '1994-10-30 00:00:00'::timestamp without time zone))
   ->  Index Scan using s_sk on supplier  (cost=0.29..6.14 rows=1 width=71)
         Index Cond: (s_suppkey = lineitem.l_suppkey)
 JIT:
   Functions: 25
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(33 rows)

drop view revenue0;
DROP VIEW
COMMIT;
COMMIT

Query 15 execution times in seconds: 0.182,0.200,0.194,0.181,0.207,0.223,0.243,0.198,0.193,0.194
Average execution time: 0.2015 seconds

BEGIN;
BEGIN
EXPLAIN
select
	p_brand,
	p_type,
	p_size,
	count(distinct ps_suppkey) as supplier_cnt
from
	partsupp,
	part
where
	p_partkey = ps_partkey
	and p_brand <> 'Brand#42'
	and p_type not like 'STANDARD BURNISHED%'
	and p_size in (38, 18, 36, 27, 7, 32, 49, 31)
	and ps_suppkey not in (
		select
			s_suppkey
		from
			supplier
		where
			s_comment like '%Customer%Complaints%'
	)
group by
	p_brand,
	p_type,
	p_size
order by
	supplier_cnt desc,
	p_brand,
	p_type,
	p_size;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=34106.12..34145.58 rows=15783 width=44)
   Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
   ->  GroupAggregate  (cost=25555.93..33005.57 rows=15783 width=44)
         Group Key: part.p_brand, part.p_type, part.p_size
         ->  Gather Merge  (cost=25555.93..32271.16 rows=57658 width=40)
               Workers Planned: 2
               ->  Sort  (cost=24555.91..24615.97 rows=24024 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Parallel Hash Join  (cost=5313.97..22807.90 rows=24024 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Parallel Index Only Scan using ps_pk_sk on partsupp  (cost=348.43..17404.85 rows=166667 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Parallel Hash  (cost=4815.39..4815.39 rows=12012 width=40)
                                 ->  Parallel Bitmap Heap Scan on part  (cost=363.09..4815.39 rows=12012 width=40)
                                       Recheck Cond: (p_size = ANY ('{38,18,36,27,7,32,49,31}'::integer[]))
                                       Filter: ((p_brand <> 'Brand#42'::bpchar) AND ((p_type)::text !~~ 'STANDARD BURNISHED%'::text))
                                       ->  Bitmap Index Scan on p_s  (cost=0.00..355.88 rows=31133 width=0)
                                             Index Cond: (p_size = ANY ('{38,18,36,27,7,32,49,31}'::integer[]))
(21 rows)

COMMIT;
COMMIT

Query 16 execution times in seconds: 0.145,0.143,0.145,0.141,0.147,0.139,0.137,0.139,0.147,0.143
Average execution time: 0.1426 seconds

BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice) / 7.0 as avg_yearly
from
	lineitem,
	part
where
	p_partkey = l_partkey
	and p_brand = 'Brand#35'
	and p_container = 'WRAP JAR'
	and l_quantity < (
		select
			0.2 * avg(l_quantity)
		from
			lineitem
		where
			l_partkey = p_partkey
	);
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Aggregate  (cost=196007.73..196007.74 rows=1 width=32)
   ->  Hash Join  (cost=6400.61..196002.70 rows=2010 width=8)
         Hash Cond: (lineitem.l_partkey = part.p_partkey)
         Join Filter: (lineitem.l_quantity < (SubPlan 1))
         ->  Seq Scan on lineitem  (cost=0.00..172612.15 rows=6001215 width=17)
         ->  Hash  (cost=6398.10..6398.10 rows=201 width=4)
               ->  Gather  (cost=1000.00..6398.10 rows=201 width=4)
                     Workers Planned: 2
                     ->  Parallel Seq Scan on part  (cost=0.00..5378.00 rows=84 width=4)
                           Filter: ((p_brand = 'Brand#35'::bpchar) AND (p_container = 'WRAP JAR'::bpchar))
         SubPlan 1
           ->  Aggregate  (cost=123.65..123.66 rows=1 width=32)
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=4.67..123.57 rows=30 width=5)
                       Recheck Cond: (l_partkey = part.p_partkey)
                       ->  Bitmap Index Scan on l_pk_sk  (cost=0.00..4.66 rows=30 width=0)
                             Index Cond: (l_partkey = part.p_partkey)
 JIT:
   Functions: 24
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(19 rows)

COMMIT;
COMMIT

Query 17 execution times in seconds: 0.189,0.196,0.194,0.193,0.192,0.195,0.188,0.183,0.175,0.189
Average execution time: 0.1894 seconds

BEGIN;
BEGIN
EXPLAIN
select
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice,
	sum(l_quantity)
from
	customer,
	orders,
	lineitem
where
	o_orderkey in (
		select
			l_orderkey
		from
			lineitem
		group by
			l_orderkey having
				sum(l_quantity) > 314
	)
	and c_custkey = o_custkey
	and o_orderkey = l_orderkey
group by
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice
order by
	o_totalprice desc,
	o_orderdate
LIMIT 100;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=485908.73..485908.98 rows=100 width=71)
   ->  Sort  (cost=485908.73..487147.38 rows=495460 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=404348.51..466972.61 rows=495460 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Gather Merge  (cost=404348.51..456650.52 rows=412884 width=71)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=403348.49..407993.43 rows=206442 width=71)
                           Group Key: customer.c_custkey, orders.o_orderkey
                           ->  Sort  (cost=403348.49..403864.59 rows=206442 width=44)
                                 Sort Key: customer.c_custkey, orders.o_orderkey
                                 ->  Nested Loop  (cost=282787.23..378771.93 rows=206442 width=44)
                                       ->  Parallel Hash Join  (cost=282786.80..316948.87 rows=51600 width=43)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Hash Join  (cost=277780.55..311807.17 rows=51600 width=24)
                                                   Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..32386.00 rows=625000 width=20)
                                                   ->  Hash  (cost=276232.55..276232.55 rows=123840 width=4)
                                                         ->  GroupAggregate  (cost=0.43..276232.55 rows=123840 width=4)
                                                               Group Key: lineitem_1.l_orderkey
                                                               Filter: (sum(lineitem_1.l_quantity) > '314'::numeric)
                                                               ->  Index Scan using l_ok on lineitem lineitem_1  (cost=0.43..240653.66 rows=6001215 width=9)
                                             ->  Parallel Hash  (cost=4225.00..4225.00 rows=62500 width=23)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..4225.00 rows=62500 width=23)
                                       ->  Index Scan using l_ok on lineitem  (cost=0.43..1.04 rows=16 width=9)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 36
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(29 rows)

COMMIT;
COMMIT

Query 18 execution times in seconds: 0.199,0.199,0.196,0.192,0.191,0.189,0.204,0.193,0.198,0.198
Average execution time: 0.1959 seconds

BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice* (1 - l_discount)) as revenue
from
	lineitem,
	part
where
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#22'
		and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')
		and l_quantity >= 7 and l_quantity <= 7+10
		and p_size between 1 and 5
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#34'
		and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')
		and l_quantity >= 12 and l_quantity <= 12+10
		and p_size between 1 and 10
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#33'
		and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')
		and l_quantity >= 29 and l_quantity <= 29+10
		and p_size between 1 and 15
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	);

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=32916.85..32916.86 rows=1 width=32)
   ->  Gather  (cost=32916.62..32916.83 rows=2 width=32)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=31916.62..31916.63 rows=1 width=32)
               ->  Nested Loop  (cost=0.43..31916.25 rows=49 width=12)
                     ->  Parallel Seq Scan on part  (cost=0.00..7669.67 rows=203 width=30)
                           Filter: ((p_size >= 1) AND (((p_brand = 'Brand#22'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#34'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#33'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                     ->  Index Scan using l_pk on lineitem  (cost=0.43..119.43 rows=1 width=21)
                           Index Cond: (l_partkey = part.p_partkey)
                           Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '7'::numeric) AND (l_quantity <= '17'::numeric)) OR ((l_quantity >= '12'::numeric) AND (l_quantity <= '22'::numeric)) OR ((l_quantity >= '29'::numeric) AND (l_quantity <= '39'::numeric))) AND (((part.p_brand = 'Brand#22'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '7'::numeric) AND (l_quantity <= '17'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#34'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '12'::numeric) AND (l_quantity <= '22'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#33'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '29'::numeric) AND (l_quantity <= '39'::numeric) AND (part.p_size <= 15))))
(10 rows)

COMMIT;
COMMIT

Query 19 execution times in seconds: 0.149,0.150,0.138,0.143,0.149,0.147,0.146,0.153,0.143,0.146
Average execution time: 0.1464 seconds

BEGIN;
BEGIN
EXPLAIN
select
	s_name,
	s_address
from
	supplier,
	nation
where
	s_suppkey in (
		select
			ps_suppkey
		from
			partsupp
		where
			ps_partkey in (
				select
					p_partkey
				from
					part
				where
					p_name like 'papaya%'
			)
			and ps_availqty > (
				select
					0.5 * sum(l_quantity)
				from
					lineitem
				where
					l_partkey = ps_partkey
					and l_suppkey = ps_suppkey
					and l_shipdate >= '1993-01-01'
					and l_shipdate < cast(date '1993-01-01' + interval '1 year' as date)
			)
	)
	and s_nationkey = n_nationkey
	and n_name = 'ETHIOPIA'
order by
	s_name;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=88493.12..88493.39 rows=108 width=51)
   Sort Key: supplier.s_name
   ->  Hash Semi Join  (cost=88248.37..88489.47 rows=108 width=51)
         Hash Cond: (supplier.s_suppkey = partsupp.ps_suppkey)
         ->  Nested Loop  (cost=7.38..245.96 rows=400 width=55)
               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                     Filter: (n_name = 'ETHIOPIA'::bpchar)
               ->  Bitmap Heap Scan on supplier  (cost=7.38..240.65 rows=400 width=59)
                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                     ->  Bitmap Index Scan on s_nk  (cost=0.00..7.29 rows=400 width=0)
                           Index Cond: (s_nationkey = nation.n_nationkey)
         ->  Hash  (cost=88207.33..88207.33 rows=2693 width=4)
               ->  Nested Loop  (cost=0.42..88207.33 rows=2693 width=4)
                     ->  Seq Scan on part  (cost=0.00..6628.00 rows=2020 width=4)
                           Filter: ((p_name)::text ~~ 'papaya%'::text)
                     ->  Index Scan using ps_pk on partsupp  (cost=0.42..40.38 rows=1 width=8)
                           Index Cond: (ps_partkey = part.p_partkey)
                           Filter: ((ps_availqty)::numeric > (SubPlan 1))
                           SubPlan 1
                             ->  Aggregate  (cost=8.46..8.47 rows=1 width=32)
                                   ->  Index Scan using l_sk_pk on lineitem  (cost=0.43..8.46 rows=1 width=5)
                                         Index Cond: ((l_suppkey = partsupp.ps_suppkey) AND (l_partkey = partsupp.ps_partkey))
                                         Filter: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01'::date))
(23 rows)

COMMIT;
COMMIT

Query 20 execution times in seconds: 0.145,0.152,0.149,0.155,0.149,0.144,0.149,0.148,0.190,0.196
Average execution time: 0.1577 seconds

BEGIN;
BEGIN
EXPLAIN
select
	s_name,
	count(*) as numwait
from
	supplier,
	lineitem l1,
	orders,
	nation
where
	s_suppkey = l1.l_suppkey
	and o_orderkey = l1.l_orderkey
	and o_orderstatus = 'F'
	and l1.l_receiptdate > l1.l_commitdate
	and exists (
		select
			*
		from
			lineitem l2
		where
			l2.l_orderkey = l1.l_orderkey
			and l2.l_suppkey <> l1.l_suppkey
	)
	and not exists (
		select
			*
		from
			lineitem l3
		where
			l3.l_orderkey = l1.l_orderkey
			and l3.l_suppkey <> l1.l_suppkey
			and l3.l_receiptdate > l3.l_commitdate
	)
	and s_nationkey = n_nationkey
	and n_name = 'KENYA'
group by
	s_name
order by
	numwait desc,
	s_name
LIMIT 100;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=72602.10..72602.10 rows=1 width=34)
   ->  Sort  (cost=72602.10..72602.10 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=72602.07..72602.09 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=72602.07..72602.07 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=27063.33..72602.06 rows=1 width=26)
                           Join Filter: (orders.o_orderkey = l2.l_orderkey)
                           ->  Gather  (cost=27062.90..72600.86 rows=1 width=38)
                                 Workers Planned: 2
                                 ->  Nested Loop Anti Join  (cost=26062.90..71600.76 rows=1 width=38)
                                       ->  Hash Join  (cost=26062.47..61307.52 rows=16147 width=38)
                                             Hash Cond: (orders.o_orderkey = l1.l_orderkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..33948.50 rows=302688 width=4)
                                                   Filter: (o_orderstatus = 'F'::bpchar)
                                             ->  Hash  (cost=25062.27..25062.27 rows=80016 width=34)
                                                   ->  Nested Loop  (cost=0.43..25062.27 rows=80016 width=34)
                                                         ->  Nested Loop  (cost=0.00..449.31 rows=400 width=30)
                                                               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'KENYA'::bpchar)
                                                               ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=34)
                                                         ->  Index Scan using l_sk on lineitem l1  (cost=0.43..59.53 rows=200 width=8)
                                                               Index Cond: (l_suppkey = supplier.s_suppkey)
                                                               Filter: (l_receiptdate > l_commitdate)
                                       ->  Index Scan using l_ok on lineitem l3  (cost=0.43..1.04 rows=5 width=8)
                                             Index Cond: (l_orderkey = l1.l_orderkey)
                                             Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                           ->  Index Scan using l_ok on lineitem l2  (cost=0.43..1.00 rows=16 width=8)
                                 Index Cond: (l_orderkey = l1.l_orderkey)
                                 Filter: (l_suppkey <> l1.l_suppkey)
(32 rows)

COMMIT;
COMMIT

Query 21 execution times in seconds: 0.145,0.149,0.154,0.153,0.154,0.147,0.148,0.152,0.149,0.147
Average execution time: 0.1498 seconds

BEGIN;
BEGIN
EXPLAIN
select
	cntrycode,
	count(*) as numcust,
	sum(c_acctbal) as totacctbal
from
	(
		select
			substring(c_phone from 1 for 2) as cntrycode,
			c_acctbal
		from
			customer
		where
			substring(c_phone from 1 for 2) in
				('24', '16', '28', '19', '27', '18', '31')
			and c_acctbal > (
				select
					avg(c_acctbal)
				from
					customer
				where
					c_acctbal > 0.00
					and substring(c_phone from 1 for 2) in
						('24', '16', '28', '19', '27', '18', '31')
			)
			and not exists (
				select
					*
				from
					orders
				where
					o_custkey = c_custkey
			)
	) as vip
group by
	cntrycode
order by
	cntrycode;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=12836.96..12936.60 rows=747 width=72)
   Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
   InitPlan 1
     ->  Finalize Aggregate  (cost=6245.81..6245.82 rows=1 width=32)
           ->  Gather  (cost=6245.59..6245.80 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5245.59..5245.60 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5240.62 rows=1983 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{24,16,28,19,27,18,31}'::text[])))
   ->  Gather Merge  (cost=6591.15..6671.49 rows=622 width=72)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=5591.12..5599.67 rows=311 width=72)
               Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Sort  (cost=5591.12..5591.90 rows=311 width=38)
                     Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                     ->  Nested Loop Anti Join  (cost=928.28..5578.25 rows=311 width=38)
                           ->  Parallel Bitmap Heap Scan on customer  (cost=927.86..5074.73 rows=729 width=26)
                                 Recheck Cond: (c_acctbal > (InitPlan 1).col1)
                                 Filter: (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{24,16,28,19,27,18,31}'::text[]))
                                 ->  Bitmap Index Scan on c_acb  (cost=0.00..927.42 rows=50000 width=0)
                                       Index Cond: (c_acctbal > (InitPlan 1).col1)
                           ->  Index Only Scan using o_ck on orders  (cost=0.43..3.30 rows=17 width=4)
                                 Index Cond: (o_custkey = customer.c_custkey)
(23 rows)

COMMIT;
COMMIT

Query 22 execution times in seconds: 0.148,0.146,0.142,0.146,0.146,0.144,0.147,0.139,0.140,0.141
Average execution time: 0.1439 seconds


