=== Experiment: default_index ===
INDEX_ALL=0
INDEX_NUMBERS=0
INDEX_DATES=0
INDEX_TEXT=0
INDEX_DEFAULT=1

[Info] Running drop_indexes.sh
[Info] Dropping date indexes
[Info] Dropping numbers indexes
[Info] Dropping text indexes
[Info] Running create_indexes.sh
[Info] Creating default schema indexes

[Info] Running queries(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22) for default_index
BEGIN;
BEGIN
EXPLAIN
select
	l_returnflag,
	l_linestatus,
	sum(l_quantity) as sum_qty,
	sum(l_extendedprice) as sum_base_price,
	sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
	avg(l_quantity) as avg_qty,
	avg(l_extendedprice) as avg_price,
	avg(l_discount) as avg_disc,
	count(*) as count_order
from
	lineitem
where
	l_shipdate <= date '1998-12-01' - interval '74 days'
group by
	l_returnflag,
	l_linestatus
order by
	l_returnflag,
	l_linestatus;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=313263.36..326297.34 rows=40000 width=248)
   Group Key: l_returnflag, l_linestatus
   ->  Gather Merge  (cost=313263.36..322597.34 rows=80000 width=248)
         Workers Planned: 2
         ->  Sort  (cost=312263.33..312363.33 rows=40000 width=248)
               Sort Key: l_returnflag, l_linestatus
               ->  Partial HashAggregate  (cost=280863.22..304554.29 rows=40000 width=248)
                     Group Key: l_returnflag, l_linestatus
                     Planned Partitions: 8
                     ->  Parallel Seq Scan on lineitem  (cost=0.00..143856.33 rows=833502 width=88)
                           Filter: (l_shipdate <= '1998-09-18 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 9
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(14 rows)

COMMIT;
COMMIT

Query 1 execution times in seconds: 0.194,0.184,0.193,0.180,0.188,0.167,0.186,0.183,0.188,0.183
Average execution time: 0.1846 seconds

BEGIN;
BEGIN
EXPLAIN
select
	s_acctbal,
	s_name,
	n_name,
	p_partkey,
	p_mfgr,
	s_address,
	s_phone,
	s_comment
from
	part,
	supplier,
	partsupp,
	nation,
	region
where
	p_partkey = ps_partkey
	and s_suppkey = ps_suppkey
	and p_size = 48
	and p_type like '%NICKEL'
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'EUROPE'
	and ps_supplycost = (
		select
			min(ps_supplycost)
		from
			partsupp,
			supplier,
			nation,
			region
		where
			p_partkey = ps_partkey
			and s_suppkey = ps_suppkey
			and s_nationkey = n_nationkey
			and n_regionkey = r_regionkey
			and r_name = 'EUROPE'
	)
order by
	s_acctbal desc,
	n_name,
	s_name,
	p_partkey
LIMIT 100;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=58715.31..58715.32 rows=1 width=270)
   ->  Sort  (cost=58715.31..58715.32 rows=1 width=270)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Hash Join  (cost=29185.92..58715.30 rows=1 width=270)
               Hash Cond: ((part.p_partkey = partsupp.ps_partkey) AND ((SubPlan 1) = partsupp.ps_supplycost))
               ->  Gather  (cost=1000.00..6463.50 rows=855 width=30)
                     Workers Planned: 2
                     ->  Parallel Seq Scan on part  (cost=0.00..5378.00 rows=356 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 48))
               ->  Hash  (cost=20316.92..20316.92 rows=160000 width=250)
                     ->  Nested Loop  (cost=1.99..20316.92 rows=160000 width=250)
                           ->  Nested Loop  (cost=1.56..481.32 rows=2000 width=244)
                                 Join Filter: (nation.n_regionkey = region.r_regionkey)
                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                       Filter: (r_name = 'EUROPE'::bpchar)
                                 ->  Hash Join  (cost=1.56..355.26 rows=10000 width=248)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=144)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=112)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=112)
                           ->  Index Scan using ps_sk on partsupp  (cost=0.42..9.12 rows=80 width=14)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=43.45..43.46 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..43.45 rows=1 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'EUROPE'::bpchar)
                             ->  Nested Loop  (cost=0.85..42.33 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..41.71 rows=4 width=10)
                                         ->  Index Scan using ps_pk on partsupp partsupp_1  (cost=0.42..8.50 rows=4 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using s_sk on supplier supplier_1  (cost=0.29..8.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using n_nk on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
(36 rows)

COMMIT;
COMMIT

Query 2 execution times in seconds: 0.146,0.150,0.152,0.145,0.151,0.148,0.145,0.155,0.146,0.146
Average execution time: 0.1484 seconds

BEGIN;
BEGIN
EXPLAIN
select
	l_orderkey,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	o_orderdate,
	o_shippriority
from
	customer,
	orders,
	lineitem
where
	c_mktsegment = 'FURNITURE'
	and c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate < date '1995-03-25'
	and l_shipdate > date '1995-03-25'
group by
	l_orderkey,
	o_orderdate,
	o_shippriority
order by
	revenue desc,
	o_orderdate
LIMIT 10;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=226569.60..226569.62 rows=10 width=44)
   ->  Sort  (cost=226569.60..227047.52 rows=191168 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=197280.15..222438.53 rows=191168 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=197280.15..218057.60 rows=159306 width=44)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=196280.12..198669.71 rows=79653 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=196280.12..196479.25 rows=79653 width=48)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Parallel Hash Join  (cost=40028.44..187342.29 rows=79653 width=48)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..143856.33 rows=833502 width=40)
                                             Filter: (l_shipdate > '1995-03-25'::date)
                                       ->  Parallel Hash  (cost=39281.84..39281.84 rows=59728 width=12)
                                             ->  Parallel Hash Join  (cost=4534.61..39281.84 rows=59728 width=12)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..33948.50 rows=304270 width=16)
                                                         Filter: (o_orderdate < '1995-03-25'::date)
                                                   ->  Parallel Hash  (cost=4381.25..4381.25 rows=12269 width=4)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..4381.25 rows=12269 width=4)
                                                               Filter: (c_mktsegment = 'FURNITURE'::bpchar)
 JIT:
   Functions: 34
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(26 rows)

COMMIT;
COMMIT

Query 3 execution times in seconds: 0.196,0.191,0.197,0.199,0.190,0.179,0.192,0.193,0.194,0.192
Average execution time: 0.1923 seconds

BEGIN;
BEGIN
EXPLAIN
select
	o_orderpriority,
	count(*) as order_count
from
	orders
where
	o_orderdate >= date '1997-02-01'
	and o_orderdate < cast(date '1997-02-01' + interval '3 month' as date)
	and exists (
		select
			*
		from
			lineitem
		where
			l_orderkey = o_orderkey
			and l_commitdate < l_receiptdate
	)
group by
	o_orderpriority
order by
	o_orderpriority;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Sort  (cost=194443.00..194443.01 rows=5 width=24)
   Sort Key: orders.o_orderpriority
   ->  HashAggregate  (cost=194442.89..194442.94 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop  (cost=192616.63..194293.20 rows=29938 width=16)
               ->  HashAggregate  (cost=192616.20..192618.20 rows=200 width=4)
                     Group Key: lineitem.l_orderkey
                     ->  Seq Scan on lineitem  (cost=0.00..187615.19 rows=2000405 width=4)
                           Filter: (l_commitdate < l_receiptdate)
               ->  Index Scan using o_ok on orders  (cost=0.43..8.37 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
                     Filter: ((o_orderdate >= '1997-02-01'::date) AND (o_orderdate < '1997-05-01'::date))
 JIT:
   Functions: 13
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(15 rows)

COMMIT;
COMMIT

Query 4 execution times in seconds: 0.186,0.185,0.191,0.183,0.190,0.188,0.188,0.180,0.180,0.191
Average execution time: 0.1862 seconds

BEGIN;
BEGIN
EXPLAIN
select
	n_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue
from
	customer,
	orders,
	lineitem,
	supplier,
	nation,
	region
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and l_suppkey = s_suppkey
	and c_nationkey = s_nationkey
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'ASIA'
	and o_orderdate >= date '1996-01-01'
	and o_orderdate < date '1996-01-01' + interval '1 year'
group by
	n_name
order by
	revenue desc;
                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=173924.28..173924.34 rows=25 width=136)
   Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
   ->  Finalize GroupAggregate  (cost=173879.50..173923.70 rows=25 width=136)
         Group Key: nation.n_name
         ->  Gather Merge  (cost=173879.50..173923.01 rows=50 width=136)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=172879.48..172917.22 rows=25 width=136)
                     Group Key: nation.n_name
                     ->  Sort  (cost=172879.48..172886.96 rows=2994 width=140)
                           Sort Key: nation.n_name
                           ->  Hash Join  (cost=25019.73..172706.61 rows=2994 width=140)
                                 Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                 ->  Parallel Hash Join  (cost=24546.73..171840.60 rows=74859 width=152)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..137605.06 rows=2500506 width=44)
                                       ->  Parallel Hash  (cost=24312.84..24312.84 rows=18711 width=116)
                                             ->  Nested Loop  (cost=2.89..24312.84 rows=18711 width=116)
                                                   ->  Hash Join  (cost=2.46..4586.84 rows=12500 width=116)
                                                         Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..4225.00 rows=62500 width=8)
                                                         ->  Hash  (cost=2.40..2.40 rows=5 width=108)
                                                               ->  Hash Join  (cost=1.07..2.40 rows=5 width=108)
                                                                     Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=112)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'ASIA'::bpchar)
                                                   ->  Index Scan using o_ck on orders  (cost=0.43..1.55 rows=3 width=8)
                                                         Index Cond: (o_custkey = customer.c_custkey)
                                                         Filter: ((o_orderdate >= '1996-01-01'::date) AND (o_orderdate < '1997-01-01 00:00:00'::timestamp without time zone))
                                 ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
 JIT:
   Functions: 53
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(35 rows)

COMMIT;
COMMIT

Query 5 execution times in seconds: 0.202,0.205,0.202,0.203,0.202,0.192,0.181,0.206,0.188,0.206
Average execution time: 0.1987 seconds

BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice * l_discount) as revenue
from
	lineitem
where
	l_shipdate >= date '1996-01-01'
	and l_shipdate < cast(date '1996-01-01' + interval '1 year' as date)
	and l_discount between 0.04 - 0.01 and 0.04 + 0.01
	and l_quantity < 25;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Aggregate  (cost=68478.28..68478.29 rows=1 width=32)
   ->  Bitmap Heap Scan on lineitem  (cost=408.50..68478.03 rows=50 width=36)
         Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
         Filter: ((l_discount >= 0.03) AND (l_discount <= 0.05) AND (l_quantity < '25'::numeric))
         ->  Bitmap Index Scan on l_sd  (cost=0.00..408.49 rows=30006 width=0)
               Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
(6 rows)

COMMIT;
COMMIT

Query 6 execution times in seconds: 0.137,0.130,0.136,0.137,0.143,0.131,0.140,0.137,0.138,0.142
Average execution time: 0.1371 seconds

BEGIN;
BEGIN
EXPLAIN
select
	supp_nation,
	cust_nation,
	l_year,
	sum(volume) as revenue
from
	(
		select
			n1.n_name as supp_nation,
			n2.n_name as cust_nation,
			extract(year from l_shipdate) as l_year,
			l_extendedprice * (1 - l_discount) as volume
		from
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2
		where
			s_suppkey = l_suppkey
			and o_orderkey = l_orderkey
			and c_custkey = o_custkey
			and s_nationkey = n1.n_nationkey
			and c_nationkey = n2.n_nationkey
			and (
				(n1.n_name = 'PERU' and n2.n_name = 'UNITED STATES')
				or (n1.n_name = 'UNITED STATES' and n2.n_name = 'PERU')
			)
			and l_shipdate between date '1995-01-01' and date '1996-12-31'
	) as shipping
group by
	supp_nation,
	cust_nation,
	l_year
order by
	supp_nation,
	cust_nation,
	l_year;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=73408.31..73421.92 rows=100 width=272)
   Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
   ->  Gather Merge  (cost=73408.31..73419.37 rows=84 width=272)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=72408.29..72409.65 rows=42 width=272)
               Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Sort  (cost=72408.29..72408.39 rows=42 width=276)
                     Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                     ->  Hash Join  (cost=783.34..72407.15 rows=42 width=276)
                           Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                           Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'UNITED STATES'::bpchar)) OR ((n1.n_name = 'UNITED STATES'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                           ->  Nested Loop  (cost=781.94..72403.02 rows=1000 width=148)
                                 ->  Nested Loop  (cost=781.52..71954.82 rows=1000 width=148)
                                       ->  Hash Join  (cost=781.09..68419.90 rows=1000 width=148)
                                             Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                             ->  Parallel Bitmap Heap Scan on lineitem  (cost=415.99..67997.92 rows=12502 width=48)
                                                   Recheck Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                                   ->  Bitmap Index Scan on l_sd  (cost=0.00..408.49 rows=30006 width=0)
                                                         Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                             ->  Hash  (cost=355.10..355.10 rows=800 width=108)
                                                   ->  Hash Join  (cost=1.40..355.10 rows=800 width=108)
                                                         Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                         ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                                         ->  Hash  (cost=1.38..1.38 rows=2 width=108)
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=108)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'UNITED STATES'::bpchar))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..3.53 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
                                 ->  Index Scan using c_ck on customer  (cost=0.42..0.45 rows=1 width=8)
                                       Index Cond: (c_custkey = orders.o_custkey)
                           ->  Hash  (cost=1.38..1.38 rows=2 width=108)
                                 ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=108)
                                       Filter: ((n_name = 'UNITED STATES'::bpchar) OR (n_name = 'PERU'::bpchar))
(33 rows)

COMMIT;
COMMIT

Query 7 execution times in seconds: 0.145,0.146,0.147,0.145,0.151,0.146,0.145,0.148,0.146,0.147
Average execution time: 0.1466 seconds

BEGIN;
BEGIN
EXPLAIN
select
	o_year,
	sum(case
		when nation = 'INDIA' then volume
		else 0
	end) / sum(volume) as mkt_share
from
	(
		select
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) as volume,
			n2.n_name as nation
		from
			part,
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2,
			region
		where
			p_partkey = l_partkey
			and s_suppkey = l_suppkey
			and l_orderkey = o_orderkey
			and o_custkey = c_custkey
			and c_nationkey = n1.n_nationkey
			and n1.n_regionkey = r_regionkey
			and r_name = 'ASIA'
			and s_nationkey = n2.n_nationkey
			and o_orderdate between date '1995-01-01' and date '1996-12-31'
			and p_type = 'STANDARD POLISHED BRASS'
	) as all_nations
group by
	o_year
order by
	o_year;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=160931.51..161279.62 rows=2406 width=64)
   Group Key: (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=160931.51..161206.15 rows=2028 width=96)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=159931.48..159972.04 rows=1014 width=96)
               Group Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=159931.48..159934.02 rows=1014 width=172)
                     Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                     ->  Hash Join  (cost=5181.73..159880.86 rows=1014 width=172)
                           Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                           ->  Nested Loop  (cost=5180.16..159873.64 rows=1014 width=44)
                                 ->  Hash Join  (cost=5179.88..159566.74 rows=1014 width=44)
                                       Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                       ->  Nested Loop  (cost=5177.41..159535.12 rows=5069 width=48)
                                             ->  Nested Loop  (cost=5176.99..157139.97 rows=5069 width=48)
                                                   ->  Parallel Hash Join  (cost=5176.57..149345.60 rows=16578 width=44)
                                                         Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                                         ->  Parallel Seq Scan on lineitem  (cost=0.00..137605.06 rows=2500506 width=48)
                                                         ->  Parallel Hash  (cost=5169.67..5169.67 rows=552 width=4)
                                                               ->  Parallel Seq Scan on part  (cost=0.00..5169.67 rows=552 width=4)
                                                                     Filter: ((p_type)::text = 'STANDARD POLISHED BRASS'::text)
                                                   ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=12)
                                                         Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Index Scan using c_ck on customer  (cost=0.42..0.47 rows=1 width=8)
                                                   Index Cond: (c_custkey = orders.o_custkey)
                                       ->  Hash  (cost=2.40..2.40 rows=5 width=4)
                                             ->  Hash Join  (cost=1.07..2.40 rows=5 width=4)
                                                   Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                   ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                         ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                               Filter: (r_name = 'ASIA'::bpchar)
                                 ->  Index Scan using s_sk on supplier  (cost=0.29..0.30 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                 ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=108)
 JIT:
   Functions: 59
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(40 rows)

COMMIT;
COMMIT

Query 8 execution times in seconds: 0.206,0.203,0.199,0.197,0.207,0.206,0.205,0.200,0.202,0.191
Average execution time: 0.2016 seconds

BEGIN;
BEGIN
EXPLAIN
select
	nation,
	o_year,
	sum(amount) as sum_profit
from
	(
		select
			n_name as nation,
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount
		from
			part,
			supplier,
			lineitem,
			partsupp,
			orders,
			nation
		where
			s_suppkey = l_suppkey
			and ps_suppkey = l_suppkey
			and ps_partkey = l_partkey
			and p_partkey = l_partkey
			and o_orderkey = l_orderkey
			and s_nationkey = n_nationkey
			and p_name like '%white%'
	) as profit
group by
	nation,
	o_year
order by
	nation,
	o_year desc;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=161786.88..180700.64 rows=60150 width=168)
   Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=161786.88..178595.39 rows=120300 width=168)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=160786.86..163709.77 rows=60150 width=168)
               Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=160786.86..161039.44 rows=101033 width=196)
                     Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                     ->  Hash Join  (cost=450.85..142718.26 rows=101033 width=196)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Nested Loop  (cost=449.29..142153.94 rows=101033 width=68)
                                 ->  Hash Join  (cost=448.86..95157.11 rows=101033 width=68)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Nested Loop  (cost=0.86..94443.78 rows=101033 width=72)
                                             ->  Nested Loop  (cost=0.42..19929.78 rows=13468 width=18)
                                                   ->  Parallel Seq Scan on part  (cost=0.00..5169.67 rows=3367 width=4)
                                                         Filter: ((p_name)::text ~~ '%white%'::text)
                                                   ->  Index Scan using ps_pk on partsupp  (cost=0.42..4.34 rows=4 width=14)
                                                         Index Cond: (ps_partkey = part.p_partkey)
                                             ->  Index Scan using l_sk_pk on lineitem  (cost=0.43..4.03 rows=150 width=66)
                                                   Index Cond: ((l_suppkey = partsupp.ps_suppkey) AND (l_partkey = partsupp.ps_partkey))
                                       ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=8)
                                       Index Cond: (o_orderkey = lineitem.l_orderkey)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=108)
 JIT:
   Functions: 39
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(30 rows)

COMMIT;
COMMIT

Query 9 execution times in seconds: 0.202,0.211,0.193,0.208,0.199,0.211,0.191,0.194,0.192,0.203
Average execution time: 0.2004 seconds

BEGIN;
BEGIN
EXPLAIN
select
	c_custkey,
	c_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	c_acctbal,
	n_name,
	c_address,
	c_phone,
	c_comment
from
	customer,
	orders,
	lineitem,
	nation
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate >= date '1993-07-01'
	and o_orderdate < cast(date '1993-07-01' + interval '3 month' as date)
	and l_returnflag = 'R'
	and c_nationkey = n_nationkey
group by
	c_custkey,
	c_name,
	c_acctbal,
	c_phone,
	n_name,
	c_address,
	c_comment
order by
	revenue desc
LIMIT 20;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=173034.94..173034.99 rows=20 width=279)
   ->  Sort  (cost=173034.94..173037.83 rows=1155 width=279)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=172855.88..173004.20 rows=1155 width=279)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=172855.88..172980.15 rows=962 width=279)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=171855.86..171869.08 rows=481 width=279)
                           Group Key: customer.c_custkey, nation.n_name
                           ->  Sort  (cost=171855.86..171857.06 rows=481 width=283)
                                 Sort Key: customer.c_custkey, nation.n_name
                                 ->  Hash Join  (cost=27600.06..171834.43 rows=481 width=283)
                                       Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                       ->  Nested Loop  (cost=27598.50..171831.39 rows=481 width=183)
                                             ->  Parallel Hash Join  (cost=27598.08..171487.22 rows=481 width=40)
                                                   Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                                   ->  Parallel Seq Scan on lineitem  (cost=0.00..143856.33 rows=12502 width=40)
                                                         Filter: (l_returnflag = 'R'::bpchar)
                                                   ->  Parallel Hash  (cost=27297.30..27297.30 rows=24062 width=8)
                                                         ->  Parallel Bitmap Heap Scan on orders  (cost=800.37..27297.30 rows=24062 width=8)
                                                               Recheck Cond: ((o_orderdate >= '1993-07-01'::date) AND (o_orderdate < '1993-10-01'::date))
                                                               ->  Bitmap Index Scan on o_od  (cost=0.00..785.93 rows=57750 width=0)
                                                                     Index Cond: ((o_orderdate >= '1993-07-01'::date) AND (o_orderdate < '1993-10-01'::date))
                                             ->  Index Scan using c_ck on customer  (cost=0.42..0.72 rows=1 width=147)
                                                   Index Cond: (c_custkey = orders.o_custkey)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=108)
 JIT:
   Functions: 36
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(30 rows)

COMMIT;
COMMIT

Query 10 execution times in seconds: 0.199,0.196,0.202,0.305,0.171,0.163,0.187,0.190,0.193,0.187
Average execution time: 0.1993 seconds

BEGIN;
BEGIN
EXPLAIN
select
	ps_partkey,
	sum(ps_supplycost * ps_availqty) as value
from
	partsupp,
	supplier,
	nation
where
	ps_suppkey = s_suppkey
	and s_nationkey = n_nationkey
	and n_name = 'ARGENTINA'
group by
	ps_partkey having
		sum(ps_supplycost * ps_availqty) > (
			select
				sum(ps_supplycost * ps_availqty) *         inf
			from
				partsupp,
				supplier,
				nation
			where
				ps_suppkey = s_suppkey
				and s_nationkey = n_nationkey
				and n_name = 'ARGENTINA'
		)
order by
	value desc;
ERROR:  column "inf" does not exist
LINE 17:     sum(ps_supplycost * ps_availqty) *         inf
                                                        ^

Query 11 execution times in seconds: 0.139,0.136,0.139,0.134,0.139,0.143,0.135,0.139,0.136,0.140
Average execution time: 0.1380 seconds

BEGIN;
BEGIN
EXPLAIN
select
	l_shipmode,
	sum(case
		when o_orderpriority = '1-URGENT'
			or o_orderpriority = '2-HIGH'
			then 1
		else 0
	end) as high_line_count,
	sum(case
		when o_orderpriority <> '1-URGENT'
			and o_orderpriority <> '2-HIGH'
			then 1
		else 0
	end) as low_line_count
from
	orders,
	lineitem
where
	o_orderkey = l_orderkey
	and l_shipmode in ('MAIL', 'TRUCK')
	and l_commitdate < l_receiptdate
	and l_shipdate < l_commitdate
	and l_receiptdate >= date '1995-01-01'
	and l_receiptdate < date '1995-01-01' + interval '1 year'
group by
	l_shipmode
order by
	l_shipmode;
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=68757.54..68758.50 rows=30 width=60)
   Group Key: lineitem.l_shipmode
   ->  Sort  (cost=68757.54..68757.63 rows=33 width=60)
         Sort Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=408.93..68756.71 rows=33 width=60)
               ->  Bitmap Heap Scan on lineitem  (cost=408.50..68478.03 rows=33 width=48)
                     Recheck Cond: ((l_receiptdate >= '1995-01-01'::date) AND (l_receiptdate < '1996-01-01 00:00:00'::timestamp without time zone))
                     Filter: ((l_shipmode = ANY ('{MAIL,TRUCK}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate))
                     ->  Bitmap Index Scan on l_rd  (cost=0.00..408.49 rows=30006 width=0)
                           Index Cond: ((l_receiptdate >= '1995-01-01'::date) AND (l_receiptdate < '1996-01-01 00:00:00'::timestamp without time zone))
               ->  Index Scan using o_ok on orders  (cost=0.43..8.45 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

COMMIT;
COMMIT

Query 12 execution times in seconds: 0.145,0.145,0.140,0.139,0.139,0.136,0.139,0.139,0.139,0.139
Average execution time: 0.1400 seconds

BEGIN;
BEGIN
EXPLAIN
select
	c_count,
	count(*) as custdist
from
	(
		select
			c_custkey,
			count(o_orderkey)
		from
			customer left outer join orders on
				c_custkey = o_custkey
				and o_comment not like '%unusual%accounts%'
		group by
			c_custkey
	) as c_orders (c_custkey, c_count)
group by
	c_count
order by
	custdist desc,
	c_count desc;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=136411.42..136411.92 rows=200 width=16)
   Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
   ->  HashAggregate  (cost=136401.78..136403.78 rows=200 width=16)
         Group Key: count(orders.o_orderkey)
         ->  Finalize GroupAggregate  (cost=96149.34..134151.78 rows=150000 width=12)
               Group Key: customer.c_custkey
               ->  Gather Merge  (cost=96149.34..131151.78 rows=300000 width=12)
                     Workers Planned: 2
                     ->  Sort  (cost=95149.31..95524.31 rows=150000 width=12)
                           Sort Key: customer.c_custkey
                           ->  Partial HashAggregate  (cost=73453.02..79687.86 rows=150000 width=12)
                                 Group Key: customer.c_custkey
                                 Planned Partitions: 4
                                 ->  Parallel Hash Right Join  (cost=3822.69..39362.14 rows=606060 width=8)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..33948.50 rows=606060 width=8)
                                             Filter: ((o_comment)::text !~~ '%unusual%accounts%'::text)
                                       ->  Parallel Hash  (cost=3041.44..3041.44 rows=62500 width=4)
                                             ->  Parallel Index Only Scan using c_ck on customer  (cost=0.42..3041.44 rows=62500 width=4)
 JIT:
   Functions: 18
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(22 rows)

COMMIT;
COMMIT

Query 13 execution times in seconds: 0.186,0.171,0.183,0.191,0.190,0.187,0.187,0.182,0.187,0.191
Average execution time: 0.1855 seconds

BEGIN;
BEGIN
EXPLAIN
select
	100.00 * sum(case
		when p_type like 'PROMO%'
			then l_extendedprice * (1 - l_discount)
		else 0
	end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue
from
	lineitem,
	part
where
	l_partkey = p_partkey
	and l_shipdate >= date '1996-05-01'
	and l_shipdate < cast(date '1996-05-01' + interval '1 month' as date);
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=75252.76..75252.78 rows=1 width=32)
   ->  Gather  (cost=75252.53..75252.74 rows=2 width=64)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=74252.53..74252.54 rows=1 width=64)
               ->  Parallel Hash Join  (cost=6418.99..74033.74 rows=12502 width=57)
                     Hash Cond: (lineitem.l_partkey = part.p_partkey)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=415.99..67997.92 rows=12502 width=40)
                           Recheck Cond: ((l_shipdate >= '1996-05-01'::date) AND (l_shipdate < '1996-06-01'::date))
                           ->  Bitmap Index Scan on l_sd  (cost=0.00..408.49 rows=30006 width=0)
                                 Index Cond: ((l_shipdate >= '1996-05-01'::date) AND (l_shipdate < '1996-06-01'::date))
                     ->  Parallel Hash  (cost=4961.33..4961.33 rows=83333 width=25)
                           ->  Parallel Seq Scan on part  (cost=0.00..4961.33 rows=83333 width=25)
(12 rows)

COMMIT;
COMMIT

Query 14 execution times in seconds: 0.142,0.141,0.142,0.139,0.138,0.143,0.138,0.146,0.138,0.129
Average execution time: 0.1396 seconds

BEGIN;
BEGIN
create or replace view revenue0 (supplier_no, total_revenue) as
	select
		l_suppkey,
		sum(l_extendedprice * (1 - l_discount))
	from
		lineitem
	where
		l_shipdate >= '1995-05-01'
		and l_shipdate < date'1995-05-01' + interval '90 days'
	group by
		l_suppkey;
CREATE VIEW
EXPLAIN
select
	s_suppkey,
	s_name,
	s_address,
	s_phone,
	total_revenue
from
	supplier,
	revenue0
where
	s_suppkey = supplier_no
	and total_revenue = (
		select
			max(total_revenue)
		from
			revenue0
	)
order by
	s_suppkey;
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Merge Join  (cost=137129.38..137650.89 rows=1 width=103)
   Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
   InitPlan 1
     ->  Aggregate  (cost=68565.53..68565.54 rows=1 width=32)
           ->  HashAggregate  (cost=68560.53..68563.03 rows=200 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=415.99..68260.47 rows=30006 width=40)
                       Recheck Cond: ((l_shipdate >= '1995-05-01'::date) AND (l_shipdate < '1995-07-30 00:00:00'::timestamp without time zone))
                       ->  Bitmap Index Scan on l_sd  (cost=0.00..408.49 rows=30006 width=0)
                             Index Cond: ((l_shipdate >= '1995-05-01'::date) AND (l_shipdate < '1995-07-30 00:00:00'::timestamp without time zone))
   ->  Index Scan using s_sk on supplier  (cost=0.29..496.78 rows=10000 width=71)
   ->  Sort  (cost=68563.55..68563.56 rows=1 width=36)
         Sort Key: revenue0.supplier_no
         ->  Subquery Scan on revenue0  (cost=68560.53..68563.54 rows=1 width=36)
               ->  HashAggregate  (cost=68560.53..68563.53 rows=1 width=36)
                     Group Key: lineitem.l_suppkey
                     Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
                     ->  Bitmap Heap Scan on lineitem  (cost=415.99..68260.47 rows=30006 width=40)
                           Recheck Cond: ((l_shipdate >= '1995-05-01'::date) AND (l_shipdate < '1995-07-30 00:00:00'::timestamp without time zone))
                           ->  Bitmap Index Scan on l_sd  (cost=0.00..408.49 rows=30006 width=0)
                                 Index Cond: ((l_shipdate >= '1995-05-01'::date) AND (l_shipdate < '1995-07-30 00:00:00'::timestamp without time zone))
 JIT:
   Functions: 23
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(24 rows)

drop view revenue0;
DROP VIEW
COMMIT;
COMMIT

Query 15 execution times in seconds: 0.192,0.210,0.197,0.199,0.199,0.205,0.188,0.193,0.184,0.204
Average execution time: 0.1971 seconds

BEGIN;
BEGIN
EXPLAIN
select
	p_brand,
	p_type,
	p_size,
	count(distinct ps_suppkey) as supplier_cnt
from
	partsupp,
	part
where
	p_partkey = ps_partkey
	and p_brand <> 'Brand#22'
	and p_type not like 'SMALL BRUSHED%'
	and p_size in (4, 21, 49, 50, 14, 38, 32, 27)
	and ps_suppkey not in (
		select
			s_suppkey
		from
			supplier
		where
			s_comment like '%Customer%Complaints%'
	)
group by
	p_brand,
	p_type,
	p_size
order by
	supplier_cnt desc,
	p_brand,
	p_type,
	p_size;
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=35569.19..35608.77 rows=15830 width=44)
   Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
   ->  GroupAggregate  (cost=26965.85..34465.02 rows=15830 width=44)
         Group Key: part.p_brand, part.p_type, part.p_size
         ->  Gather Merge  (cost=26965.85..33726.26 rows=58046 width=40)
               Workers Planned: 2
               ->  Sort  (cost=25965.82..26026.29 rows=24186 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Parallel Hash Join  (cost=6710.92..24204.86 rows=24186 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Parallel Index Only Scan using ps_pk_sk on partsupp  (cost=348.43..17404.85 rows=166667 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Parallel Hash  (cost=6211.33..6211.33 rows=12093 width=40)
                                 ->  Parallel Seq Scan on part  (cost=0.00..6211.33 rows=12093 width=40)
                                       Filter: ((p_brand <> 'Brand#22'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{4,21,49,50,14,38,32,27}'::integer[])))
(18 rows)

COMMIT;
COMMIT

Query 16 execution times in seconds: 0.148,0.144,0.133,0.144,0.143,0.134,0.131,0.133,0.143,0.140
Average execution time: 0.1393 seconds

BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice) / 7.0 as avg_yearly
from
	lineitem,
	part
where
	p_partkey = l_partkey
	and p_brand = 'Brand#24'
	and p_container = 'SM PKG'
	and l_quantity < (
		select
			0.2 * avg(l_quantity)
		from
			lineitem
		where
			l_partkey = p_partkey
	);
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Aggregate  (cost=876665.58..876665.59 rows=1 width=32)
   ->  Hash Join  (cost=6400.39..876660.60 rows=1990 width=18)
         Hash Cond: (lineitem.l_partkey = part.p_partkey)
         Join Filter: (lineitem.l_quantity < (SubPlan 1))
         ->  Seq Scan on lineitem  (cost=0.00..172612.15 rows=6001215 width=40)
         ->  Hash  (cost=6397.90..6397.90 rows=199 width=4)
               ->  Gather  (cost=1000.00..6397.90 rows=199 width=4)
                     Workers Planned: 2
                     ->  Parallel Seq Scan on part  (cost=0.00..5378.00 rows=83 width=4)
                           Filter: ((p_brand = 'Brand#24'::bpchar) AND (p_container = 'SM PKG'::bpchar))
         SubPlan 1
           ->  Aggregate  (cost=68189.46..68189.47 rows=1 width=32)
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=344.98..68114.44 rows=30006 width=18)
                       Recheck Cond: (l_partkey = part.p_partkey)
                       ->  Bitmap Index Scan on l_pk  (cost=0.00..337.48 rows=30006 width=0)
                             Index Cond: (l_partkey = part.p_partkey)
 JIT:
   Functions: 24
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(19 rows)

COMMIT;
COMMIT

Query 17 execution times in seconds: 0.192,0.185,0.194,0.178,0.174,0.191,0.174,0.175,0.193,0.178
Average execution time: 0.1834 seconds

BEGIN;
BEGIN
EXPLAIN
select
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice,
	sum(l_quantity)
from
	customer,
	orders,
	lineitem
where
	o_orderkey in (
		select
			l_orderkey
		from
			lineitem
		group by
			l_orderkey having
				sum(l_quantity) > 315
	)
	and c_custkey = o_custkey
	and o_orderkey = l_orderkey
group by
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice
order by
	o_totalprice desc,
	o_orderdate
LIMIT 100;
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=207130.21..207130.46 rows=100 width=71)
   ->  Sort  (cost=207130.21..207130.88 rows=268 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=207113.93..207119.96 rows=268 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Sort  (cost=207113.93..207114.60 rows=268 width=57)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     ->  Nested Loop  (cost=151119.04..207103.12 rows=268 width=57)
                           ->  Nested Loop  (cost=151118.61..151766.27 rows=67 width=43)
                                 ->  Nested Loop  (cost=151118.19..151736.25 rows=67 width=24)
                                       ->  Finalize GroupAggregate  (cost=151117.76..151170.43 rows=67 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '315'::numeric)
                                             ->  Gather Merge  (cost=151117.76..151164.43 rows=400 width=36)
                                                   Workers Planned: 2
                                                   ->  Sort  (cost=150117.74..150118.24 rows=200 width=36)
                                                         Sort Key: lineitem_1.l_orderkey
                                                         ->  Partial HashAggregate  (cost=150107.59..150110.09 rows=200 width=36)
                                                               Group Key: lineitem_1.l_orderkey
                                                               ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..137605.06 rows=2500506 width=22)
                                       ->  Index Scan using o_ok on orders  (cost=0.43..8.45 rows=1 width=20)
                                             Index Cond: (o_orderkey = lineitem_1.l_orderkey)
                                 ->  Index Scan using c_ck on customer  (cost=0.42..0.45 rows=1 width=23)
                                       Index Cond: (c_custkey = orders.o_custkey)
                           ->  Index Scan using l_ok on lineitem  (cost=0.43..525.86 rows=30006 width=22)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 26
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(29 rows)

COMMIT;
COMMIT

Query 18 execution times in seconds: 0.194,0.198,0.190,0.196,0.199,0.190,0.186,0.188,0.200,0.171
Average execution time: 0.1912 seconds

BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice* (1 - l_discount)) as revenue
from
	lineitem,
	part
where
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#35'
		and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')
		and l_quantity >= 8 and l_quantity <= 8+10
		and p_size between 1 and 5
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#13'
		and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')
		and l_quantity >= 20 and l_quantity <= 20+10
		and p_size between 1 and 10
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#45'
		and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')
		and l_quantity >= 20 and l_quantity <= 20+10
		and p_size between 1 and 15
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	);


 Aggregate  (cost=188632.35..188632.36 rows=1 width=32)
   ->  Gather  (cost=1000.42..188632.34 rows=1 width=36)
         Workers Planned: 2
         ->  Nested Loop  (cost=0.42..187632.24 rows=1 width=36)
               ->  Parallel Seq Scan on lineitem  (cost=0.00..187615.19 rows=2 width=58)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '8'::numeric) AND (l_quantity <= '18'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))))
               ->  Index Scan using p_pk on part  (cost=0.42..8.52 rows=1 width=30)
                     Index Cond: (p_partkey = lineitem.l_partkey)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#35'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#13'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#45'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))) AND (((p_brand = 'Brand#35'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (lineitem.l_quantity >= '8'::numeric) AND (lineitem.l_quantity <= '18'::numeric) AND (p_size <= 5)) OR ((p_brand = 'Brand#13'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (lineitem.l_quantity >= '20'::numeric) AND (lineitem.l_quantity <= '30'::numeric) AND (p_size <= 10)) OR ((p_brand = 'Brand#45'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (lineitem.l_quantity >= '20'::numeric) AND (lineitem.l_quantity <= '30'::numeric) AND (p_size <= 15))))
 JIT:
   Functions: 10
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(12 rows)

COMMIT;
COMMIT

Query 19 execution times in seconds: 0.201,0.195,0.172,0.185,0.191,0.175,0.189,0.194,0.198,0.192
Average execution time: 0.1892 seconds

BEGIN;
BEGIN
EXPLAIN
select
	s_name,
	s_address
from
	supplier,
	nation
where
	s_suppkey in (
		select
			ps_suppkey
		from
			partsupp
		where
			ps_partkey in (
				select
					p_partkey
				from
					part
				where
					p_name like 'puff%'
			)
			and ps_availqty > (
				select
					0.5 * sum(l_quantity)
				from
					lineitem
				where
					l_partkey = ps_partkey
					and l_suppkey = ps_suppkey
					and l_shipdate >= '1995-01-01'
					and l_shipdate < cast(date '1995-01-01' + interval '1 year' as date)
			)
	)
	and s_nationkey = n_nationkey
	and n_name = 'PERU'
order by
	s_name;
                                                                                                  QUERY PLAN                                                                                                  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3419746.84..3419747.11 rows=108 width=51)
   Sort Key: supplier.s_name
   ->  Nested Loop Semi Join  (cost=0.71..3419743.19 rows=108 width=51)
         Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
         ->  Nested Loop  (cost=0.29..648.09 rows=400 width=55)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Index Scan using s_sk on supplier  (cost=0.29..496.78 rows=10000 width=59)
               ->  Materialize  (cost=0.00..1.32 rows=1 width=4)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'PERU'::bpchar)
         ->  Materialize  (cost=0.42..3402943.83 rows=2693 width=4)
               ->  Nested Loop  (cost=0.42..3402930.37 rows=2693 width=4)
                     ->  Seq Scan on part  (cost=0.00..6628.00 rows=2020 width=4)
                           Filter: ((p_name)::text ~~ 'puff%'::text)
                     ->  Index Scan using ps_pk on partsupp  (cost=0.42..1681.33 rows=1 width=8)
                           Index Cond: (ps_partkey = part.p_partkey)
                           Filter: ((ps_availqty)::numeric > (SubPlan 1))
                           SubPlan 1
                             ->  Aggregate  (cost=418.70..418.71 rows=1 width=32)
                                   ->  Bitmap Heap Scan on lineitem  (cost=414.68..418.70 rows=1 width=18)
                                         Recheck Cond: ((l_suppkey = partsupp.ps_suppkey) AND (l_partkey = partsupp.ps_partkey) AND (l_shipdate >= '1995-01-01'::date) AND (l_shipdate < '1996-01-01'::date))
                                         ->  BitmapAnd  (cost=414.68..414.68 rows=1 width=0)
                                               ->  Bitmap Index Scan on l_sk_pk  (cost=0.00..5.93 rows=150 width=0)
                                                     Index Cond: ((l_suppkey = partsupp.ps_suppkey) AND (l_partkey = partsupp.ps_partkey))
                                               ->  Bitmap Index Scan on l_sd  (cost=0.00..408.49 rows=30006 width=0)
                                                     Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate < '1996-01-01'::date))
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(29 rows)

COMMIT;
COMMIT

Query 20 execution times in seconds: 0.193,0.190,0.199,0.195,0.194,0.196,0.198,0.191,0.202,0.192
Average execution time: 0.1950 seconds

BEGIN;
BEGIN
EXPLAIN
select
	s_name,
	count(*) as numwait
from
	supplier,
	lineitem l1,
	orders,
	nation
where
	s_suppkey = l1.l_suppkey
	and o_orderkey = l1.l_orderkey
	and o_orderstatus = 'F'
	and l1.l_receiptdate > l1.l_commitdate
	and exists (
		select
			*
		from
			lineitem l2
		where
			l2.l_orderkey = l1.l_orderkey
			and l2.l_suppkey <> l1.l_suppkey
	)
	and not exists (
		select
			*
		from
			lineitem l3
		where
			l3.l_orderkey = l1.l_orderkey
			and l3.l_suppkey <> l1.l_suppkey
			and l3.l_receiptdate > l3.l_commitdate
	)
	and s_nationkey = n_nationkey
	and n_name = 'SAUDI ARABIA'
group by
	s_name
order by
	numwait desc,
	s_name
LIMIT 100;
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=505211.60..505211.85 rows=100 width=34)
   ->  Sort  (cost=505211.60..505235.82 rows=9688 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  Finalize GroupAggregate  (cost=503701.49..504841.33 rows=9688 width=34)
               Group Key: supplier.s_name
               ->  Gather Merge  (cost=503701.49..504704.08 rows=8074 width=34)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=502701.47..502772.12 rows=4037 width=34)
                           Group Key: supplier.s_name
                           ->  Sort  (cost=502701.47..502711.56 rows=4037 width=26)
                                 Sort Key: supplier.s_name
                                 ->  Nested Loop  (cost=336411.88..502459.67 rows=4037 width=26)
                                       ->  Parallel Hash Anti Join  (cost=336411.46..498225.58 rows=8335 width=34)
                                             Hash Cond: (l1.l_orderkey = l3.l_orderkey)
                                             Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Hash Semi Join  (cost=178880.35..336946.22 rows=16670 width=38)
                                                   Hash Cond: (l1.l_orderkey = l2.l_orderkey)
                                                   Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                                                   ->  Hash Join  (cost=250.96..147566.33 rows=33340 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Seq Scan on lineitem l1  (cost=0.00..143856.33 rows=833502 width=8)
                                                               Filter: (l_receiptdate > l_commitdate)
                                                         ->  Hash  (cost=245.96..245.96 rows=400 width=30)
                                                               ->  Nested Loop  (cost=7.38..245.96 rows=400 width=30)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                           Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                                                     ->  Bitmap Heap Scan on supplier  (cost=7.38..240.65 rows=400 width=34)
                                                                           Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                           ->  Bitmap Index Scan on s_nk  (cost=0.00..7.29 rows=400 width=0)
                                                                                 Index Cond: (s_nationkey = nation.n_nationkey)
                                                   ->  Parallel Hash  (cost=137605.06..137605.06 rows=2500506 width=8)
                                                         ->  Parallel Seq Scan on lineitem l2  (cost=0.00..137605.06 rows=2500506 width=8)
                                             ->  Parallel Hash  (cost=143856.33..143856.33 rows=833502 width=8)
                                                   ->  Parallel Seq Scan on lineitem l3  (cost=0.00..143856.33 rows=833502 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..0.51 rows=1 width=4)
                                             Index Cond: (o_orderkey = l1.l_orderkey)
                                             Filter: (o_orderstatus = 'F'::bpchar)
 JIT:
   Functions: 51
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(41 rows)

COMMIT;
COMMIT

Query 21 execution times in seconds: 0.202,0.204,0.204,0.199,0.207,0.183,0.209,0.207,0.203,0.187
Average execution time: 0.2005 seconds

BEGIN;
BEGIN
EXPLAIN
select
	cntrycode,
	count(*) as numcust,
	sum(c_acctbal) as totacctbal
from
	(
		select
			substring(c_phone from 1 for 2) as cntrycode,
			c_acctbal
		from
			customer
		where
			substring(c_phone from 1 for 2) in
				('11', '19', '32', '12', '25', '34', '28')
			and c_acctbal > (
				select
					avg(c_acctbal)
				from
					customer
				where
					c_acctbal > 0.00
					and substring(c_phone from 1 for 2) in
						('11', '19', '32', '12', '25', '34', '28')
			)
			and not exists (
				select
					*
				from
					orders
				where
					o_custkey = c_custkey
			)
	) as vip
group by
	cntrycode
order by
	cntrycode;
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=13002.86..13102.50 rows=747 width=72)
   Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
   InitPlan 1
     ->  Finalize Aggregate  (cost=6245.81..6245.82 rows=1 width=32)
           ->  Gather  (cost=6245.59..6245.80 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5245.59..5245.60 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5240.62 rows=1983 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{11,19,32,12,25,34,28}'::text[])))
   ->  Gather Merge  (cost=6757.04..6837.39 rows=622 width=72)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=5757.01..5765.57 rows=311 width=72)
               Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Sort  (cost=5757.01..5757.79 rows=311 width=38)
                     Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                     ->  Nested Loop Anti Join  (cost=0.43..5744.14 rows=311 width=38)
                           ->  Parallel Seq Scan on customer  (cost=0.00..5240.62 rows=729 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{11,19,32,12,25,34,28}'::text[])))
                           ->  Index Only Scan using o_ck on orders  (cost=0.43..3.30 rows=17 width=4)
                                 Index Cond: (o_custkey = customer.c_custkey)
(20 rows)

COMMIT;
COMMIT

Query 22 execution times in seconds: 0.146,0.148,0.142,0.146,0.128,0.148,0.147,0.149,0.145,0.147
Average execution time: 0.1446 seconds


