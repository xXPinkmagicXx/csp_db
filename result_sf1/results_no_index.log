=== Experiment: no_index ===
INDEX_ALL=0
INDEX_NUMBERS=0
INDEX_DATES=0
INDEX_TEXT=0
INDEX_DEFAULT=0

[Info] Running drop_indexes.sh
[Info] Dropping date indexes
[Info] Dropping numbers indexes
[Info] Dropping text indexes
[Info] Running create_indexes.sh

[Info] Running queries(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22) for no_index
BEGIN;
BEGIN
EXPLAIN
select
	l_returnflag,
	l_linestatus,
	sum(l_quantity) as sum_qty,
	sum(l_extendedprice) as sum_base_price,
	sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
	avg(l_quantity) as avg_qty,
	avg(l_extendedprice) as avg_price,
	avg(l_discount) as avg_disc,
	count(*) as count_order
from
	lineitem
where
	l_shipdate <= date '1998-12-01' - interval '114 days'
group by
	l_returnflag,
	l_linestatus
order by
	l_returnflag,
	l_linestatus;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=168847.16..194410.32 rows=40000 width=248)
   Group Key: l_returnflag, l_linestatus
   ->  Gather Merge  (cost=168847.16..190710.32 rows=80000 width=248)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=167847.13..180476.31 rows=40000 width=248)
               Group Key: l_returnflag, l_linestatus
               ->  Sort  (cost=167847.13..168629.08 rows=312778 width=88)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Parallel Seq Scan on lineitem  (cost=0.00..124329.17 rows=312778 width=88)
                           Filter: (l_shipdate <= '1998-08-09 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 12
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(13 rows)

COMMIT;
COMMIT

Query 1 execution times in seconds: 0.196,0.195,0.193,0.191,0.187,0.185,0.192,0.197,0.207,0.194
Average execution time: 0.1937 seconds

BEGIN;
BEGIN
EXPLAIN
select
	s_acctbal,
	s_name,
	n_name,
	p_partkey,
	p_mfgr,
	s_address,
	s_phone,
	s_comment
from
	part,
	supplier,
	partsupp,
	nation,
	region
where
	p_partkey = ps_partkey
	and s_suppkey = ps_suppkey
	and p_size = 30
	and p_type like '%BRASS'
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'EUROPE'
	and ps_supplycost = (
		select
			min(ps_supplycost)
		from
			partsupp,
			supplier,
			nation,
			region
		where
			p_partkey = ps_partkey
			and s_suppkey = ps_suppkey
			and s_nationkey = n_nationkey
			and n_regionkey = r_regionkey
			and r_name = 'EUROPE'
	)
order by
	s_acctbal desc,
	n_name,
	s_name,
	p_partkey
LIMIT 100;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=34844.96..34844.96 rows=1 width=270)
   ->  Sort  (cost=34844.96..34844.96 rows=1 width=270)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=25307.23..34844.95 rows=1 width=270)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Gather Merge  (cost=1000.44..9670.70 rows=730 width=30)
                     Workers Planned: 2
                     ->  Parallel Index Scan using part_pkey on part  (cost=0.42..8586.41 rows=304 width=30)
                           Filter: (((p_type)::text ~~ '%BRASS'::text) AND (p_size = 30))
               ->  Sort  (cost=24306.79..24318.55 rows=4706 width=250)
                     Sort Key: partsupp.ps_partkey
                     ->  Gather  (cost=1386.13..24019.72 rows=4706 width=250)
                           Workers Planned: 2
                           ->  Hash Join  (cost=386.13..22549.12 rows=1961 width=250)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Parallel Seq Scan on partsupp  (cost=0.00..20893.33 rows=333333 width=14)
                                 ->  Hash  (cost=385.40..385.40 rows=59 width=244)
                                       ->  Hash Join  (cost=24.31..385.40 rows=59 width=244)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=144)
                                             ->  Hash  (cost=24.29..24.29 rows=1 width=108)
                                                   ->  Hash Join  (cost=12.14..24.29 rows=1 width=108)
                                                         Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..11.70 rows=170 width=112)
                                                         ->  Hash  (cost=12.12..12.12 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..12.12 rows=1 width=4)
                                                                     Filter: (r_name = 'EUROPE'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=49.51..49.52 rows=1 width=32)
                       ->  Nested Loop  (cost=1.01..49.51 rows=1 width=6)
                             ->  Nested Loop  (cost=0.85..47.63 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..46.96 rows=4 width=10)
                                         ->  Index Scan using partsupp_pkey on partsupp partsupp_1  (cost=0.42..13.75 rows=4 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..8.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.17 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
                             ->  Memoize  (cost=0.15..0.46 rows=1 width=4)
                                   Cache Key: nation_1.n_regionkey
                                   Cache Mode: logical
                                   ->  Index Scan using region_pkey on region region_1  (cost=0.14..0.45 rows=1 width=4)
                                         Index Cond: (r_regionkey = nation_1.n_regionkey)
                                         Filter: (r_name = 'EUROPE'::bpchar)
(45 rows)

COMMIT;
COMMIT

Query 2 execution times in seconds: 0.153,0.153,0.157,0.148,0.149,0.151,0.149,0.144,0.152,0.151
Average execution time: 0.1507 seconds

BEGIN;
BEGIN
EXPLAIN
select
	l_orderkey,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	o_orderdate,
	o_shippriority
from
	customer,
	orders,
	lineitem
where
	c_mktsegment = 'FURNITURE'
	and c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate < date '1995-03-23'
	and l_shipdate > date '1995-03-23'
group by
	l_orderkey,
	o_orderdate,
	o_shippriority
order by
	revenue desc,
	o_orderdate
LIMIT 10;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=179841.63..179841.65 rows=10 width=44)
   ->  Sort  (cost=179841.63..180020.66 rows=71611 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=168869.82..178294.14 rows=71611 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=168869.82..176653.05 rows=59676 width=44)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=167869.80..168764.94 rows=29838 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=167869.80..167944.39 rows=29838 width=48)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Parallel Hash Join  (cost=40025.71..165652.11 rows=29838 width=48)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..124329.17 rows=312778 width=40)
                                             Filter: (l_shipdate > '1995-03-23'::date)
                                       ->  Parallel Hash  (cost=39280.43..39280.43 rows=59622 width=12)
                                             ->  Parallel Hash Join  (cost=4534.61..39280.43 rows=59622 width=12)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..33948.50 rows=303732 width=16)
                                                         Filter: (o_orderdate < '1995-03-23'::date)
                                                   ->  Parallel Hash  (cost=4381.25..4381.25 rows=12269 width=4)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..4381.25 rows=12269 width=4)
                                                               Filter: (c_mktsegment = 'FURNITURE'::bpchar)
 JIT:
   Functions: 34
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(26 rows)

COMMIT;
COMMIT

Query 3 execution times in seconds: 0.199,0.195,0.199,0.194,0.189,0.197,0.197,0.190,0.198,0.191
Average execution time: 0.1949 seconds

BEGIN;
BEGIN
EXPLAIN
select
	o_orderpriority,
	count(*) as order_count
from
	orders
where
	o_orderdate >= date '1996-10-01'
	and o_orderdate < cast(date '1996-10-01' + interval '3 month' as date)
	and exists (
		select
			*
		from
			lineitem
		where
			l_orderkey = o_orderkey
			and l_commitdate < l_receiptdate
	)
group by
	o_orderpriority
order by
	o_orderpriority;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Sort  (cost=144447.82..144447.83 rows=5 width=24)
   Sort Key: orders.o_orderpriority
   ->  HashAggregate  (cost=144447.71..144447.76 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop  (cost=142627.10..144303.67 rows=28809 width=16)
               ->  HashAggregate  (cost=142626.67..142628.67 rows=200 width=4)
                     Group Key: lineitem.l_orderkey
                     ->  Seq Scan on lineitem  (cost=0.00..140750.00 rows=750667 width=4)
                           Filter: (l_commitdate < l_receiptdate)
               ->  Index Scan using orders_pkey on orders  (cost=0.43..8.37 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
                     Filter: ((o_orderdate >= '1996-10-01'::date) AND (o_orderdate < '1997-01-01'::date))
 JIT:
   Functions: 13
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(15 rows)

COMMIT;
COMMIT

Query 4 execution times in seconds: 0.191,0.188,0.181,0.192,0.174,0.179,0.193,0.171,0.173,0.187
Average execution time: 0.1829 seconds

BEGIN;
BEGIN
EXPLAIN
select
	n_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue
from
	customer,
	orders,
	lineitem,
	supplier,
	nation,
	region
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and l_suppkey = s_suppkey
	and c_nationkey = s_nationkey
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'EUROPE'
	and o_orderdate >= date '1995-01-01'
	and o_orderdate < date '1995-01-01' + interval '1 year'
group by
	n_name
order by
	revenue desc;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=130184.78..130184.98 rows=83 width=136)
   Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
   ->  Finalize GroupAggregate  (cost=130171.61..130182.13 rows=83 width=136)
         Group Key: nation.n_name
         ->  Gather Merge  (cost=130171.61..130180.57 rows=70 width=136)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=129171.59..129172.46 rows=35 width=136)
                     Group Key: nation.n_name
                     ->  Sort  (cost=129171.59..129171.68 rows=35 width=140)
                           Sort Key: nation.n_name
                           ->  Nested Loop  (cost=386.98..129170.69 rows=35 width=140)
                                 Join Filter: (customer.c_nationkey = supplier.s_nationkey)
                                 ->  Nested Loop  (cost=386.56..128724.18 rows=861 width=152)
                                       ->  Hash Join  (cost=386.13..125943.58 rows=5520 width=152)
                                             Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                             ->  Parallel Seq Scan on lineitem  (cost=0.00..121983.33 rows=938333 width=44)
                                             ->  Hash  (cost=385.40..385.40 rows=59 width=116)
                                                   ->  Hash Join  (cost=24.31..385.40 rows=59 width=116)
                                                         Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                         ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                                         ->  Hash  (cost=24.29..24.29 rows=1 width=108)
                                                               ->  Hash Join  (cost=12.14..24.29 rows=1 width=108)
                                                                     Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation  (cost=0.00..11.70 rows=170 width=112)
                                                                     ->  Hash  (cost=12.12..12.12 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..12.12 rows=1 width=4)
                                                                                 Filter: (r_name = 'EUROPE'::bpchar)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..0.50 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
                                             Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate < '1996-01-01 00:00:00'::timestamp without time zone))
                                 ->  Index Scan using customer_pkey on customer  (cost=0.42..0.51 rows=1 width=8)
                                       Index Cond: (c_custkey = orders.o_custkey)
 JIT:
   Functions: 49
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(35 rows)

COMMIT;
COMMIT

Query 5 execution times in seconds: 0.194,0.204,0.201,0.191,0.193,0.202,0.203,0.196,0.184,0.195
Average execution time: 0.1963 seconds

BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice * l_discount) as revenue
from
	lineitem
where
	l_shipdate >= date '1996-01-01'
	and l_shipdate < cast(date '1996-01-01' + interval '1 year' as date)
	and l_discount between 0.04 - 0.01 and 0.04 + 0.01
	and l_quantity < 25;
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=134712.77..134712.78 rows=1 width=32)
   ->  Gather  (cost=134712.54..134712.75 rows=2 width=32)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=133712.54..133712.55 rows=1 width=32)
               ->  Parallel Seq Scan on lineitem  (cost=0.00..133712.50 rows=8 width=36)
                     Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date) AND (l_discount >= 0.03) AND (l_discount <= 0.05) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 7
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(9 rows)

COMMIT;
COMMIT

Query 6 execution times in seconds: 0.189,0.191,0.188,0.192,0.182,0.191,0.174,0.190,0.180,0.186
Average execution time: 0.1863 seconds

BEGIN;
BEGIN
EXPLAIN
select
	supp_nation,
	cust_nation,
	l_year,
	sum(volume) as revenue
from
	(
		select
			n1.n_name as supp_nation,
			n2.n_name as cust_nation,
			extract(year from l_shipdate) as l_year,
			l_extendedprice * (1 - l_discount) as volume
		from
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2
		where
			s_suppkey = l_suppkey
			and o_orderkey = l_orderkey
			and c_custkey = o_custkey
			and s_nationkey = n1.n_nationkey
			and c_nationkey = n2.n_nationkey
			and (
				(n1.n_name = 'PERU' and n2.n_name = 'UNITED KINGDOM')
				or (n1.n_name = 'UNITED KINGDOM' and n2.n_name = 'PERU')
			)
			and l_shipdate between date '1995-01-01' and date '1996-12-31'
	) as shipping
group by
	supp_nation,
	cust_nation,
	l_year
order by
	supp_nation,
	cust_nation,
	l_year;
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=128378.09..128378.13 rows=1 width=272)
   Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
   ->  Sort  (cost=128378.09..128378.10 rows=1 width=276)
         Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Gather  (cost=1364.95..128378.08 rows=1 width=276)
               Workers Planned: 2
               ->  Nested Loop  (cost=364.95..127377.98 rows=1 width=276)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'UNITED KINGDOM'::bpchar)) OR ((n1.n_name = 'UNITED KINGDOM'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Nested Loop  (cost=364.80..127367.65 rows=55 width=148)
                           ->  Nested Loop  (cost=364.38..127343.00 rows=55 width=148)
                                 ->  Hash Join  (cost=363.96..127057.10 rows=55 width=148)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..126675.00 rows=4692 width=48)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=362.48..362.48 rows=118 width=108)
                                             ->  Hash Join  (cost=12.58..362.48 rows=118 width=108)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                                   ->  Hash  (cost=12.55..12.55 rows=2 width=108)
                                                         ->  Seq Scan on nation n1  (cost=0.00..12.55 rows=2 width=108)
                                                               Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'UNITED KINGDOM'::bpchar))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..5.20 rows=1 width=8)
                                       Index Cond: (o_orderkey = lineitem.l_orderkey)
                           ->  Index Scan using customer_pkey on customer  (cost=0.42..0.45 rows=1 width=8)
                                 Index Cond: (c_custkey = orders.o_custkey)
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..0.17 rows=1 width=108)
                           Index Cond: (n_nationkey = customer.c_nationkey)
                           Filter: ((n_name = 'UNITED KINGDOM'::bpchar) OR (n_name = 'PERU'::bpchar))
 JIT:
   Functions: 45
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(31 rows)

COMMIT;
COMMIT

Query 7 execution times in seconds: 0.197,0.199,0.186,0.179,0.201,0.199,0.181,0.178,0.183,0.192
Average execution time: 0.1895 seconds

BEGIN;
BEGIN
EXPLAIN
select
	o_year,
	sum(case
		when nation = 'GERMANY' then volume
		else 0
	end) / sum(volume) as mkt_share
from
	(
		select
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) as volume,
			n2.n_name as nation
		from
			part,
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2,
			region
		where
			p_partkey = l_partkey
			and s_suppkey = l_suppkey
			and l_orderkey = o_orderkey
			and o_custkey = c_custkey
			and c_nationkey = n1.n_nationkey
			and n1.n_regionkey = r_regionkey
			and r_name = 'EUROPE'
			and s_nationkey = n2.n_nationkey
			and o_orderdate between date '1995-01-01' and date '1996-12-31'
			and p_type = 'SMALL BURNISHED COPPER'
	) as all_nations
group by
	o_year
order by
	o_year;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=134692.47..134696.27 rows=27 width=64)
   Group Key: (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=134692.47..134695.45 rows=22 width=96)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=133692.45..133692.89 rows=11 width=96)
               Group Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=133692.45..133692.48 rows=11 width=172)
                     Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                     ->  Nested Loop  (cost=5202.15..133692.26 rows=11 width=172)
                           ->  Nested Loop  (cost=5202.01..133690.39 rows=11 width=44)
                                 ->  Hash Join  (cost=5201.72..133687.06 rows=11 width=44)
                                       Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                       ->  Nested Loop  (cost=5177.41..133655.51 rows=1902 width=48)
                                             ->  Nested Loop  (cost=5176.99..132756.80 rows=1902 width=48)
                                                   ->  Parallel Hash Join  (cost=5176.57..129623.08 rows=6221 width=44)
                                                         Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                                         ->  Parallel Seq Scan on lineitem  (cost=0.00..121983.33 rows=938333 width=48)
                                                         ->  Parallel Hash  (cost=5169.67..5169.67 rows=552 width=4)
                                                               ->  Parallel Seq Scan on part  (cost=0.00..5169.67 rows=552 width=4)
                                                                     Filter: ((p_type)::text = 'SMALL BURNISHED COPPER'::text)
                                                   ->  Index Scan using orders_pkey on orders  (cost=0.43..0.50 rows=1 width=12)
                                                         Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Index Scan using customer_pkey on customer  (cost=0.42..0.47 rows=1 width=8)
                                                   Index Cond: (c_custkey = orders.o_custkey)
                                       ->  Hash  (cost=24.29..24.29 rows=1 width=4)
                                             ->  Hash Join  (cost=12.14..24.29 rows=1 width=4)
                                                   Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on nation n1  (cost=0.00..11.70 rows=170 width=8)
                                                   ->  Hash  (cost=12.12..12.12 rows=1 width=4)
                                                         ->  Seq Scan on region  (cost=0.00..12.12 rows=1 width=4)
                                                               Filter: (r_name = 'EUROPE'::bpchar)
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using nation_pkey on nation n2  (cost=0.14..0.17 rows=1 width=108)
                                 Index Cond: (n_nationkey = supplier.s_nationkey)
 JIT:
   Functions: 55
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(39 rows)

COMMIT;
COMMIT

Query 8 execution times in seconds: 0.196,0.188,0.191,0.198,0.205,0.205,0.286,0.297,0.186,0.221
Average execution time: 0.2173 seconds

BEGIN;
BEGIN
EXPLAIN
select
	nation,
	o_year,
	sum(amount) as sum_profit
from
	(
		select
			n_name as nation,
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount
		from
			part,
			supplier,
			lineitem,
			partsupp,
			orders,
			nation
		where
			s_suppkey = l_suppkey
			and ps_suppkey = l_suppkey
			and ps_partkey = l_partkey
			and p_partkey = l_partkey
			and o_orderkey = l_orderkey
			and s_nationkey = n_nationkey
			and p_name like '%azure%'
	) as profit
group by
	nation,
	o_year
order by
	nation,
	o_year desc;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=202893.48..224246.59 rows=159228 width=168)
   Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=202893.48..220531.27 rows=132690 width=168)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=201893.45..204215.53 rows=66345 width=168)
               Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=201893.45..202059.32 rows=66345 width=196)
                     Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                     ->  Nested Loop  (cost=27952.74..190227.48 rows=66345 width=196)
                           ->  Parallel Hash Join  (cost=27952.32..156973.26 rows=66345 width=168)
                                 Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (lineitem.l_partkey = partsupp.ps_partkey))
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..121983.33 rows=938333 width=66)
                                 ->  Parallel Hash  (cost=27598.80..27598.80 rows=23568 width=126)
                                       ->  Hash Join  (cost=5705.14..27598.80 rows=23568 width=126)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Hash Join  (cost=5691.32..27521.56 rows=23568 width=26)
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Hash Join  (cost=5243.32..27011.67 rows=23568 width=18)
                                                         Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                                         ->  Parallel Seq Scan on partsupp  (cost=0.00..20893.33 rows=333333 width=14)
                                                         ->  Parallel Hash  (cost=5169.67..5169.67 rows=5892 width=4)
                                                               ->  Parallel Seq Scan on part  (cost=0.00..5169.67 rows=5892 width=4)
                                                                     Filter: ((p_name)::text ~~ '%azure%'::text)
                                                   ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                                         ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                             ->  Hash  (cost=11.70..11.70 rows=170 width=108)
                                                   ->  Seq Scan on nation  (cost=0.00..11.70 rows=170 width=108)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..0.50 rows=1 width=8)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
 JIT:
   Functions: 53
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(32 rows)

COMMIT;
COMMIT

Query 9 execution times in seconds: 0.181,0.199,0.209,0.194,0.186,0.200,0.204,0.203,0.193,0.199
Average execution time: 0.1968 seconds

BEGIN;
BEGIN
EXPLAIN
select
	c_custkey,
	c_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	c_acctbal,
	n_name,
	c_address,
	c_phone,
	c_comment
from
	customer,
	orders,
	lineitem,
	nation
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate >= date '1994-09-01'
	and o_orderdate < cast(date '1994-09-01' + interval '3 month' as date)
	and l_returnflag = 'R'
	and c_nationkey = n_nationkey
group by
	c_custkey,
	c_name,
	c_acctbal,
	c_phone,
	n_name,
	c_address,
	c_comment
order by
	revenue desc
LIMIT 20;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=149958.89..149958.94 rows=20 width=279)
   ->  Sort  (cost=149958.89..149960.01 rows=446 width=279)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=149889.68..149947.03 rows=446 width=279)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=149889.68..149937.73 rows=372 width=279)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=148889.65..148894.77 rows=186 width=279)
                           Group Key: customer.c_custkey, nation.n_name
                           ->  Sort  (cost=148889.65..148890.12 rows=186 width=283)
                                 Sort Key: customer.c_custkey, nation.n_name
                                 ->  Nested Loop  (cost=1.00..148882.64 rows=186 width=283)
                                       ->  Nested Loop  (cost=0.85..148873.80 rows=186 width=183)
                                             ->  Nested Loop  (cost=0.43..148742.15 rows=186 width=40)
                                                   ->  Parallel Seq Scan on lineitem  (cost=0.00..124329.17 rows=4692 width=40)
                                                         Filter: (l_returnflag = 'R'::bpchar)
                                                   ->  Index Scan using orders_pkey on orders  (cost=0.43..5.20 rows=1 width=8)
                                                         Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                         Filter: ((o_orderdate >= '1994-09-01'::date) AND (o_orderdate < '1994-12-01'::date))
                                             ->  Index Scan using customer_pkey on customer  (cost=0.42..0.71 rows=1 width=147)
                                                   Index Cond: (c_custkey = orders.o_custkey)
                                       ->  Memoize  (cost=0.15..0.17 rows=1 width=108)
                                             Cache Key: customer.c_nationkey
                                             Cache Mode: logical
                                             ->  Index Scan using nation_pkey on nation  (cost=0.14..0.16 rows=1 width=108)
                                                   Index Cond: (n_nationkey = customer.c_nationkey)
 JIT:
   Functions: 31
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(29 rows)

COMMIT;
COMMIT

Query 10 execution times in seconds: 0.192,0.193,0.181,0.197,0.203,0.200,0.182,0.197,0.187,0.186
Average execution time: 0.1918 seconds

BEGIN;
BEGIN
EXPLAIN
select
	ps_partkey,
	sum(ps_supplycost * ps_availqty) as value
from
	partsupp,
	supplier,
	nation
where
	ps_suppkey = s_suppkey
	and s_nationkey = n_nationkey
	and n_name = 'IRAN'
group by
	ps_partkey having
		sum(ps_supplycost * ps_availqty) > (
			select
				sum(ps_supplycost * ps_availqty) *         inf
			from
				partsupp,
				supplier,
				nation
			where
				ps_suppkey = s_suppkey
				and s_nationkey = n_nationkey
				and n_name = 'IRAN'
		)
order by
	value desc;
ERROR:  column "inf" does not exist
LINE 17:     sum(ps_supplycost * ps_availqty) *         inf
                                                        ^

Query 11 execution times in seconds: 0.138,0.141,0.134,0.138,0.128,0.139,0.137,0.140,0.136,0.141
Average execution time: 0.1372 seconds

BEGIN;
BEGIN
EXPLAIN
select
	l_shipmode,
	sum(case
		when o_orderpriority = '1-URGENT'
			or o_orderpriority = '2-HIGH'
			then 1
		else 0
	end) as high_line_count,
	sum(case
		when o_orderpriority <> '1-URGENT'
			and o_orderpriority <> '2-HIGH'
			then 1
		else 0
	end) as low_line_count
from
	orders,
	lineitem
where
	o_orderkey = l_orderkey
	and l_shipmode in ('SHIP', 'FOB')
	and l_commitdate < l_receiptdate
	and l_shipdate < l_commitdate
	and l_receiptdate >= date '1996-01-01'
	and l_receiptdate < date '1996-01-01' + interval '1 year'
group by
	l_shipmode
order by
	l_shipmode;
                                                                                                                                 QUERY PLAN                                                                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=134754.81..134756.32 rows=13 width=60)
   Group Key: lineitem.l_shipmode
   ->  Gather Merge  (cost=134754.81..134756.11 rows=10 width=60)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=133754.78..133754.93 rows=5 width=60)
               Group Key: lineitem.l_shipmode
               ->  Sort  (cost=133754.78..133754.80 rows=5 width=60)
                     Sort Key: lineitem.l_shipmode
                     ->  Nested Loop  (cost=0.43..133754.73 rows=5 width=60)
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..133712.50 rows=5 width=48)
                                 Filter: ((l_shipmode = ANY ('{SHIP,FOB}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1996-01-01'::date) AND (l_receiptdate < '1997-01-01 00:00:00'::timestamp without time zone))
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..8.45 rows=1 width=20)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
 JIT:
   Functions: 15
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(16 rows)

COMMIT;
COMMIT

Query 12 execution times in seconds: 0.192,0.190,0.191,0.191,0.193,0.192,0.196,0.187,0.192,0.173
Average execution time: 0.1897 seconds

BEGIN;
BEGIN
EXPLAIN
select
	c_count,
	count(*) as custdist
from
	(
		select
			c_custkey,
			count(o_orderkey)
		from
			customer left outer join orders on
				c_custkey = o_custkey
				and o_comment not like '%express%deposits%'
		group by
			c_custkey
	) as c_orders (c_custkey, c_count)
group by
	c_count
order by
	custdist desc,
	c_count desc;
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=136832.49..136832.99 rows=200 width=16)
   Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
   ->  HashAggregate  (cost=136822.84..136824.84 rows=200 width=16)
         Group Key: count(orders.o_orderkey)
         ->  Finalize GroupAggregate  (cost=96570.40..134572.84 rows=150000 width=12)
               Group Key: customer.c_custkey
               ->  Gather Merge  (cost=96570.40..131572.84 rows=300000 width=12)
                     Workers Planned: 2
                     ->  Sort  (cost=95570.38..95945.38 rows=150000 width=12)
                           Sort Key: customer.c_custkey
                           ->  Partial HashAggregate  (cost=73824.75..80108.92 rows=150000 width=12)
                                 Group Key: customer.c_custkey
                                 Planned Partitions: 4
                                 ->  Parallel Hash Right Join  (cost=3822.69..39378.71 rows=612374 width=8)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..33948.50 rows=612374 width=8)
                                             Filter: ((o_comment)::text !~~ '%express%deposits%'::text)
                                       ->  Parallel Hash  (cost=3041.44..3041.44 rows=62500 width=4)
                                             ->  Parallel Index Only Scan using customer_pkey on customer  (cost=0.42..3041.44 rows=62500 width=4)
 JIT:
   Functions: 18
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(22 rows)

COMMIT;
COMMIT

Query 13 execution times in seconds: 0.191,0.171,0.194,0.182,0.192,0.176,0.170,0.185,0.163,0.183
Average execution time: 0.1807 seconds

BEGIN;
BEGIN
EXPLAIN
select
	100.00 * sum(case
		when p_type like 'PROMO%'
			then l_extendedprice * (1 - l_discount)
		else 0
	end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue
from
	lineitem,
	part
where
	l_partkey = p_partkey
	and l_shipdate >= date '1997-06-01'
	and l_shipdate < cast(date '1997-06-01' + interval '1 month' as date);
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=133772.66..133772.68 rows=1 width=32)
   ->  Gather  (cost=133772.43..133772.64 rows=2 width=64)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=132772.43..132772.44 rows=1 width=64)
               ->  Parallel Hash Join  (cost=6003.00..132690.31 rows=4692 width=57)
                     Hash Cond: (lineitem.l_partkey = part.p_partkey)
                     ->  Parallel Seq Scan on lineitem  (cost=0.00..126675.00 rows=4692 width=40)
                           Filter: ((l_shipdate >= '1997-06-01'::date) AND (l_shipdate < '1997-07-01'::date))
                     ->  Parallel Hash  (cost=4961.33..4961.33 rows=83333 width=25)
                           ->  Parallel Seq Scan on part  (cost=0.00..4961.33 rows=83333 width=25)
 JIT:
   Functions: 17
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(13 rows)

COMMIT;
COMMIT

Query 14 execution times in seconds: 0.179,0.182,0.180,0.169,0.180,0.189,0.181,0.192,0.180,0.192
Average execution time: 0.1824 seconds

BEGIN;
BEGIN
create or replace view revenue0 (supplier_no, total_revenue) as
	select
		l_suppkey,
		sum(l_extendedprice * (1 - l_discount))
	from
		lineitem
	where
		l_shipdate >= '1994-05-01'
		and l_shipdate < date'1994-05-01' + interval '90 days'
	group by
		l_suppkey;
CREATE VIEW
EXPLAIN
select
	s_suppkey,
	s_name,
	s_address,
	s_phone,
	total_revenue
from
	supplier,
	revenue0
where
	s_suppkey = supplier_no
	and total_revenue = (
		select
			max(total_revenue)
		from
			revenue0
	)
order by
	s_suppkey;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=256037.90..256159.25 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=128076.46..128076.47 rows=1 width=32)
           ->  Finalize GroupAggregate  (cost=127961.14..128073.96 rows=200 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather Merge  (cost=127961.14..128068.46 rows=400 width=36)
                       Workers Planned: 2
                       ->  Partial GroupAggregate  (cost=126961.12..127022.27 rows=200 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Sort  (cost=126961.12..126972.85 rows=4692 width=40)
                                   Sort Key: lineitem_1.l_suppkey
                                   ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..126675.00 rows=4692 width=40)
                                         Filter: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-07-30 00:00:00'::timestamp without time zone))
   ->  Finalize GroupAggregate  (cost=127961.14..128074.46 rows=1 width=36)
         Group Key: lineitem.l_suppkey
         Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
         ->  Gather Merge  (cost=127961.14..128068.46 rows=400 width=36)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=126961.12..127022.27 rows=200 width=36)
                     Group Key: lineitem.l_suppkey
                     ->  Sort  (cost=126961.12..126972.85 rows=4692 width=40)
                           Sort Key: lineitem.l_suppkey
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..126675.00 rows=4692 width=40)
                                 Filter: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-07-30 00:00:00'::timestamp without time zone))
   ->  Index Scan using supplier_pkey on supplier  (cost=0.29..8.30 rows=1 width=71)
         Index Cond: (s_suppkey = lineitem.l_suppkey)
 JIT:
   Functions: 31
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(29 rows)

drop view revenue0;
DROP VIEW
COMMIT;
COMMIT

Query 15 execution times in seconds: 0.194,0.200,0.197,0.195,0.196,0.178,0.194,0.189,0.183,0.186
Average execution time: 0.1912 seconds

BEGIN;
BEGIN
EXPLAIN
select
	p_brand,
	p_type,
	p_size,
	count(distinct ps_suppkey) as supplier_cnt
from
	partsupp,
	part
where
	p_partkey = ps_partkey
	and p_brand <> 'Brand#43'
	and p_type not like 'PROMO BURNISHED%'
	and p_size in (43, 16, 40, 21, 38, 4, 36, 30)
	and ps_suppkey not in (
		select
			s_suppkey
		from
			supplier
		where
			s_comment like '%Customer%Complaints%'
	)
group by
	p_brand,
	p_type,
	p_size
order by
	supplier_cnt desc,
	p_brand,
	p_type,
	p_size;
                                                                                          QUERY PLAN                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=35747.57..35787.37 rows=15921 width=44)
   Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
   ->  GroupAggregate  (cost=27040.95..34636.39 rows=15921 width=44)
         Group Key: part.p_brand, part.p_type, part.p_size
         ->  Gather Merge  (cost=27040.95..33889.18 rows=58800 width=40)
               Workers Planned: 2
               ->  Sort  (cost=26040.93..26102.18 rows=24500 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Parallel Hash Join  (cost=6712.89..24254.82 rows=24500 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..17452.85 rows=166667 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Parallel Hash  (cost=6211.33..6211.33 rows=12250 width=40)
                                 ->  Parallel Seq Scan on part  (cost=0.00..6211.33 rows=12250 width=40)
                                       Filter: ((p_brand <> 'Brand#43'::bpchar) AND ((p_type)::text !~~ 'PROMO BURNISHED%'::text) AND (p_size = ANY ('{43,16,40,21,38,4,36,30}'::integer[])))
(18 rows)

COMMIT;
COMMIT

Query 16 execution times in seconds: 0.141,0.143,0.139,0.142,0.143,0.137,0.143,0.143,0.142,0.138
Average execution time: 0.1411 seconds

BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice) / 7.0 as avg_yearly
from
	lineitem,
	part
where
	p_partkey = l_partkey
	and p_brand = 'Brand#34'
	and p_container = 'WRAP DRUM'
	and l_quantity < (
		select
			0.2 * avg(l_quantity)
		from
			lineitem
		where
			l_partkey = p_partkey
	);
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=710544.89..710544.90 rows=1 width=32)
   ->  Hash Join  (cost=6398.93..710543.14 rows=698 width=18)
         Hash Cond: (lineitem.l_partkey = part.p_partkey)
         Join Filter: (lineitem.l_quantity < (SubPlan 1))
         ->  Seq Scan on lineitem  (cost=0.00..135120.00 rows=2252000 width=40)
         ->  Hash  (cost=6396.60..6396.60 rows=186 width=4)
               ->  Gather  (cost=1000.00..6396.60 rows=186 width=4)
                     Workers Planned: 2
                     ->  Parallel Seq Scan on part  (cost=0.00..5378.00 rows=78 width=4)
                           Filter: ((p_brand = 'Brand#34'::bpchar) AND (p_container = 'WRAP DRUM'::bpchar))
         SubPlan 1
           ->  Aggregate  (cost=140778.15..140778.17 rows=1 width=32)
                 ->  Seq Scan on lineitem lineitem_1  (cost=0.00..140750.00 rows=11260 width=18)
                       Filter: (l_partkey = part.p_partkey)
 JIT:
   Functions: 24
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

COMMIT;
COMMIT

Query 17 execution times in seconds: 0.189,0.191,0.190,0.184,0.190,0.189,0.179,0.190,0.186,0.186
Average execution time: 0.1874 seconds

BEGIN;
BEGIN
EXPLAIN
select
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice,
	sum(l_quantity)
from
	customer,
	orders,
	lineitem
where
	o_orderkey in (
		select
			l_orderkey
		from
			lineitem
		group by
			l_orderkey having
				sum(l_quantity) > 313
	)
	and c_custkey = o_custkey
	and o_orderkey = l_orderkey
group by
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice
order by
	o_totalprice desc,
	o_orderdate
LIMIT 100;
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=149141.10..149141.35 rows=100 width=71)
   ->  Sort  (cost=149141.10..149141.35 rows=101 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=149135.46..149137.74 rows=101 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Sort  (cost=149135.46..149135.72 rows=101 width=57)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     ->  Nested Loop  (cost=127686.44..149132.10 rows=101 width=57)
                           ->  Nested Loop  (cost=127686.01..128333.68 rows=67 width=43)
                                 ->  Nested Loop  (cost=127685.59..128303.65 rows=67 width=24)
                                       ->  Finalize GroupAggregate  (cost=127685.17..127737.84 rows=67 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Gather Merge  (cost=127685.17..127731.84 rows=400 width=36)
                                                   Workers Planned: 2
                                                   ->  Sort  (cost=126685.14..126685.64 rows=200 width=36)
                                                         Sort Key: lineitem_1.l_orderkey
                                                         ->  Partial HashAggregate  (cost=126675.00..126677.50 rows=200 width=36)
                                                               Group Key: lineitem_1.l_orderkey
                                                               ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..121983.33 rows=938333 width=22)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..8.45 rows=1 width=20)
                                             Index Cond: (o_orderkey = lineitem_1.l_orderkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.42..0.45 rows=1 width=23)
                                       Index Cond: (c_custkey = orders.o_custkey)
                           ->  Index Scan using lineitem_pkey on lineitem  (cost=0.43..197.82 rows=11260 width=22)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 26
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(29 rows)

COMMIT;
COMMIT

Query 18 execution times in seconds: 0.180,0.179,0.185,0.196,0.192,0.182,0.173,0.198,0.190,0.194
Average execution time: 0.1869 seconds

BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice* (1 - l_discount)) as revenue
from
	lineitem,
	part
where
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#25'
		and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')
		and l_quantity >= 9 and l_quantity <= 9+10
		and p_size between 1 and 5
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#55'
		and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')
		and l_quantity >= 10 and l_quantity <= 10+10
		and p_size between 1 and 10
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#23'
		and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')
		and l_quantity >= 24 and l_quantity <= 24+10
		and p_size between 1 and 15
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	);


 Aggregate  (cost=141758.64..141758.65 rows=1 width=32)
   ->  Gather  (cost=1000.42..141758.63 rows=1 width=36)
         Workers Planned: 2
         ->  Nested Loop  (cost=0.42..140758.53 rows=1 width=36)
               ->  Parallel Seq Scan on lineitem  (cost=0.00..140750.00 rows=1 width=58)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '9'::numeric) AND (l_quantity <= '19'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '24'::numeric) AND (l_quantity <= '34'::numeric))))
               ->  Index Scan using part_pkey on part  (cost=0.42..8.52 rows=1 width=30)
                     Index Cond: (p_partkey = lineitem.l_partkey)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#25'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#55'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#23'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))) AND (((p_brand = 'Brand#25'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (lineitem.l_quantity >= '9'::numeric) AND (lineitem.l_quantity <= '19'::numeric) AND (p_size <= 5)) OR ((p_brand = 'Brand#55'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (lineitem.l_quantity >= '10'::numeric) AND (lineitem.l_quantity <= '20'::numeric) AND (p_size <= 10)) OR ((p_brand = 'Brand#23'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (lineitem.l_quantity >= '24'::numeric) AND (lineitem.l_quantity <= '34'::numeric) AND (p_size <= 15))))
 JIT:
   Functions: 10
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(12 rows)

COMMIT;
COMMIT

Query 19 execution times in seconds: 0.195,0.192,0.194,0.192,0.190,0.199,0.186,0.190,0.191,0.192
Average execution time: 0.1921 seconds

BEGIN;
BEGIN
EXPLAIN
select
	s_name,
	s_address
from
	supplier,
	nation
where
	s_suppkey in (
		select
			ps_suppkey
		from
			partsupp
		where
			ps_partkey in (
				select
					p_partkey
				from
					part
				where
					p_name like 'orchid%'
			)
			and ps_availqty > (
				select
					0.5 * sum(l_quantity)
				from
					lineitem
				where
					l_partkey = ps_partkey
					and l_suppkey = ps_suppkey
					and l_shipdate >= '1994-01-01'
					and l_shipdate < cast(date '1994-01-01' + interval '1 year' as date)
			)
	)
	and s_nationkey = n_nationkey
	and n_name = 'BRAZIL'
order by
	s_name;
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=744416853.62..744416853.66 rows=16 width=51)
   Sort Key: supplier.s_name
   ->  Nested Loop Semi Join  (cost=1.13..744416853.30 rows=16 width=51)
         ->  Nested Loop  (cost=0.29..658.91 rows=59 width=55)
               Join Filter: (nation.n_nationkey = supplier.s_nationkey)
               ->  Index Scan using supplier_pkey on supplier  (cost=0.29..496.78 rows=10000 width=59)
               ->  Materialize  (cost=0.00..12.13 rows=1 width=4)
                     ->  Seq Scan on nation  (cost=0.00..12.12 rows=1 width=4)
                           Filter: (n_name = 'BRAZIL'::bpchar)
         ->  Nested Loop  (cost=0.84..12617223.62 rows=1 width=4)
               ->  Index Scan using partsupp_pkey on partsupp  (cost=0.42..12617209.85 rows=27 width=8)
                     Index Cond: (ps_suppkey = supplier.s_suppkey)
                     Filter: ((ps_availqty)::numeric > (SubPlan 1))
                     SubPlan 1
                       ->  Aggregate  (cost=157640.01..157640.02 rows=1 width=32)
                             ->  Seq Scan on lineitem  (cost=0.00..157640.00 rows=1 width=18)
                                   Filter: ((l_shipdate >= '1994-01-01'::date) AND (l_shipdate < '1995-01-01'::date) AND (l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
               ->  Index Scan using part_pkey on part  (cost=0.42..0.51 rows=1 width=4)
                     Index Cond: (p_partkey = partsupp.ps_partkey)
                     Filter: ((p_name)::text ~~ 'orchid%'::text)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(23 rows)

COMMIT;
COMMIT

Query 20 execution times in seconds: 0.192,0.193,0.180,0.176,0.191,0.186,0.198,0.192,0.193,0.197
Average execution time: 0.1898 seconds

BEGIN;
BEGIN
EXPLAIN
select
	s_name,
	count(*) as numwait
from
	supplier,
	lineitem l1,
	orders,
	nation
where
	s_suppkey = l1.l_suppkey
	and o_orderkey = l1.l_orderkey
	and o_orderstatus = 'F'
	and l1.l_receiptdate > l1.l_commitdate
	and exists (
		select
			*
		from
			lineitem l2
		where
			l2.l_orderkey = l1.l_orderkey
			and l2.l_suppkey <> l1.l_suppkey
	)
	and not exists (
		select
			*
		from
			lineitem l3
		where
			l3.l_orderkey = l1.l_orderkey
			and l3.l_suppkey <> l1.l_suppkey
			and l3.l_receiptdate > l3.l_commitdate
	)
	and s_nationkey = n_nationkey
	and n_name = 'INDIA'
group by
	s_name
order by
	numwait desc,
	s_name
LIMIT 100;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=333824.00..333824.25 rows=100 width=34)
   ->  Sort  (cost=333824.00..333825.34 rows=535 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  Finalize GroupAggregate  (cost=333740.59..333803.55 rows=535 width=34)
               Group Key: supplier.s_name
               ->  Gather Merge  (cost=333740.59..333795.97 rows=446 width=34)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=332740.57..332744.47 rows=223 width=34)
                           Group Key: supplier.s_name
                           ->  Sort  (cost=332740.57..332741.13 rows=223 width=26)
                                 Sort Key: supplier.s_name
                                 ->  Nested Loop Anti Join  (cost=137742.13..332731.87 rows=223 width=26)
                                       ->  Nested Loop  (cost=137741.70..267543.23 rows=446 width=34)
                                             ->  Parallel Hash Semi Join  (cost=137741.28..266983.23 rows=920 width=38)
                                                   Hash Cond: (l1.l_orderkey = l2.l_orderkey)
                                                   Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                                                   ->  Hash Join  (cost=362.78..125883.32 rows=1840 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Seq Scan on lineitem l1  (cost=0.00..124329.17 rows=312778 width=8)
                                                               Filter: (l_receiptdate > l_commitdate)
                                                         ->  Hash  (cost=362.04..362.04 rows=59 width=30)
                                                               ->  Hash Join  (cost=12.14..362.04 rows=59 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=34)
                                                                     ->  Hash  (cost=12.12..12.12 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..12.12 rows=1 width=4)
                                                                                 Filter: (n_name = 'INDIA'::bpchar)
                                                   ->  Parallel Hash  (cost=121983.33..121983.33 rows=938333 width=8)
                                                         ->  Parallel Seq Scan on lineitem l2  (cost=0.00..121983.33 rows=938333 width=8)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.43..0.61 rows=1 width=4)
                                                   Index Cond: (o_orderkey = l1.l_orderkey)
                                                   Filter: (o_orderstatus = 'F'::bpchar)
                                       ->  Index Scan using lineitem_pkey on lineitem l3  (cost=0.43..254.47 rows=3735 width=8)
                                             Index Cond: (l_orderkey = l1.l_orderkey)
                                             Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
 JIT:
   Functions: 51
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(38 rows)

COMMIT;
COMMIT

Query 21 execution times in seconds: 0.201,0.203,0.209,0.216,0.199,0.204,0.200,0.201,0.185,0.195
Average execution time: 0.2013 seconds

BEGIN;
BEGIN
EXPLAIN
select
	cntrycode,
	count(*) as numcust,
	sum(c_acctbal) as totacctbal
from
	(
		select
			substring(c_phone from 1 for 2) as cntrycode,
			c_acctbal
		from
			customer
		where
			substring(c_phone from 1 for 2) in
				('10', '30', '19', '24', '28', '15', '12')
			and c_acctbal > (
				select
					avg(c_acctbal)
				from
					customer
				where
					c_acctbal > 0.00
					and substring(c_phone from 1 for 2) in
						('10', '30', '19', '24', '28', '15', '12')
			)
			and not exists (
				select
					*
				from
					orders
				where
					o_custkey = c_custkey
			)
	) as vip
group by
	cntrycode
order by
	cntrycode;
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=50520.69..50620.33 rows=747 width=72)
   Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
   InitPlan 1
     ->  Finalize Aggregate  (cost=6245.81..6245.82 rows=1 width=32)
           ->  Gather  (cost=6245.59..6245.80 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5245.59..5245.60 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5240.62 rows=1983 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{10,30,19,24,28,15,12}'::text[])))
   ->  Gather Merge  (cost=44274.87..44355.22 rows=622 width=72)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=43274.85..43283.40 rows=311 width=72)
               Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Sort  (cost=43274.85..43275.62 rows=311 width=38)
                     Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                     ->  Parallel Hash Right Anti Join  (cost=5249.74..43261.97 rows=311 width=38)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Parallel Seq Scan on orders  (cost=0.00..32386.00 rows=625000 width=4)
                           ->  Parallel Hash  (cost=5240.62..5240.62 rows=729 width=26)
                                 ->  Parallel Seq Scan on customer  (cost=0.00..5240.62 rows=729 width=26)
                                       Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{10,30,19,24,28,15,12}'::text[])))
(21 rows)

COMMIT;
COMMIT

Query 22 execution times in seconds: 0.133,0.137,0.125,0.131,0.140,0.152,0.142,0.135,0.147,0.139
Average execution time: 0.1381 seconds


