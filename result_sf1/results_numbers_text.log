=== Experiment: numbers_text ===
INDEX_ALL=0
INDEX_NUMBERS=1
INDEX_DATES=0
INDEX_TEXT=1

[Info] Running drop_indexes.sh
[Info] Dropping date indexes
[Info] Keeping numbers indexes
[Info] Keeping text indexes
[Info] Running create_indexes.sh
[Info] Creating indexes for text
[Info] Creating indexes for numbers

[Info] Running queries(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22) for numbers_text
BEGIN;
BEGIN
EXPLAIN
select
	l_returnflag,
	l_linestatus,
	sum(l_quantity) as sum_qty,
	sum(l_extendedprice) as sum_base_price,
	sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
	avg(l_quantity) as avg_qty,
	avg(l_extendedprice) as avg_price,
	avg(l_discount) as avg_disc,
	count(*) as count_order
from
	lineitem
where
	l_shipdate <= date '1998-12-01' - interval '104 days'
group by
	l_returnflag,
	l_linestatus
order by
	l_returnflag,
	l_linestatus;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=230688.04..230690.00 rows=6 width=236)
   Group Key: l_returnflag, l_linestatus
   ->  Gather Merge  (cost=230688.04..230689.44 rows=12 width=236)
         Workers Planned: 2
         ->  Sort  (cost=229688.02..229688.04 rows=6 width=236)
               Sort Key: l_returnflag, l_linestatus
               ->  Partial HashAggregate  (cost=229687.81..229687.94 rows=6 width=236)
                     Group Key: l_returnflag, l_linestatus
                     ->  Parallel Seq Scan on lineitem  (cost=0.00..143856.33 rows=2452328 width=25)
                           Filter: (l_shipdate <= '1998-08-19 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 9
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(13 rows)

COMMIT;
COMMIT

Query 1 executed in 0.191 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	s_acctbal,
	s_name,
	n_name,
	p_partkey,
	p_mfgr,
	s_address,
	s_phone,
	s_comment
from
	part,
	supplier,
	partsupp,
	nation,
	region
where
	p_partkey = ps_partkey
	and s_suppkey = ps_suppkey
	and p_size = 9
	and p_type like '%TIN'
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'AMERICA'
	and ps_supplycost = (
		select
			min(ps_supplycost)
		from
			partsupp,
			supplier,
			nation,
			region
		where
			p_partkey = ps_partkey
			and s_suppkey = ps_suppkey
			and s_nationkey = n_nationkey
			and n_regionkey = r_regionkey
			and r_name = 'AMERICA'
	)
order by
	s_acctbal desc,
	n_name,
	s_name,
	p_partkey
LIMIT 100;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=69293.47..69293.48 rows=1 width=270)
   ->  Sort  (cost=69293.47..69293.48 rows=1 width=270)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Hash Join  (cost=38476.81..69293.46 rows=1 width=270)
               Hash Cond: ((part.p_partkey = partsupp.ps_partkey) AND ((SubPlan 1) = partsupp.ps_supplycost))
               ->  Bitmap Heap Scan on part  (cost=47.81..4383.79 rows=862 width=30)
                     Recheck Cond: (p_size = 9)
                     Filter: ((p_type)::text ~~ '%TIN'::text)
                     ->  Bitmap Index Scan on p_s  (cost=0.00..47.59 rows=4173 width=0)
                           Index Cond: (p_size = 9)
               ->  Hash  (cost=30560.00..30560.00 rows=160000 width=250)
                     ->  Hash Join  (cost=407.96..30560.00 rows=160000 width=250)
                           Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on partsupp  (cost=0.00..25560.00 rows=800000 width=14)
                           ->  Hash  (cost=382.96..382.96 rows=2000 width=244)
                                 ->  Hash Join  (cost=2.46..382.96 rows=2000 width=244)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=144)
                                       ->  Hash  (cost=2.40..2.40 rows=5 width=108)
                                             ->  Hash Join  (cost=1.07..2.40 rows=5 width=108)
                                                   Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=112)
                                                   ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                         ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                               Filter: (r_name = 'AMERICA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=48.70..48.71 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..48.70 rows=1 width=6)
                             Join Filter: (region_1.r_regionkey = nation_1.n_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.85..47.58 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..46.96 rows=4 width=10)
                                         ->  Index Scan using partsupp_pkey on partsupp partsupp_1  (cost=0.42..13.75 rows=4 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..8.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
(39 rows)

COMMIT;
COMMIT

Query 2 executed in 0.152 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	l_orderkey,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	o_orderdate,
	o_shippriority
from
	customer,
	orders,
	lineitem
where
	c_mktsegment = 'AUTOMOBILE'
	and c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate < date '1995-03-07'
	and l_shipdate > date '1995-03-07'
group by
	l_orderkey,
	o_orderdate,
	o_shippriority
order by
	revenue desc,
	o_orderdate
LIMIT 10;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=192298.70..192298.73 rows=10 width=44)
   ->  Sort  (cost=192298.70..193068.83 rows=308050 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=145101.29..185641.85 rows=308050 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=145101.29..178582.38 rows=256708 width=44)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=144101.26..147951.88 rows=128354 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=144101.26..144422.15 rows=128354 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Nested Loop  (cost=4238.19..130575.07 rows=128354 width=24)
                                       ->  Parallel Hash Join  (cost=4237.75..38973.92 rows=58741 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..33948.50 rows=300055 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=4084.82..4084.82 rows=12235 width=4)
                                                   ->  Parallel Bitmap Heap Scan on customer  (cost=331.87..4084.82 rows=12235 width=4)
                                                         Recheck Cond: (c_mktsegment = 'AUTOMOBILE'::bpchar)
                                                         ->  Bitmap Index Scan on idx_customer_c_mktsegment  (cost=0.00..324.53 rows=29365 width=0)
                                                               Index Cond: (c_mktsegment = 'AUTOMOBILE'::bpchar)
                                       ->  Index Scan using lineitem_pkey on lineitem  (cost=0.43..1.47 rows=9 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_shipdate > '1995-03-07'::date)
 JIT:
   Functions: 29
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(27 rows)

COMMIT;
COMMIT

Query 3 executed in 0.186 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	o_orderpriority,
	count(*) as order_count
from
	orders
where
	o_orderdate >= date '1996-07-01'
	and o_orderdate < cast(date '1996-07-01' + interval '3 month' as date)
	and exists (
		select
			*
		from
			lineitem
		where
			l_orderkey = o_orderkey
			and l_commitdate < l_receiptdate
	)
group by
	o_orderpriority
order by
	o_orderpriority;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=84331.92..84379.06 rows=5 width=24)
   Group Key: orders.o_orderpriority
   ->  Gather Merge  (cost=84331.92..84378.96 rows=10 width=24)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=83331.90..83377.78 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Sort  (cost=83331.90..83347.18 rows=6111 width=16)
                     Sort Key: orders.o_orderpriority
                     ->  Nested Loop Semi Join  (cost=0.43..82947.60 rows=6111 width=16)
                           ->  Parallel Seq Scan on orders  (cost=0.00..35511.00 rows=23939 width=20)
                                 Filter: ((o_orderdate >= '1996-07-01'::date) AND (o_orderdate < '1996-10-01'::date))
                           ->  Index Scan using lineitem_pkey on lineitem  (cost=0.43..7.12 rows=5 width=4)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Filter: (l_commitdate < l_receiptdate)
(14 rows)

COMMIT;
COMMIT

Query 4 executed in 0.144 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	n_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue
from
	customer,
	orders,
	lineitem,
	supplier,
	nation,
	region
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and l_suppkey = s_suppkey
	and c_nationkey = s_nationkey
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'EUROPE'
	and o_orderdate >= date '1995-01-01'
	and o_orderdate < date '1995-01-01' + interval '1 year'
group by
	n_name
order by
	revenue desc;
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=102240.12..102240.18 rows=25 width=136)
   Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
   ->  Finalize GroupAggregate  (cost=102195.23..102239.54 rows=25 width=136)
         Group Key: nation.n_name
         ->  Gather Merge  (cost=102195.23..102238.85 rows=50 width=136)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=101195.20..101233.05 rows=25 width=136)
                     Group Key: nation.n_name
                     ->  Sort  (cost=101195.20..101202.71 rows=3003 width=116)
                           Sort Key: nation.n_name
                           ->  Hash Join  (cost=5216.52..101021.75 rows=3003 width=116)
                                 Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                 ->  Nested Loop  (cost=4743.52..100152.86 rows=75408 width=128)
                                       ->  Parallel Hash Join  (cost=4743.09..40686.02 rows=18848 width=116)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..35511.00 rows=94241 width=8)
                                                   Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate < '1996-01-01 00:00:00'::timestamp without time zone))
                                             ->  Parallel Hash  (cost=4586.84..4586.84 rows=12500 width=116)
                                                   ->  Hash Join  (cost=2.46..4586.84 rows=12500 width=116)
                                                         Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..4225.00 rows=62500 width=8)
                                                         ->  Hash  (cost=2.40..2.40 rows=5 width=108)
                                                               ->  Hash Join  (cost=1.07..2.40 rows=5 width=108)
                                                                     Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=112)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'EUROPE'::bpchar)
                                       ->  Index Scan using lineitem_pkey on lineitem  (cost=0.43..3.00 rows=16 width=20)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                 ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
 JIT:
   Functions: 53
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(35 rows)

COMMIT;
COMMIT

Query 5 executed in 0.200 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice * l_discount) as revenue
from
	lineitem
where
	l_shipdate >= date '1995-01-01'
	and l_shipdate < cast(date '1995-01-01' + interval '1 year' as date)
	and l_discount between 0.02 - 0.01 and 0.02 + 0.01
	and l_quantity < 25;
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=170107.24..170107.25 rows=1 width=32)
   ->  Gather  (cost=170107.01..170107.22 rows=2 width=32)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=169107.01..169107.02 rows=1 width=32)
               ->  Parallel Seq Scan on lineitem  (cost=0.00..168861.39 rows=49124 width=12)
                     Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate < '1996-01-01'::date) AND (l_discount >= 0.01) AND (l_discount <= 0.03) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 7
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(9 rows)

COMMIT;
COMMIT

Query 6 executed in 0.172 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	supp_nation,
	cust_nation,
	l_year,
	sum(volume) as revenue
from
	(
		select
			n1.n_name as supp_nation,
			n2.n_name as cust_nation,
			extract(year from l_shipdate) as l_year,
			l_extendedprice * (1 - l_discount) as volume
		from
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2
		where
			s_suppkey = l_suppkey
			and o_orderkey = l_orderkey
			and c_custkey = o_custkey
			and s_nationkey = n1.n_nationkey
			and c_nationkey = n2.n_nationkey
			and (
				(n1.n_name = 'ALGERIA' and n2.n_name = 'CHINA')
				or (n1.n_name = 'CHINA' and n2.n_name = 'ALGERIA')
			)
			and l_shipdate between date '1995-01-01' and date '1996-12-31'
	) as shipping
group by
	supp_nation,
	cust_nation,
	l_year
order by
	supp_nation,
	cust_nation,
	l_year;
                                                                                     QUERY PLAN                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=100589.96..101404.71 rows=6028 width=272)
   Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
   ->  Gather Merge  (cost=100589.96..101251.49 rows=5024 width=272)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=99589.94..99671.58 rows=2512 width=272)
               Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Sort  (cost=99589.94..99596.22 rows=2512 width=252)
                     Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                     ->  Hash Join  (cost=4846.31..99448.08 rows=2512 width=252)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           Join Filter: (((n1.n_name = 'ALGERIA'::bpchar) AND (n2.n_name = 'CHINA'::bpchar)) OR ((n1.n_name = 'CHINA'::bpchar) AND (n2.n_name = 'ALGERIA'::bpchar)))
                           ->  Nested Loop  (cost=4481.21..98752.79 rows=60626 width=124)
                                 ->  Parallel Hash Join  (cost=4480.77..39418.86 rows=50000 width=108)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..32386.00 rows=625000 width=8)
                                       ->  Parallel Hash  (cost=4418.27..4418.27 rows=5000 width=108)
                                             ->  Hash Join  (cost=1.40..4418.27 rows=5000 width=108)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..4225.00 rows=62500 width=8)
                                                   ->  Hash  (cost=1.38..1.38 rows=2 width=108)
                                                         ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=108)
                                                               Filter: ((n_name = 'CHINA'::bpchar) OR (n_name = 'ALGERIA'::bpchar))
                                 ->  Index Scan using lineitem_pkey on lineitem  (cost=0.43..1.14 rows=5 width=24)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=355.10..355.10 rows=800 width=108)
                                 ->  Hash Join  (cost=1.40..355.10 rows=800 width=108)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=108)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=108)
                                                   Filter: ((n_name = 'ALGERIA'::bpchar) OR (n_name = 'CHINA'::bpchar))
 JIT:
   Functions: 57
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(35 rows)

COMMIT;
COMMIT

Query 7 executed in 0.203 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	o_year,
	sum(case
		when nation = 'CHINA' then volume
		else 0
	end) / sum(volume) as mkt_share
from
	(
		select
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) as volume,
			n2.n_name as nation
		from
			part,
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2,
			region
		where
			p_partkey = l_partkey
			and s_suppkey = l_suppkey
			and l_orderkey = o_orderkey
			and o_custkey = c_custkey
			and c_nationkey = n1.n_nationkey
			and n1.n_regionkey = r_regionkey
			and r_name = 'ASIA'
			and s_nationkey = n2.n_nationkey
			and o_orderdate between date '1995-01-01' and date '1996-12-31'
			and p_type = 'LARGE POLISHED TIN'
	) as all_nations
group by
	o_year
order by
	o_year;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=121869.82..122212.29 rows=2390 width=64)
   Group Key: (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=121869.82..122139.59 rows=1992 width=96)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=120869.80..120909.64 rows=996 width=96)
               Group Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=120869.80..120872.29 rows=996 width=148)
                     Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                     ->  Hash Join  (cost=7544.57..120820.20 rows=996 width=148)
                           Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                           ->  Nested Loop  (cost=7543.00..120813.09 rows=996 width=20)
                                 ->  Parallel Hash Join  (cost=7542.72..120510.42 rows=1000 width=20)
                                       Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                       ->  Nested Loop  (cost=4743.52..117312.01 rows=152075 width=24)
                                             ->  Parallel Hash Join  (cost=4743.09..41125.18 rows=38011 width=8)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..35511.00 rows=190055 width=12)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Parallel Hash  (cost=4586.84..4586.84 rows=12500 width=4)
                                                         ->  Hash Join  (cost=2.46..4586.84 rows=12500 width=4)
                                                               Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..4225.00 rows=62500 width=8)
                                                               ->  Hash  (cost=2.40..2.40 rows=5 width=4)
                                                                     ->  Hash Join  (cost=1.07..2.40 rows=5 width=4)
                                                                           Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'ASIA'::bpchar)
                                             ->  Index Scan using lineitem_pkey on lineitem  (cost=0.43..1.84 rows=16 width=24)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2789.48..2789.48 rows=777 width=4)
                                             ->  Parallel Bitmap Heap Scan on part  (cost=18.66..2789.48 rows=777 width=4)
                                                   Recheck Cond: ((p_type)::text = 'LARGE POLISHED TIN'::text)
                                                   ->  Bitmap Index Scan on idx_part_p_type  (cost=0.00..18.33 rows=1321 width=0)
                                                         Index Cond: ((p_type)::text = 'LARGE POLISHED TIN'::text)
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                 ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=108)
 JIT:
   Functions: 63
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(43 rows)

COMMIT;
COMMIT

Query 8 executed in 0.190 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	nation,
	o_year,
	sum(amount) as sum_profit
from
	(
		select
			n_name as nation,
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount
		from
			part,
			supplier,
			lineitem,
			partsupp,
			orders,
			nation
		where
			s_suppkey = l_suppkey
			and ps_suppkey = l_suppkey
			and ps_partkey = l_partkey
			and p_partkey = l_partkey
			and o_orderkey = l_orderkey
			and s_nationkey = n_nationkey
			and p_name like '%medium%'
	) as profit
group by
	nation,
	o_year
order by
	nation,
	o_year desc;
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=264403.65..285302.55 rows=60150 width=168)
   Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=264403.65..283197.30 rows=120300 width=168)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=263403.62..268311.67 rows=60150 width=168)
               Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=263403.62..263904.35 rows=200290 width=159)
                     Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                     ->  Hash Join  (cost=187085.95..230019.86 rows=200290 width=159)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Hash Join  (cost=187084.38..228902.67 rows=200290 width=31)
                                 Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Parallel Seq Scan on orders  (cost=0.00..32386.00 rows=625000 width=8)
                                 ->  Parallel Hash  (cost=183210.76..183210.76 rows=200290 width=31)
                                       ->  Hash Join  (cost=154460.75..183210.76 rows=200290 width=31)
                                             Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                             ->  Parallel Hash Join  (cost=154012.75..182234.41 rows=201192 width=35)
                                                   Hash Cond: ((partsupp.ps_suppkey = lineitem.l_suppkey) AND (partsupp.ps_partkey = lineitem.l_partkey))
                                                   ->  Parallel Seq Scan on partsupp  (cost=0.00..20893.33 rows=333333 width=14)
                                                   ->  Parallel Hash  (cost=149422.87..149422.87 rows=201192 width=33)
                                                         ->  Parallel Hash Join  (cost=5253.84..149422.87 rows=201192 width=33)
                                                               Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                                               ->  Parallel Seq Scan on lineitem  (cost=0.00..137605.06 rows=2500506 width=29)
                                                               ->  Parallel Hash  (cost=5169.67..5169.67 rows=6734 width=4)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..5169.67 rows=6734 width=4)
                                                                           Filter: ((p_name)::text ~~ '%medium%'::text)
                                             ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                                   ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=108)
 JIT:
   Functions: 55
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(33 rows)

COMMIT;
COMMIT

Query 9 executed in 0.191 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	c_custkey,
	c_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	c_acctbal,
	n_name,
	c_address,
	c_phone,
	c_comment
from
	customer,
	orders,
	lineitem,
	nation
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate >= date '1994-06-01'
	and o_orderdate < cast(date '1994-06-01' + interval '3 month' as date)
	and l_returnflag = 'R'
	and c_nationkey = n_nationkey
group by
	c_custkey,
	c_name,
	c_acctbal,
	c_phone,
	n_name,
	c_address,
	c_comment
order by
	revenue desc
LIMIT 20;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=203305.13..203305.18 rows=20 width=280)
   ->  Sort  (cost=203305.13..203442.46 rows=54935 width=280)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=194785.21..201843.32 rows=54935 width=280)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=194785.21..200698.84 rows=45780 width=280)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=193785.19..194414.67 rows=22890 width=280)
                           Group Key: customer.c_custkey, nation.n_name
                           ->  Sort  (cost=193785.19..193842.42 rows=22890 width=260)
                                 Sort Key: customer.c_custkey, nation.n_name
                                 ->  Hash Join  (cost=42154.91..189310.18 rows=22890 width=260)
                                       Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                       ->  Parallel Hash Join  (cost=42153.35..189238.34 rows=22890 width=160)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Hash Join  (cost=35804.10..181262.00 rows=22890 width=16)
                                                   Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                                   ->  Parallel Seq Scan on lineitem  (cost=0.00..143856.33 rows=610123 width=16)
                                                         Filter: (l_returnflag = 'R'::bpchar)
                                                   ->  Parallel Hash  (cost=35511.00..35511.00 rows=23448 width=8)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..35511.00 rows=23448 width=8)
                                                               Filter: ((o_orderdate >= '1994-06-01'::date) AND (o_orderdate < '1994-09-01'::date))
                                             ->  Parallel Hash  (cost=4225.00..4225.00 rows=62500 width=148)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..4225.00 rows=62500 width=148)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=108)
 JIT:
   Functions: 40
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(29 rows)

COMMIT;
COMMIT

Query 10 executed in 0.186 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	ps_partkey,
	sum(ps_supplycost * ps_availqty) as value
from
	partsupp,
	supplier,
	nation
where
	ps_suppkey = s_suppkey
	and s_nationkey = n_nationkey
	and n_name = 'KENYA'
group by
	ps_partkey having
		sum(ps_supplycost * ps_availqty) > (
			select
				sum(ps_supplycost * ps_availqty) *         inf
			from
				partsupp,
				supplier,
				nation
			where
				ps_suppkey = s_suppkey
				and s_nationkey = n_nationkey
				and n_name = 'KENYA'
		)
order by
	value desc;
ERROR:  column "inf" does not exist
LINE 17:     sum(ps_supplycost * ps_availqty) *         inf
                                                        ^

Query 11 executed in 0.139 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	l_shipmode,
	sum(case
		when o_orderpriority = '1-URGENT'
			or o_orderpriority = '2-HIGH'
			then 1
		else 0
	end) as high_line_count,
	sum(case
		when o_orderpriority <> '1-URGENT'
			and o_orderpriority <> '2-HIGH'
			then 1
		else 0
	end) as low_line_count
from
	orders,
	lineitem
where
	o_orderkey = l_orderkey
	and l_shipmode in ('MAIL', 'TRUCK')
	and l_commitdate < l_receiptdate
	and l_shipdate < l_commitdate
	and l_receiptdate >= date '1993-01-01'
	and l_receiptdate < date '1993-01-01' + interval '1 year'
group by
	l_shipmode
order by
	l_shipmode;
                                                                                                                                     QUERY PLAN                                                                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=210290.05..210531.56 rows=7 width=27)
   Group Key: lineitem.l_shipmode
   ->  Gather Merge  (cost=210290.05..210531.38 rows=14 width=27)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=209290.03..209529.74 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Sort  (cost=209290.03..209319.99 rows=11982 width=27)
                     Sort Key: lineitem.l_shipmode
                     ->  Parallel Hash Join  (cost=169011.17..208478.34 rows=11982 width=27)
                           Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Parallel Seq Scan on orders  (cost=0.00..32386.00 rows=625000 width=20)
                           ->  Parallel Hash  (cost=168861.39..168861.39 rows=11982 width=15)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..168861.39 rows=11982 width=15)
                                       Filter: ((l_shipmode = ANY ('{MAIL,TRUCK}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1993-01-01'::date) AND (l_receiptdate < '1994-01-01 00:00:00'::timestamp without time zone))
 JIT:
   Functions: 21
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(17 rows)

COMMIT;
COMMIT

Query 12 executed in 0.195 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	c_count,
	count(*) as custdist
from
	(
		select
			c_custkey,
			count(o_orderkey)
		from
			customer left outer join orders on
				c_custkey = o_custkey
				and o_comment not like '%unusual%packages%'
		group by
			c_custkey
	) as c_orders (c_custkey, c_count)
group by
	c_count
order by
	custdist desc,
	c_count desc;
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=137253.49..137253.99 rows=200 width=16)
   Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
   ->  HashAggregate  (cost=137243.85..137245.85 rows=200 width=16)
         Group Key: count(orders.o_orderkey)
         ->  Finalize GroupAggregate  (cost=96991.40..134993.85 rows=150000 width=12)
               Group Key: customer.c_custkey
               ->  Gather Merge  (cost=96991.40..131993.85 rows=300000 width=12)
                     Workers Planned: 2
                     ->  Sort  (cost=95991.38..96366.38 rows=150000 width=12)
                           Sort Key: customer.c_custkey
                           ->  Partial HashAggregate  (cost=74196.43..80529.93 rows=150000 width=12)
                                 Group Key: customer.c_custkey
                                 Planned Partitions: 4
                                 ->  Parallel Hash Right Join  (cost=3822.69..39395.29 rows=618687 width=8)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..33948.50 rows=618687 width=8)
                                             Filter: ((o_comment)::text !~~ '%unusual%packages%'::text)
                                       ->  Parallel Hash  (cost=3041.44..3041.44 rows=62500 width=4)
                                             ->  Parallel Index Only Scan using customer_pkey on customer  (cost=0.42..3041.44 rows=62500 width=4)
 JIT:
   Functions: 18
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(22 rows)

COMMIT;
COMMIT

Query 13 executed in 0.191 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	100.00 * sum(case
		when p_type like 'PROMO%'
			then l_extendedprice * (1 - l_discount)
		else 0
	end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue
from
	lineitem,
	part
where
	l_partkey = p_partkey
	and l_shipdate >= date '1993-09-01'
	and l_shipdate < cast(date '1993-09-01' + interval '1 month' as date);
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=157779.40..157779.41 rows=1 width=32)
   ->  Gather  (cost=157779.16..157779.37 rows=2 width=64)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=156779.16..156779.17 rows=1 width=64)
               ->  Parallel Hash Join  (cost=6003.00..156198.12 rows=33202 width=33)
                     Hash Cond: (lineitem.l_partkey = part.p_partkey)
                     ->  Parallel Seq Scan on lineitem  (cost=0.00..150107.59 rows=33346 width=16)
                           Filter: ((l_shipdate >= '1993-09-01'::date) AND (l_shipdate < '1993-10-01'::date))
                     ->  Parallel Hash  (cost=4961.33..4961.33 rows=83333 width=25)
                           ->  Parallel Seq Scan on part  (cost=0.00..4961.33 rows=83333 width=25)
 JIT:
   Functions: 17
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(13 rows)

COMMIT;
COMMIT

Query 14 executed in 0.193 second(s).
BEGIN;
BEGIN
create or replace view revenue0 (supplier_no, total_revenue) as
	select
		l_suppkey,
		sum(l_extendedprice * (1 - l_discount))
	from
		lineitem
	where
		l_shipdate >= '1995-10-01'
		and l_shipdate < date'1995-10-01' + interval '90 days'
	group by
		l_suppkey;
CREATE VIEW
EXPLAIN
select
	s_suppkey,
	s_name,
	s_address,
	s_phone,
	total_revenue
from
	supplier,
	revenue0
where
	s_suppkey = supplier_no
	and total_revenue = (
		select
			max(total_revenue)
		from
			revenue0
	)
order by
	s_suppkey;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=308416.27..311368.96 rows=50 width=103)
   InitPlan 1
     ->  Aggregate  (cost=155580.89..155580.90 rows=1 width=32)
           ->  Finalize GroupAggregate  (cost=152835.09..155455.33 rows=10045 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather Merge  (cost=152835.09..155179.09 rows=20090 width=36)
                       Workers Planned: 2
                       ->  Sort  (cost=151835.07..151860.18 rows=10045 width=36)
                             Sort Key: lineitem_1.l_suppkey
                             ->  Partial HashAggregate  (cost=151041.80..151167.37 rows=10045 width=36)
                                   Group Key: lineitem_1.l_suppkey
                                   ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..150107.59 rows=93421 width=16)
                                         Filter: ((l_shipdate >= '1995-10-01'::date) AND (l_shipdate < '1995-12-30 00:00:00'::timestamp without time zone))
   ->  Finalize GroupAggregate  (cost=152835.09..155480.44 rows=50 width=36)
         Group Key: lineitem.l_suppkey
         Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
         ->  Gather Merge  (cost=152835.09..155179.09 rows=20090 width=36)
               Workers Planned: 2
               ->  Sort  (cost=151835.07..151860.18 rows=10045 width=36)
                     Sort Key: lineitem.l_suppkey
                     ->  Partial HashAggregate  (cost=151041.80..151167.37 rows=10045 width=36)
                           Group Key: lineitem.l_suppkey
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..150107.59 rows=93421 width=16)
                                 Filter: ((l_shipdate >= '1995-10-01'::date) AND (l_shipdate < '1995-12-30 00:00:00'::timestamp without time zone))
   ->  Index Scan using supplier_pkey on supplier  (cost=0.29..6.14 rows=1 width=71)
         Index Cond: (s_suppkey = lineitem.l_suppkey)
 JIT:
   Functions: 25
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(29 rows)

drop view revenue0;
DROP VIEW
COMMIT;
COMMIT

Query 15 executed in 0.198 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	p_brand,
	p_type,
	p_size,
	count(distinct ps_suppkey) as supplier_cnt
from
	partsupp,
	part
where
	p_partkey = ps_partkey
	and p_brand <> 'Brand#31'
	and p_type not like 'PROMO BURNISHED%'
	and p_size in (30, 12, 21, 31, 16, 44, 26, 23)
	and ps_suppkey not in (
		select
			s_suppkey
		from
			supplier
		where
			s_comment like '%Customer%Complaints%'
	)
group by
	p_brand,
	p_type,
	p_size
order by
	supplier_cnt desc,
	p_brand,
	p_type,
	p_size;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=34375.71..34415.55 rows=15933 width=44)
   Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
   ->  GroupAggregate  (cost=25656.16..33263.61 rows=15933 width=44)
         Group Key: part.p_brand, part.p_type, part.p_size
         ->  Gather Merge  (cost=25656.16..32515.34 rows=58894 width=40)
               Workers Planned: 2
               ->  Sort  (cost=24656.14..24717.49 rows=24539 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Parallel Hash Join  (cost=5324.97..22866.91 rows=24539 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..17452.85 rows=166667 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Parallel Hash  (cost=4823.17..4823.17 rows=12270 width=40)
                                 ->  Parallel Bitmap Heap Scan on part  (cost=366.42..4823.17 rows=12270 width=40)
                                       Recheck Cond: (p_size = ANY ('{30,12,21,31,16,44,26,23}'::integer[]))
                                       Filter: ((p_brand <> 'Brand#31'::bpchar) AND ((p_type)::text !~~ 'PROMO BURNISHED%'::text))
                                       ->  Bitmap Index Scan on p_s  (cost=0.00..359.06 rows=31560 width=0)
                                             Index Cond: (p_size = ANY ('{30,12,21,31,16,44,26,23}'::integer[]))
(21 rows)

COMMIT;
COMMIT

Query 16 executed in 0.149 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice) / 7.0 as avg_yearly
from
	lineitem,
	part
where
	p_partkey = l_partkey
	and p_brand = 'Brand#15'
	and p_container = 'MED DRUM'
	and l_quantity < (
		select
			0.2 * avg(l_quantity)
		from
			lineitem
		where
			l_partkey = p_partkey
	);
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=2065348.02..2065348.03 rows=1 width=32)
   ->  Hash Join  (cost=824.68..2065342.93 rows=2032 width=8)
         Hash Cond: (lineitem.l_partkey = part.p_partkey)
         Join Filter: (lineitem.l_quantity < (SubPlan 1))
         ->  Seq Scan on lineitem  (cost=0.00..172612.15 rows=6001215 width=17)
         ->  Hash  (cost=822.13..822.13 rows=204 width=4)
               ->  Bitmap Heap Scan on part  (cost=151.14..822.13 rows=204 width=4)
                     Recheck Cond: ((p_container = 'MED DRUM'::bpchar) AND (p_brand = 'Brand#15'::bpchar))
                     ->  BitmapAnd  (cost=151.14..151.14 rows=204 width=0)
                           ->  Bitmap Index Scan on idx_part_p_container  (cost=0.00..58.97 rows=5140 width=0)
                                 Index Cond: (p_container = 'MED DRUM'::bpchar)
                           ->  Bitmap Index Scan on idx_part_p_brand  (cost=0.00..91.82 rows=7920 width=0)
                                 Index Cond: (p_brand = 'Brand#15'::bpchar)
         SubPlan 1
           ->  Aggregate  (cost=187615.27..187615.28 rows=1 width=32)
                 ->  Seq Scan on lineitem lineitem_1  (cost=0.00..187615.19 rows=30 width=5)
                       Filter: (l_partkey = part.p_partkey)
 JIT:
   Functions: 24
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(20 rows)

COMMIT;
COMMIT

Query 17 executed in 0.186 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice,
	sum(l_quantity)
from
	customer,
	orders,
	lineitem
where
	o_orderkey in (
		select
			l_orderkey
		from
			lineitem
		group by
			l_orderkey having
				sum(l_quantity) > 315
	)
	and c_custkey = o_custkey
	and o_orderkey = l_orderkey
group by
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice
order by
	o_totalprice desc,
	o_orderdate
LIMIT 100;
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=667944.35..667944.60 rows=100 width=71)
   ->  Sort  (cost=667944.35..669221.03 rows=510671 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=583880.15..648426.87 rows=510671 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Gather Merge  (cost=583880.15..637787.88 rows=425560 width=71)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=582880.13..587667.68 rows=212780 width=71)
                           Group Key: customer.c_custkey, orders.o_orderkey
                           ->  Sort  (cost=582880.13..583412.08 rows=212780 width=44)
                                 Sort Key: customer.c_custkey, orders.o_orderkey
                                 ->  Nested Loop  (cost=458628.02..557501.66 rows=212780 width=44)
                                       ->  Parallel Hash Join  (cost=458627.59..492793.82 rows=53184 width=43)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Hash Join  (cost=453621.34..487647.96 rows=53184 width=24)
                                                   Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..32386.00 rows=625000 width=20)
                                                   ->  Hash  (cost=452025.81..452025.81 rows=127642 width=4)
                                                         ->  GroupAggregate  (cost=0.43..452025.81 rows=127642 width=4)
                                                               Group Key: lineitem_1.l_orderkey
                                                               Filter: (sum(lineitem_1.l_quantity) > '315'::numeric)
                                                               ->  Index Scan using lineitem_pkey on lineitem lineitem_1  (cost=0.43..416275.85 rows=6001215 width=9)
                                             ->  Parallel Hash  (cost=4225.00..4225.00 rows=62500 width=23)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..4225.00 rows=62500 width=23)
                                       ->  Index Scan using lineitem_pkey on lineitem  (cost=0.43..1.06 rows=16 width=9)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 36
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(29 rows)

COMMIT;
COMMIT

Query 18 executed in 0.192 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice* (1 - l_discount)) as revenue
from
	lineitem,
	part
where
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#44'
		and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')
		and l_quantity >= 10 and l_quantity <= 10+10
		and p_size between 1 and 5
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#11'
		and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')
		and l_quantity >= 14 and l_quantity <= 14+10
		and p_size between 1 and 10
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#14'
		and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')
		and l_quantity >= 29 and l_quantity <= 29+10
		and p_size between 1 and 15
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	);


 Finalize Aggregate  (cost=183355.11..183355.12 rows=1 width=32)
   ->  Gather  (cost=183354.88..183355.09 rows=2 width=32)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=182354.88..182354.89 rows=1 width=32)
               ->  Hash Join  (cost=13303.69..182354.53 rows=47 width=12)
                     Hash Cond: (lineitem.l_partkey = part.p_partkey)
                     Join Filter: (((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (lineitem.l_quantity >= '10'::numeric) AND (lineitem.l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#11'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (lineitem.l_quantity >= '14'::numeric) AND (lineitem.l_quantity <= '24'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#14'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (lineitem.l_quantity >= '29'::numeric) AND (lineitem.l_quantity <= '39'::numeric) AND (part.p_size <= 15)))
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=9291.49..178220.62 rows=46361 width=21)
                           Recheck Cond: (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[]))
                           Filter: ((l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '14'::numeric) AND (l_quantity <= '24'::numeric)) OR ((l_quantity >= '29'::numeric) AND (l_quantity <= '39'::numeric))))
                           ->  Bitmap Index Scan on idx_lineitem_l_shipmode  (cost=0.00..9263.67 rows=864375 width=0)
                                 Index Cond: (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[]))
                     ->  Hash  (cost=4006.16..4006.16 rows=484 width=30)
                           ->  Bitmap Heap Scan on part  (cost=2611.25..4006.16 rows=484 width=30)
                                 Recheck Cond: (((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5) AND (p_size >= 1)) OR ((p_brand = 'Brand#11'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10) AND (p_size >= 1)) OR ((p_brand = 'Brand#14'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15) AND (p_size >= 1)))
                                 ->  BitmapOr  (cost=2611.25..2611.25 rows=484 width=0)
                                       ->  BitmapAnd  (cost=597.29..597.29 rows=84 width=0)
                                             ->  Bitmap Index Scan on idx_part_p_brand  (cost=0.00..95.52 rows=8413 width=0)
                                                   Index Cond: (p_brand = 'Brand#44'::bpchar)
                                             ->  Bitmap Index Scan on idx_part_p_container  (cost=0.00..224.14 rows=19527 width=0)
                                                   Index Cond: (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[]))
                                             ->  Bitmap Index Scan on p_s  (cost=0.00..276.77 rows=20447 width=0)
                                                   Index Cond: ((p_size <= 5) AND (p_size >= 1))
                                       ->  BitmapAnd  (cost=873.45..873.45 rows=158 width=0)
                                             ->  Bitmap Index Scan on idx_part_p_brand  (cost=0.00..84.27 rows=7447 width=0)
                                                   Index Cond: (p_brand = 'Brand#11'::bpchar)
                                             ->  Bitmap Index Scan on idx_part_p_container  (cost=0.00..232.09 rows=20587 width=0)
                                                   Index Cond: (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[]))
                                             ->  Bitmap Index Scan on p_s  (cost=0.00..556.23 rows=41193 width=0)
                                                   Index Cond: ((p_size <= 10) AND (p_size >= 1))
                                       ->  BitmapAnd  (cost=1140.02..1140.02 rows=242 width=0)
                                             ->  Bitmap Index Scan on idx_part_p_brand  (cost=0.00..93.17 rows=8100 width=0)
                                                   Index Cond: (p_brand = 'Brand#14'::bpchar)
                                             ->  Bitmap Index Scan on idx_part_p_container  (cost=0.00..225.22 rows=19673 width=0)
                                                   Index Cond: (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[]))
                                             ->  Bitmap Index Scan on p_s  (cost=0.00..820.76 rows=60847 width=0)
                                                   Index Cond: ((p_size <= 15) AND (p_size >= 1))
 JIT:
   Functions: 23
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(40 rows)

COMMIT;
COMMIT

Query 19 executed in 0.181 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	s_name,
	s_address
from
	supplier,
	nation
where
	s_suppkey in (
		select
			ps_suppkey
		from
			partsupp
		where
			ps_partkey in (
				select
					p_partkey
				from
					part
				where
					p_name like 'orange%'
			)
			and ps_availqty > (
				select
					0.5 * sum(l_quantity)
				from
					lineitem
				where
					l_partkey = ps_partkey
					and l_suppkey = ps_suppkey
					and l_shipdate >= '1993-01-01'
					and l_shipdate < cast(date '1993-01-01' + interval '1 year' as date)
			)
	)
	and s_nationkey = n_nationkey
	and n_name = 'EGYPT'
order by
	s_name;
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Semi Join  (cost=0.71..1879650462.64 rows=107 width=51)
   Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
   ->  Nested Loop  (cost=0.29..780.09 rows=400 width=55)
         Join Filter: (nation.n_nationkey = supplier.s_nationkey)
         ->  Index Scan using idx_supplier_s_name on supplier  (cost=0.29..628.78 rows=10000 width=59)
         ->  Materialize  (cost=0.00..1.32 rows=1 width=4)
               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                     Filter: (n_name = 'EGYPT'::bpchar)
   ->  Materialize  (cost=0.42..1879633531.28 rows=2693 width=4)
         ->  Nested Loop  (cost=0.42..1879633517.81 rows=2693 width=4)
               ->  Seq Scan on part  (cost=0.00..6628.00 rows=2020 width=4)
                     Filter: ((p_name)::text ~~ 'orange%'::text)
               ->  Index Scan using partsupp_pkey on partsupp  (cost=0.42..930508.35 rows=1 width=8)
                     Index Cond: (ps_partkey = part.p_partkey)
                     Filter: ((ps_availqty)::numeric > (SubPlan 1))
                     SubPlan 1
                       ->  Aggregate  (cost=232624.30..232624.32 rows=1 width=32)
                             ->  Seq Scan on lineitem  (cost=0.00..232624.30 rows=1 width=5)
                                   Filter: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01'::date) AND (l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(22 rows)

COMMIT;
COMMIT

Query 20 executed in 0.176 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	s_name,
	count(*) as numwait
from
	supplier,
	lineitem l1,
	orders,
	nation
where
	s_suppkey = l1.l_suppkey
	and o_orderkey = l1.l_orderkey
	and o_orderstatus = 'F'
	and l1.l_receiptdate > l1.l_commitdate
	and exists (
		select
			*
		from
			lineitem l2
		where
			l2.l_orderkey = l1.l_orderkey
			and l2.l_suppkey <> l1.l_suppkey
	)
	and not exists (
		select
			*
		from
			lineitem l3
		where
			l3.l_orderkey = l1.l_orderkey
			and l3.l_suppkey <> l1.l_suppkey
			and l3.l_receiptdate > l3.l_commitdate
	)
	and s_nationkey = n_nationkey
	and n_name = 'BRAZIL'
group by
	s_name
order by
	numwait desc,
	s_name
LIMIT 100;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=170157.12..170157.12 rows=1 width=34)
   ->  Sort  (cost=170157.12..170157.12 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=170157.09..170157.11 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=170157.09..170157.09 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop  (cost=1361.32..170157.08 rows=1 width=26)
                           ->  Nested Loop Semi Join  (cost=1360.89..170156.57 rows=1 width=34)
                                 ->  Gather  (cost=1360.46..170155.54 rows=1 width=34)
                                       Workers Planned: 2
                                       ->  Nested Loop Anti Join  (cost=360.46..169155.44 rows=1 width=34)
                                             ->  Hash Join  (cost=360.02..147673.90 rows=33191 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..143856.33 rows=833502 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=355.02..355.02 rows=400 width=30)
                                                         ->  Hash Join  (cost=1.32..355.02 rows=400 width=30)
                                                               Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                               ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=34)
                                                               ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                           Filter: (n_name = 'BRAZIL'::bpchar)
                                             ->  Index Scan using lineitem_pkey on lineitem l3  (cost=0.43..1.05 rows=5 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using lineitem_pkey on lineitem l2  (cost=0.43..1.01 rows=16 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: (l_suppkey <> l1.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..0.51 rows=1 width=4)
                                 Index Cond: (o_orderkey = l1.l_orderkey)
                                 Filter: (o_orderstatus = 'F'::bpchar)
 JIT:
   Functions: 44
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(35 rows)

COMMIT;
COMMIT

Query 21 executed in 0.193 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	cntrycode,
	count(*) as numcust,
	sum(c_acctbal) as totacctbal
from
	(
		select
			substring(c_phone from 1 for 2) as cntrycode,
			c_acctbal
		from
			customer
		where
			substring(c_phone from 1 for 2) in
				('14', '15', '28', '34', '23', '32', '11')
			and c_acctbal > (
				select
					avg(c_acctbal)
				from
					customer
				where
					c_acctbal > 0.00
					and substring(c_phone from 1 for 2) in
						('14', '15', '28', '34', '23', '32', '11')
			)
			and not exists (
				select
					*
				from
					orders
				where
					o_custkey = c_custkey
			)
	) as vip
group by
	cntrycode
order by
	cntrycode;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=50340.59..50440.85 rows=751 width=72)
   Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
   InitPlan 1
     ->  Finalize Aggregate  (cost=6245.82..6245.83 rows=1 width=32)
           ->  Gather  (cost=6245.60..6245.81 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5245.60..5245.61 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5240.62 rows=1988 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{14,15,28,34,23,32,11}'::text[])))
   ->  Gather Merge  (cost=44094.76..44175.62 rows=626 width=72)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=43094.73..43103.34 rows=313 width=72)
               Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Sort  (cost=43094.73..43095.51 rows=313 width=38)
                     Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                     ->  Parallel Hash Right Anti Join  (cost=5083.85..43081.76 rows=313 width=38)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Parallel Seq Scan on orders  (cost=0.00..32386.00 rows=625000 width=4)
                           ->  Parallel Hash  (cost=5074.73..5074.73 rows=729 width=26)
                                 ->  Parallel Bitmap Heap Scan on customer  (cost=927.86..5074.73 rows=729 width=26)
                                       Recheck Cond: (c_acctbal > (InitPlan 1).col1)
                                       Filter: (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{14,15,28,34,23,32,11}'::text[]))
                                       ->  Bitmap Index Scan on c_acb  (cost=0.00..927.42 rows=50000 width=0)
                                             Index Cond: (c_acctbal > (InitPlan 1).col1)
(24 rows)

COMMIT;
COMMIT

Query 22 executed in 0.141 second(s).

