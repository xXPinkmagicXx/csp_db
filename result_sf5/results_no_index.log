=== Experiment: no_index ===
INDEX_ALL=0
INDEX_NUMBERS=0
INDEX_DATES=0
INDEX_TEXT=0
INDEX_DEFAULT=0

[Info] Running drop_indexes.sh
[Info] Dropping date indexes
[Info] Dropping numbers indexes
[Info] Dropping text indexes
[Info] Running create_indexes.sh

[Info] Running queries(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22) for no_index
BEGIN;
BEGIN
EXPLAIN
select
	l_returnflag,
	l_linestatus,
	sum(l_quantity) as sum_qty,
	sum(l_extendedprice) as sum_base_price,
	sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
	avg(l_quantity) as avg_qty,
	avg(l_extendedprice) as avg_price,
	avg(l_discount) as avg_disc,
	count(*) as count_order
from
	lineitem
where
	l_shipdate <= date '1998-12-01' - interval '102 days'
group by
	l_returnflag,
	l_linestatus
order by
	l_returnflag,
	l_linestatus;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=1149264.05..1149266.00 rows=6 width=236)
   Group Key: l_returnflag, l_linestatus
   ->  Gather Merge  (cost=1149264.05..1149265.45 rows=12 width=236)
         Workers Planned: 2
         ->  Sort  (cost=1148264.02..1148264.04 rows=6 width=236)
               Sort Key: l_returnflag, l_linestatus
               ->  Partial HashAggregate  (cost=1148263.81..1148263.95 rows=6 width=236)
                     Group Key: l_returnflag, l_linestatus
                     ->  Parallel Seq Scan on lineitem  (cost=0.00..718966.27 rows=12265644 width=25)
                           Filter: (l_shipdate <= '1998-08-21 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 9
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(13 rows)

COMMIT;
COMMIT

Query 1 execution times in seconds: 0.176,0.177,0.174,0.182,0.195,0.191,0.182,0.194,0.187,0.189
Average execution time: 0.1847 seconds

BEGIN;
BEGIN
EXPLAIN
select
	s_acctbal,
	s_name,
	n_name,
	p_partkey,
	p_mfgr,
	s_address,
	s_phone,
	s_comment
from
	part,
	supplier,
	partsupp,
	nation,
	region
where
	p_partkey = ps_partkey
	and s_suppkey = ps_suppkey
	and p_size = 50
	and p_type like '%NICKEL'
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'EUROPE'
	and ps_supplycost = (
		select
			min(ps_supplycost)
		from
			partsupp,
			supplier,
			nation,
			region
		where
			p_partkey = ps_partkey
			and s_suppkey = ps_suppkey
			and s_nationkey = n_nationkey
			and n_regionkey = r_regionkey
			and r_name = 'EUROPE'
	)
order by
	s_acctbal desc,
	n_name,
	s_name,
	p_partkey
LIMIT 100;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=175115.43..175115.44 rows=1 width=270)
   ->  Sort  (cost=175115.43..175115.44 rows=1 width=270)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=120960.28..175115.42 rows=1 width=270)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Gather Merge  (cost=1000.45..44255.75 rows=4412 width=30)
                     Workers Planned: 2
                     ->  Parallel Index Scan using part_pkey on part  (cost=0.42..42746.47 rows=1838 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 50))
               ->  Materialize  (cost=119959.83..120077.45 rows=23524 width=250)
                     ->  Sort  (cost=119959.83..120018.64 rows=23524 width=250)
                           Sort Key: partsupp.ps_partkey
                           ->  Gather  (cost=2544.61..115434.27 rows=23524 width=250)
                                 Workers Planned: 2
                                 ->  Parallel Hash Join  (cost=1544.61..112081.87 rows=9802 width=250)
                                       Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on partsupp  (cost=0.00..104230.99 rows=1666299 width=14)
                                       ->  Parallel Hash  (cost=1542.45..1542.45 rows=173 width=244)
                                             ->  Hash Join  (cost=24.31..1542.45 rows=173 width=244)
                                                   Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                   ->  Parallel Seq Scan on supplier  (cost=0.00..1406.12 rows=29412 width=144)
                                                   ->  Hash  (cost=24.29..24.29 rows=1 width=108)
                                                         ->  Hash Join  (cost=12.14..24.29 rows=1 width=108)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..11.70 rows=170 width=112)
                                                               ->  Hash  (cost=12.12..12.12 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..12.12 rows=1 width=4)
                                                                           Filter: (r_name = 'EUROPE'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=103.08..103.09 rows=1 width=32)
                       ->  Nested Loop  (cost=1.02..103.07 rows=1 width=6)
                             ->  Nested Loop  (cost=0.86..98.83 rows=9 width=10)
                                   ->  Nested Loop  (cost=0.72..97.36 rows=9 width=10)
                                         ->  Index Scan using partsupp_pkey on partsupp partsupp_1  (cost=0.43..22.59 rows=9 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..8.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
                             ->  Memoize  (cost=0.15..0.46 rows=1 width=4)
                                   Cache Key: nation_1.n_regionkey
                                   Cache Mode: logical
                                   ->  Index Scan using region_pkey on region region_1  (cost=0.14..0.45 rows=1 width=4)
                                         Index Cond: (r_regionkey = nation_1.n_regionkey)
                                         Filter: (r_name = 'EUROPE'::bpchar)
 JIT:
   Functions: 66
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(49 rows)

COMMIT;
COMMIT

Query 2 execution times in seconds: 0.202,0.199,0.188,0.188,0.192,0.196,0.192,0.211,0.203,0.202
Average execution time: 0.1973 seconds

BEGIN;
BEGIN
EXPLAIN
select
	l_orderkey,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	o_orderdate,
	o_shippriority
from
	customer,
	orders,
	lineitem
where
	c_mktsegment = 'HOUSEHOLD'
	and c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate < date '1995-03-26'
	and l_shipdate > date '1995-03-26'
group by
	l_orderkey,
	o_orderdate,
	o_shippriority
order by
	revenue desc,
	o_orderdate
LIMIT 10;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1333117.95..1333117.98 rows=10 width=44)
   ->  Sort  (cost=1333117.95..1337044.43 rows=1570592 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=1092481.91..1299178.02 rows=1570592 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1092481.91..1263185.30 rows=1308826 width=44)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=1091481.89..1111114.28 rows=654413 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=1091481.89..1093117.92 rows=654413 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Parallel Hash Join  (cost=201798.81..1014843.61 rows=654413 width=24)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..718966.27 rows=6647683 width=16)
                                             Filter: (l_shipdate > '1995-03-26'::date)
                                       ->  Parallel Hash  (cost=196450.32..196450.32 rows=307639 width=12)
                                             ->  Parallel Hash Join  (cost=22684.25..196450.32 rows=307639 width=12)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..169711.39 rows=1544632 width=16)
                                                         Filter: (o_orderdate < '1995-03-26'::date)
                                                   ->  Parallel Hash  (cost=21906.25..21906.25 rows=62240 width=4)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..21906.25 rows=62240 width=4)
                                                               Filter: (c_mktsegment = 'HOUSEHOLD'::bpchar)
 JIT:
   Functions: 33
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(26 rows)

COMMIT;
COMMIT

Query 3 execution times in seconds: 0.194,0.195,0.199,0.200,0.194,0.192,0.191,0.190,0.189,0.180
Average execution time: 0.1924 seconds

BEGIN;
BEGIN
EXPLAIN
select
	o_orderpriority,
	count(*) as order_count
from
	orders
where
	o_orderdate >= date '1997-04-01'
	and o_orderdate < cast(date '1997-04-01' + interval '3 month' as date)
	and exists (
		select
			*
		from
			lineitem
		where
			l_orderkey = o_orderkey
			and l_commitdate < l_receiptdate
	)
group by
	o_orderpriority
order by
	o_orderpriority;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=483987.35..484038.31 rows=5 width=24)
   Group Key: orders.o_orderpriority
   ->  Gather Merge  (cost=483987.35..484038.21 rows=10 width=24)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=482987.32..483037.03 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Sort  (cost=482987.32..483003.88 rows=6621 width=16)
                     Sort Key: orders.o_orderpriority
                     ->  Nested Loop Semi Join  (cost=0.44..482567.13 rows=6621 width=16)
                           ->  Parallel Seq Scan on orders  (cost=0.00..177524.07 rows=119893 width=20)
                                 Filter: ((o_orderdate >= '1997-04-01'::date) AND (o_orderdate < '1997-07-01'::date))
                           ->  Index Scan using lineitem_pkey on lineitem  (cost=0.44..48.56 rows=24 width=4)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Filter: (l_commitdate < l_receiptdate)
 JIT:
   Functions: 15
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(17 rows)

COMMIT;
COMMIT

Query 4 execution times in seconds: 0.190,0.181,0.182,0.189,0.180,0.189,0.188,0.186,0.185,0.187
Average execution time: 0.1857 seconds

BEGIN;
BEGIN
EXPLAIN
select
	n_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue
from
	customer,
	orders,
	lineitem,
	supplier,
	nation,
	region
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and l_suppkey = s_suppkey
	and c_nationkey = s_nationkey
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'MIDDLE EAST'
	and o_orderdate >= date '1996-01-01'
	and o_orderdate < date '1996-01-01' + interval '1 year'
group by
	n_name
order by
	revenue desc;
                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=336336.34..336336.76 rows=170 width=136)
   Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
   ->  Finalize GroupAggregate  (cost=336297.79..336330.04 rows=170 width=136)
         Group Key: nation.n_name
         ->  Gather Merge  (cost=336297.79..336326.64 rows=170 width=136)
               Workers Planned: 1
               ->  Partial GroupAggregate  (cost=335297.78..335307.50 rows=170 width=136)
                     Group Key: nation.n_name
                     ->  Sort  (cost=335297.78..335299.30 rows=608 width=116)
                           Sort Key: nation.n_name
                           ->  Parallel Hash Join  (cost=333566.90..335269.66 rows=608 width=116)
                                 Hash Cond: ((supplier.s_suppkey = lineitem.l_suppkey) AND (supplier.s_nationkey = customer.c_nationkey))
                                 ->  Parallel Seq Scan on supplier  (cost=0.00..1406.12 rows=29412 width=8)
                                 ->  Parallel Hash  (cost=333405.36..333405.36 rows=10769 width=128)
                                       ->  Nested Loop  (cost=22362.97..333405.36 rows=10769 width=128)
                                             ->  Parallel Hash Join  (cost=22362.54..201614.14 rows=2692 width=116)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..177524.07 rows=457684 width=8)
                                                         Filter: ((o_orderdate >= '1996-01-01'::date) AND (o_orderdate < '1997-01-01 00:00:00'::timestamp without time zone))
                                                   ->  Parallel Hash  (cost=22339.56..22339.56 rows=1838 width=116)
                                                         ->  Hash Join  (cost=24.31..22339.56 rows=1838 width=116)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..21125.00 rows=312500 width=8)
                                                               ->  Hash  (cost=24.29..24.29 rows=1 width=108)
                                                                     ->  Hash Join  (cost=12.14..24.29 rows=1 width=108)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..11.70 rows=170 width=112)
                                                                           ->  Hash  (cost=12.12..12.12 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..12.12 rows=1 width=4)
                                                                                       Filter: (r_name = 'MIDDLE EAST'::bpchar)
                                             ->  Index Scan using lineitem_pkey on lineitem  (cost=0.44..48.24 rows=72 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 55
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(35 rows)

COMMIT;
COMMIT

Query 5 execution times in seconds: 0.200,0.204,0.201,0.197,0.192,0.195,0.195,0.197,0.201,0.202
Average execution time: 0.1984 seconds

BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice * l_discount) as revenue
from
	lineitem
where
	l_shipdate >= date '1997-01-01'
	and l_shipdate < cast(date '1997-01-01' + interval '1 year' as date)
	and l_discount between 0.05 - 0.01 and 0.05 + 0.01
	and l_quantity < 25;
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=846222.83..846222.84 rows=1 width=32)
   ->  Gather  (cost=846222.61..846222.82 rows=2 width=32)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=845222.61..845222.62 rows=1 width=32)
               ->  Parallel Seq Scan on lineitem  (cost=0.00..843969.69 rows=250584 width=12)
                     Filter: ((l_shipdate >= '1997-01-01'::date) AND (l_shipdate < '1998-01-01'::date) AND (l_discount >= 0.04) AND (l_discount <= 0.06) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 7
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(9 rows)

COMMIT;
COMMIT

Query 6 execution times in seconds: 0.177,0.185,0.192,0.183,0.169,0.182,0.188,0.189,0.176,0.179
Average execution time: 0.1820 seconds

BEGIN;
BEGIN
EXPLAIN
select
	supp_nation,
	cust_nation,
	l_year,
	sum(volume) as revenue
from
	(
		select
			n1.n_name as supp_nation,
			n2.n_name as cust_nation,
			extract(year from l_shipdate) as l_year,
			l_extendedprice * (1 - l_discount) as volume
		from
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2
		where
			s_suppkey = l_suppkey
			and o_orderkey = l_orderkey
			and c_custkey = o_custkey
			and s_nationkey = n1.n_nationkey
			and c_nationkey = n2.n_nationkey
			and (
				(n1.n_name = 'CHINA' and n2.n_name = 'CANADA')
				or (n1.n_name = 'CANADA' and n2.n_name = 'CHINA')
			)
			and l_shipdate between date '1995-01-01' and date '1996-12-31'
	) as shipping
group by
	supp_nation,
	cust_nation,
	l_year
order by
	supp_nation,
	cust_nation,
	l_year;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=911008.90..911093.87 rows=628 width=272)
   Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
   ->  Gather Merge  (cost=911008.90..911077.90 rows=524 width=272)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=910008.88..910017.39 rows=262 width=272)
               Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Sort  (cost=910008.88..910009.53 rows=262 width=252)
                     Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                     ->  Parallel Hash Join  (cost=23526.88..909998.35 rows=262 width=252)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           Join Filter: (((n1.n_name = 'CHINA'::bpchar) AND (n2.n_name = 'CANADA'::bpchar)) OR ((n1.n_name = 'CANADA'::bpchar) AND (n2.n_name = 'CHINA'::bpchar)))
                           ->  Nested Loop  (cost=1502.58..887803.36 rows=44188 width=124)
                                 ->  Parallel Hash Join  (cost=1502.15..766064.11 rows=44188 width=124)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..750217.12 rows=3755979 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Parallel Hash  (cost=1497.82..1497.82 rows=346 width=108)
                                             ->  Hash Join  (cost=12.58..1497.82 rows=346 width=108)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Parallel Seq Scan on supplier  (cost=0.00..1406.12 rows=29412 width=8)
                                                   ->  Hash  (cost=12.55..12.55 rows=2 width=108)
                                                         ->  Seq Scan on nation n1  (cost=0.00..12.55 rows=2 width=108)
                                                               Filter: ((n_name = 'CHINA'::bpchar) OR (n_name = 'CANADA'::bpchar))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..2.76 rows=1 width=8)
                                       Index Cond: (o_orderkey = lineitem.l_orderkey)
                           ->  Parallel Hash  (cost=21978.34..21978.34 rows=3677 width=108)
                                 ->  Hash Join  (cost=12.58..21978.34 rows=3677 width=108)
                                       Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..21125.00 rows=312500 width=8)
                                       ->  Hash  (cost=12.55..12.55 rows=2 width=108)
                                             ->  Seq Scan on nation n2  (cost=0.00..12.55 rows=2 width=108)
                                                   Filter: ((n_name = 'CANADA'::bpchar) OR (n_name = 'CHINA'::bpchar))
 JIT:
   Functions: 57
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(35 rows)

COMMIT;
COMMIT

Query 7 execution times in seconds: 0.199,0.196,0.193,0.201,0.209,0.195,0.201,0.198,0.203,0.204
Average execution time: 0.1999 seconds

BEGIN;
BEGIN
EXPLAIN
select
	o_year,
	sum(case
		when nation = 'JAPAN' then volume
		else 0
	end) / sum(volume) as mkt_share
from
	(
		select
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) as volume,
			n2.n_name as nation
		from
			part,
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2,
			region
		where
			p_partkey = l_partkey
			and s_suppkey = l_suppkey
			and l_orderkey = o_orderkey
			and o_custkey = c_custkey
			and c_nationkey = n1.n_nationkey
			and n1.n_regionkey = r_regionkey
			and r_name = 'ASIA'
			and s_nationkey = n2.n_nationkey
			and o_orderdate between date '1995-01-01' and date '1996-12-31'
			and p_type = 'STANDARD PLATED TIN'
	) as all_nations
group by
	o_year
order by
	o_year;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=506680.78..506730.61 rows=347 width=64)
   Group Key: (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=506680.78..506720.05 rows=290 width=96)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=505680.75..505686.55 rows=145 width=96)
               Group Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=505680.75..505681.11 rows=145 width=148)
                     Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                     ->  Hash Join  (cost=48132.15..505675.55 rows=145 width=148)
                           Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                           ->  Nested Loop  (cost=48118.32..505660.97 rows=145 width=20)
                                 ->  Parallel Hash Join  (cost=48118.03..505288.82 rows=145 width=20)
                                       Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                       ->  Nested Loop  (cost=22362.97..479476.67 rows=21748 width=24)
                                             ->  Parallel Hash Join  (cost=22362.54..203375.29 rows=5437 width=8)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..177524.07 rows=924277 width=12)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Parallel Hash  (cost=22339.56..22339.56 rows=1838 width=4)
                                                         ->  Hash Join  (cost=24.31..22339.56 rows=1838 width=4)
                                                               Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..21125.00 rows=312500 width=8)
                                                               ->  Hash  (cost=24.29..24.29 rows=1 width=4)
                                                                     ->  Hash Join  (cost=12.14..24.29 rows=1 width=4)
                                                                           Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation n1  (cost=0.00..11.70 rows=170 width=8)
                                                                           ->  Hash  (cost=12.12..12.12 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..12.12 rows=1 width=4)
                                                                                       Filter: (r_name = 'ASIA'::bpchar)
                                             ->  Index Scan using lineitem_pkey on lineitem  (cost=0.44..50.06 rows=72 width=24)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=25720.33..25720.33 rows=2778 width=4)
                                             ->  Parallel Seq Scan on part  (cost=0.00..25720.33 rows=2778 width=4)
                                                   Filter: ((p_type)::text = 'STANDARD PLATED TIN'::text)
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.57 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Hash  (cost=11.70..11.70 rows=170 width=108)
                                 ->  Seq Scan on nation n2  (cost=0.00..11.70 rows=170 width=108)
 JIT:
   Functions: 63
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(41 rows)

COMMIT;
COMMIT

Query 8 execution times in seconds: 0.197,0.197,0.193,0.201,0.206,0.203,0.200,0.196,0.193,0.188
Average execution time: 0.1974 seconds

BEGIN;
BEGIN
EXPLAIN
select
	nation,
	o_year,
	sum(amount) as sum_profit
from
	(
		select
			n_name as nation,
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount
		from
			part,
			supplier,
			lineitem,
			partsupp,
			orders,
			nation
		where
			s_suppkey = l_suppkey
			and ps_suppkey = l_suppkey
			and ps_partkey = l_partkey
			and p_partkey = l_partkey
			and o_orderkey = l_orderkey
			and s_nationkey = n_nationkey
			and p_name like '%tomato%'
	) as profit
group by
	nation,
	o_year
order by
	nation,
	o_year desc;
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=1241716.74..1366656.80 rows=409020 width=168)
   Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=1241716.74..1352341.10 rows=818040 width=168)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=1240716.72..1256918.96 rows=409020 width=168)
               Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=1240716.72..1241975.09 rows=503347 width=159)
                     Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                     ->  Hash Join  (cost=907720.15..1113904.75 rows=503347 width=159)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Hash Join  (cost=907706.33..1111278.33 rows=503347 width=31)
                                 Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Parallel Seq Scan on orders  (cost=0.00..161898.71 rows=3125071 width=8)
                                 ->  Parallel Hash  (cost=897973.49..897973.49 rows=503347 width=31)
                                       ->  Parallel Hash Join  (cost=759716.69..897973.49 rows=503347 width=31)
                                             Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                             ->  Parallel Hash Join  (cost=757942.92..894878.32 rows=503347 width=35)
                                                   Hash Cond: ((partsupp.ps_suppkey = lineitem.l_suppkey) AND (partsupp.ps_partkey = lineitem.l_partkey))
                                                   ->  Parallel Seq Scan on partsupp  (cost=0.00..104230.99 rows=1666299 width=14)
                                                   ->  Parallel Hash  (cost=746459.72..746459.72 rows=503347 width=33)
                                                         ->  Parallel Hash Join  (cost=25930.77..746459.72 rows=503347 width=33)
                                                               Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                                               ->  Parallel Seq Scan on lineitem  (cost=0.00..687715.42 rows=12500342 width=29)
                                                               ->  Parallel Hash  (cost=25720.33..25720.33 rows=16835 width=4)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..25720.33 rows=16835 width=4)
                                                                           Filter: ((p_name)::text ~~ '%tomato%'::text)
                                             ->  Parallel Hash  (cost=1406.12..1406.12 rows=29412 width=8)
                                                   ->  Parallel Seq Scan on supplier  (cost=0.00..1406.12 rows=29412 width=8)
                           ->  Hash  (cost=11.70..11.70 rows=170 width=108)
                                 ->  Seq Scan on nation  (cost=0.00..11.70 rows=170 width=108)
 JIT:
   Functions: 55
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

COMMIT;
COMMIT

Query 9 execution times in seconds: 0.197,0.197,0.199,0.195,0.202,0.205,0.193,0.203,0.202,0.196
Average execution time: 0.1989 seconds

BEGIN;
BEGIN
EXPLAIN
select
	c_custkey,
	c_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	c_acctbal,
	n_name,
	c_address,
	c_phone,
	c_comment
from
	customer,
	orders,
	lineitem,
	nation
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate >= date '1993-08-01'
	and o_orderdate < cast(date '1993-08-01' + interval '3 month' as date)
	and l_returnflag = 'R'
	and c_nationkey = n_nationkey
group by
	c_custkey,
	c_name,
	c_acctbal,
	c_phone,
	n_name,
	c_address,
	c_comment
order by
	revenue desc
LIMIT 20;
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1003540.03..1003540.08 rows=20 width=279)
   ->  Sort  (cost=1003540.03..1004258.59 rows=287427 width=279)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=958963.43..995891.70 rows=287427 width=279)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=958963.43..989903.64 rows=239522 width=279)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=957963.41..961256.83 rows=119761 width=279)
                           Group Key: customer.c_custkey, nation.n_name
                           ->  Sort  (cost=957963.41..958262.81 rows=119761 width=259)
                                 Sort Key: customer.c_custkey, nation.n_name
                                 ->  Hash Join  (cost=907661.36..933123.19 rows=119761 width=259)
                                       Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                       ->  Parallel Hash Join  (cost=907647.53..932787.16 rows=119761 width=159)
                                             Hash Cond: (customer.c_custkey = orders.o_custkey)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..21125.00 rows=312500 width=147)
                                             ->  Parallel Hash  (cost=906150.52..906150.52 rows=119761 width=16)
                                                   ->  Parallel Hash Join  (cost=179030.12..906150.52 rows=119761 width=16)
                                                         Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                                         ->  Parallel Seq Scan on lineitem  (cost=0.00..718966.27 rows=3106335 width=16)
                                                               Filter: (l_returnflag = 'R'::bpchar)
                                                         ->  Parallel Hash  (cost=177524.07..177524.07 rows=120484 width=8)
                                                               ->  Parallel Seq Scan on orders  (cost=0.00..177524.07 rows=120484 width=8)
                                                                     Filter: ((o_orderdate >= '1993-08-01'::date) AND (o_orderdate < '1993-11-01'::date))
                                       ->  Hash  (cost=11.70..11.70 rows=170 width=108)
                                             ->  Seq Scan on nation  (cost=0.00..11.70 rows=170 width=108)
 JIT:
   Functions: 41
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(29 rows)

COMMIT;
COMMIT

Query 10 execution times in seconds: 0.198,0.200,0.192,0.197,0.198,0.195,0.194,0.191,0.197,0.192
Average execution time: 0.1954 seconds

BEGIN;
BEGIN
EXPLAIN
select
	ps_partkey,
	sum(ps_supplycost * ps_availqty) as value
from
	partsupp,
	supplier,
	nation
where
	ps_suppkey = s_suppkey
	and s_nationkey = n_nationkey
	and n_name = 'MOROCCO'
group by
	ps_partkey having
		sum(ps_supplycost * ps_availqty) > (
			select
				sum(ps_supplycost * ps_availqty) *         inf
			from
				partsupp,
				supplier,
				nation
			where
				ps_suppkey = s_suppkey
				and s_nationkey = n_nationkey
				and n_name = 'MOROCCO'
		)
order by
	value desc;
ERROR:  column "inf" does not exist
LINE 17:     sum(ps_supplycost * ps_availqty) *         inf
                                                        ^

Query 11 execution times in seconds: 0.135,0.133,0.134,0.136,0.135,0.135,0.141,0.141,0.140,0.141
Average execution time: 0.1371 seconds

BEGIN;
BEGIN
EXPLAIN
select
	l_shipmode,
	sum(case
		when o_orderpriority = '1-URGENT'
			or o_orderpriority = '2-HIGH'
			then 1
		else 0
	end) as high_line_count,
	sum(case
		when o_orderpriority <> '1-URGENT'
			and o_orderpriority <> '2-HIGH'
			then 1
		else 0
	end) as low_line_count
from
	orders,
	lineitem
where
	o_orderkey = l_orderkey
	and l_shipmode in ('TRUCK', 'SHIP')
	and l_commitdate < l_receiptdate
	and l_shipdate < l_commitdate
	and l_receiptdate >= date '1997-01-01'
	and l_receiptdate < date '1997-01-01' + interval '1 year'
group by
	l_shipmode
order by
	l_shipmode;
                                                                                                                                  QUERY PLAN                                                                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=1088011.78..1089203.92 rows=7 width=27)
   Group Key: lineitem.l_shipmode
   ->  Gather Merge  (cost=1088011.78..1089203.74 rows=14 width=27)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=1087011.75..1088202.10 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Sort  (cost=1087011.75..1087160.54 rows=59514 width=27)
                     Sort Key: lineitem.l_shipmode
                     ->  Parallel Hash Join  (cost=219273.10..1082292.01 rows=59514 width=27)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..843969.69 rows=59514 width=15)
                                 Filter: ((l_shipmode = ANY ('{TRUCK,SHIP}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1997-01-01'::date) AND (l_receiptdate < '1998-01-01 00:00:00'::timestamp without time zone))
                           ->  Parallel Hash  (cost=161898.71..161898.71 rows=3125071 width=20)
                                 ->  Parallel Seq Scan on orders  (cost=0.00..161898.71 rows=3125071 width=20)
 JIT:
   Functions: 20
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

COMMIT;
COMMIT

Query 12 execution times in seconds: 0.193,0.193,0.193,0.191,0.190,0.179,0.181,0.191,0.178,0.188
Average execution time: 0.1877 seconds

BEGIN;
BEGIN
EXPLAIN
select
	c_count,
	count(*) as custdist
from
	(
		select
			c_custkey,
			count(o_orderkey)
		from
			customer left outer join orders on
				c_custkey = o_custkey
				and o_comment not like '%special%deposits%'
		group by
			c_custkey
	) as c_orders (c_custkey, c_count)
group by
	c_count
order by
	custdist desc,
	c_count desc;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=709682.06..709682.56 rows=200 width=16)
   Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
   ->  HashAggregate  (cost=709672.42..709674.42 rows=200 width=16)
         Group Key: count(orders.o_orderkey)
         ->  Finalize HashAggregate  (cost=676273.98..698422.42 rows=750000 width=12)
               Group Key: customer.c_custkey
               Planned Partitions: 16
               ->  Gather  (cost=398512.22..580180.23 rows=1500000 width=12)
                     Workers Planned: 2
                     ->  Partial HashAggregate  (cost=397512.22..429180.23 rows=750000 width=12)
                           Group Key: customer.c_custkey
                           Planned Partitions: 16
                           ->  Parallel Hash Right Join  (cost=20279.68..223502.57 rows=3093505 width=8)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Parallel Seq Scan on orders  (cost=0.00..169711.39 rows=3093505 width=8)
                                       Filter: ((o_comment)::text !~~ '%special%deposits%'::text)
                                 ->  Parallel Hash  (cost=15152.43..15152.43 rows=312500 width=4)
                                       ->  Parallel Index Only Scan using customer_pkey on customer  (cost=0.42..15152.43 rows=312500 width=4)
 JIT:
   Functions: 16
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(21 rows)

COMMIT;
COMMIT

Query 13 execution times in seconds: 0.194,0.192,0.187,0.172,0.184,0.194,0.174,0.190,0.182,0.179
Average execution time: 0.1848 seconds

BEGIN;
BEGIN
EXPLAIN
select
	100.00 * sum(case
		when p_type like 'PROMO%'
			then l_extendedprice * (1 - l_discount)
		else 0
	end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue
from
	lineitem,
	part
where
	l_partkey = p_partkey
	and l_shipdate >= date '1993-06-01'
	and l_shipdate < cast(date '1993-06-01' + interval '1 month' as date);
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=788498.37..788498.38 rows=1 width=32)
   ->  Gather  (cost=788498.13..788498.34 rows=2 width=64)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=787498.13..787498.14 rows=1 width=64)
               ->  Parallel Hash Join  (cost=752164.25..784781.43 rows=155240 width=33)
                     Hash Cond: (part.p_partkey = lineitem.l_partkey)
                     ->  Parallel Seq Scan on part  (cost=0.00..24678.67 rows=416667 width=25)
                     ->  Parallel Hash  (cost=750217.12..750217.12 rows=155770 width=16)
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..750217.12 rows=155770 width=16)
                                 Filter: ((l_shipdate >= '1993-06-01'::date) AND (l_shipdate < '1993-07-01'::date))
 JIT:
   Functions: 17
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(13 rows)

COMMIT;
COMMIT

Query 14 execution times in seconds: 0.190,0.184,0.182,0.183,0.189,0.185,0.185,0.185,0.181,0.179
Average execution time: 0.1843 seconds

BEGIN;
BEGIN
create or replace view revenue0 (supplier_no, total_revenue) as
	select
		l_suppkey,
		sum(l_extendedprice * (1 - l_discount))
	from
		lineitem
	where
		l_shipdate >= '1996-02-01'
		and l_shipdate < date'1996-02-01' + interval '90 days'
	group by
		l_suppkey;
CREATE VIEW
EXPLAIN
select
	s_suppkey,
	s_name,
	s_address,
	s_phone,
	total_revenue
from
	supplier,
	revenue0
where
	s_suppkey = supplier_no
	and total_revenue = (
		select
			max(total_revenue)
		from
			revenue0
	)
order by
	s_suppkey;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=1598645.91..1613230.78 rows=248 width=103)
   InitPlan 1
     ->  Aggregate  (cost=806112.40..806112.41 rows=1 width=32)
           ->  Finalize GroupAggregate  (cost=792533.21..805491.44 rows=49677 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather Merge  (cost=792533.21..804125.32 rows=99354 width=36)
                       Workers Planned: 2
                       ->  Sort  (cost=791533.19..791657.38 rows=49677 width=36)
                             Sort Key: lineitem_1.l_suppkey
                             ->  Partial HashAggregate  (cost=782475.87..787658.31 rows=49677 width=36)
                                   Group Key: lineitem_1.l_suppkey
                                   Planned Partitions: 4
                                   ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..750217.12 rows=467095 width=16)
                                         Filter: ((l_shipdate >= '1996-02-01'::date) AND (l_shipdate < '1996-05-01 00:00:00'::timestamp without time zone))
   ->  Finalize GroupAggregate  (cost=792533.21..805615.63 rows=248 width=36)
         Group Key: lineitem.l_suppkey
         Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
         ->  Gather Merge  (cost=792533.21..804125.32 rows=99354 width=36)
               Workers Planned: 2
               ->  Sort  (cost=791533.19..791657.38 rows=49677 width=36)
                     Sort Key: lineitem.l_suppkey
                     ->  Partial HashAggregate  (cost=782475.87..787658.31 rows=49677 width=36)
                           Group Key: lineitem.l_suppkey
                           Planned Partitions: 4
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..750217.12 rows=467095 width=16)
                                 Filter: ((l_shipdate >= '1996-02-01'::date) AND (l_shipdate < '1996-05-01 00:00:00'::timestamp without time zone))
   ->  Index Scan using supplier_pkey on supplier  (cost=0.29..6.05 rows=1 width=71)
         Index Cond: (s_suppkey = lineitem.l_suppkey)
 JIT:
   Functions: 25
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(31 rows)

drop view revenue0;
DROP VIEW
COMMIT;
COMMIT

Query 15 execution times in seconds: 0.196,0.197,0.202,0.189,0.185,0.185,0.195,0.183,0.183,0.181
Average execution time: 0.1896 seconds

BEGIN;
BEGIN
EXPLAIN
select
	p_brand,
	p_type,
	p_size,
	count(distinct ps_suppkey) as supplier_cnt
from
	partsupp,
	part
where
	p_partkey = ps_partkey
	and p_brand <> 'Brand#34'
	and p_type not like 'PROMO PLATED%'
	and p_size in (33, 49, 14, 46, 21, 24, 18, 25)
	and ps_suppkey not in (
		select
			s_suppkey
		from
			supplier
		where
			s_comment like '%Customer%Complaints%'
	)
group by
	p_brand,
	p_type,
	p_size
order by
	supplier_cnt desc,
	p_brand,
	p_type,
	p_size;
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=182058.07..182256.79 rows=79486 width=44)
   Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
   ->  GroupAggregate  (cost=135300.98..173142.04 rows=79486 width=44)
         Group Key: part.p_brand, part.p_type, part.p_size
         ->  Gather Merge  (cost=135300.98..169417.85 rows=292933 width=40)
               Workers Planned: 2
               ->  Sort  (cost=134300.95..134606.09 rows=122055 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Parallel Hash Join  (cost=33429.12..120650.03 rows=122055 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=1737.44..86771.32 rows=833149 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..1737.00 rows=5 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Parallel Hash  (cost=30928.67..30928.67 rows=61041 width=40)
                                 ->  Parallel Seq Scan on part  (cost=0.00..30928.67 rows=61041 width=40)
                                       Filter: ((p_brand <> 'Brand#34'::bpchar) AND ((p_type)::text !~~ 'PROMO PLATED%'::text) AND (p_size = ANY ('{33,49,14,46,21,24,18,25}'::integer[])))
 JIT:
   Functions: 23
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(21 rows)

COMMIT;
COMMIT

Query 16 execution times in seconds: 0.192,0.175,0.188,0.180,0.176,0.189,0.191,0.176,0.191,0.174
Average execution time: 0.1832 seconds

BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice) / 7.0 as avg_yearly
from
	lineitem,
	part
where
	p_partkey = l_partkey
	and p_brand = 'Brand#44'
	and p_container = 'JUMBO DRUM'
	and l_quantity < (
		select
			0.2 * avg(l_quantity)
		from
			lineitem
		where
			l_partkey = p_partkey
	);
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=10346599.70..10346599.72 rows=1 width=32)
   ->  Hash Join  (cost=27878.10..10346573.99 rows=10285 width=8)
         Hash Cond: (lineitem.l_partkey = part.p_partkey)
         Join Filter: (lineitem.l_quantity < (SubPlan 1))
         ->  Seq Scan on lineitem  (cost=0.00..862720.20 rows=30000820 width=17)
         ->  Hash  (cost=27865.20..27865.20 rows=1032 width=4)
               ->  Gather  (cost=1000.00..27865.20 rows=1032 width=4)
                     Workers Planned: 2
                     ->  Parallel Seq Scan on part  (cost=0.00..26762.00 rows=430 width=4)
                           Filter: ((p_brand = 'Brand#44'::bpchar) AND (p_container = 'JUMBO DRUM'::bpchar))
         SubPlan 1
           ->  Aggregate  (cost=937722.33..937722.34 rows=1 width=32)
                 ->  Seq Scan on lineitem lineitem_1  (cost=0.00..937722.25 rows=30 width=5)
                       Filter: (l_partkey = part.p_partkey)
 JIT:
   Functions: 24
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

COMMIT;
COMMIT

Query 17 execution times in seconds: 0.185,0.191,0.185,0.183,0.185,0.189,0.189,0.184,0.187,0.185
Average execution time: 0.1863 seconds

BEGIN;
BEGIN
EXPLAIN
select
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice,
	sum(l_quantity)
from
	customer,
	orders,
	lineitem
where
	o_orderkey in (
		select
			l_orderkey
		from
			lineitem
		group by
			l_orderkey having
				sum(l_quantity) > 313
	)
	and c_custkey = o_custkey
	and o_orderkey = l_orderkey
group by
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice
order by
	o_totalprice desc,
	o_orderdate
LIMIT 100;
                                                                                 QUERY PLAN                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3402184.30..3402184.55 rows=100 width=71)
   ->  Sort  (cost=3402184.30..3403564.89 rows=552239 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=3296103.18..3381078.12 rows=552239 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Incremental Sort  (cost=3296103.18..3370033.34 rows=552239 width=44)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     Presorted Key: customer.c_custkey
                     ->  Merge Join  (cost=3296103.08..3345182.58 rows=552239 width=44)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Scan using customer_pkey on customer  (cost=0.42..37541.43 rows=750000 width=23)
                           ->  Materialize  (cost=3296102.38..3298863.58 rows=552239 width=25)
                                 ->  Sort  (cost=3296102.38..3297482.98 rows=552239 width=25)
                                       Sort Key: orders.o_custkey
                                       ->  Hash Join  (cost=2120885.89..3230216.77 rows=552239 width=25)
                                             Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                             ->  Hash Join  (cost=1777537.04..2719010.20 rows=10000273 width=13)
                                                   Hash Cond: (lineitem.l_orderkey = lineitem_1.l_orderkey)
                                                   ->  Seq Scan on lineitem  (cost=0.00..862720.20 rows=30000820 width=9)
                                                   ->  Hash  (cost=1775811.30..1775811.30 rows=138059 width=4)
                                                         ->  Finalize GroupAggregate  (cost=1666737.95..1775811.30 rows=138059 width=4)
                                                               Group Key: lineitem_1.l_orderkey
                                                               Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                               ->  Gather Merge  (cost=1666737.95..1763385.99 rows=828354 width=36)
                                                                     Workers Planned: 2
                                                                     ->  Sort  (cost=1665737.92..1666773.37 rows=414177 width=36)
                                                                           Sort Key: lineitem_1.l_orderkey
                                                                           ->  Partial HashAggregate  (cost=1488518.58..1615769.44 rows=414177 width=36)
                                                                                 Group Key: lineitem_1.l_orderkey
                                                                                 Planned Partitions: 16
                                                                                 ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..687715.42 rows=12500342 width=9)
                                             ->  Hash  (cost=205649.71..205649.71 rows=7500171 width=20)
                                                   ->  Seq Scan on orders  (cost=0.00..205649.71 rows=7500171 width=20)
 JIT:
   Functions: 38
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(36 rows)

COMMIT;
COMMIT

Query 18 execution times in seconds: 0.192,0.198,0.191,0.196,0.183,0.187,0.195,0.194,0.192,0.196
Average execution time: 0.1924 seconds

BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice* (1 - l_discount)) as revenue
from
	lineitem,
	part
where
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#13'
		and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')
		and l_quantity >= 5 and l_quantity <= 5+10
		and p_size between 1 and 5
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#23'
		and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')
		and l_quantity >= 20 and l_quantity <= 20+10
		and p_size between 1 and 10
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#53'
		and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')
		and l_quantity >= 23 and l_quantity <= 23+10
		and p_size between 1 and 15
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	);


 Finalize Aggregate  (cost=977565.20..977565.21 rows=1 width=32)
   ->  Gather  (cost=977564.98..977565.19 rows=2 width=32)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=976564.98..976564.99 rows=1 width=32)
               ->  Parallel Hash Join  (cost=38232.58..976563.27 rows=228 width=12)
                     Hash Cond: (lineitem.l_partkey = part.p_partkey)
                     Join Filter: (((part.p_brand = 'Brand#13'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (lineitem.l_quantity >= '5'::numeric) AND (lineitem.l_quantity <= '15'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#23'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (lineitem.l_quantity >= '20'::numeric) AND (lineitem.l_quantity <= '30'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#53'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (lineitem.l_quantity >= '23'::numeric) AND (lineitem.l_quantity <= '33'::numeric) AND (part.p_size <= 15)))
                     ->  Parallel Seq Scan on lineitem  (cost=0.00..937722.25 rows=231784 width=21)
                           Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '5'::numeric) AND (l_quantity <= '15'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric)) OR ((l_quantity >= '23'::numeric) AND (l_quantity <= '33'::numeric))))
                     ->  Parallel Hash  (cost=38220.33..38220.33 rows=980 width=30)
                           ->  Parallel Seq Scan on part  (cost=0.00..38220.33 rows=980 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#13'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#23'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#53'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
 JIT:
   Functions: 21
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(15 rows)

COMMIT;
COMMIT

Query 19 execution times in seconds: 0.175,0.194,0.192,0.192,0.191,0.194,0.191,0.194,0.183,0.175
Average execution time: 0.1881 seconds

BEGIN;
BEGIN
EXPLAIN
select
	s_name,
	s_address
from
	supplier,
	nation
where
	s_suppkey in (
		select
			ps_suppkey
		from
			partsupp
		where
			ps_partkey in (
				select
					p_partkey
				from
					part
				where
					p_name like 'forest%'
			)
			and ps_availqty > (
				select
					0.5 * sum(l_quantity)
				from
					lineitem
				where
					l_partkey = ps_partkey
					and l_suppkey = ps_suppkey
					and l_shipdate >= '1996-01-01'
					and l_shipdate < cast(date '1996-01-01' + interval '1 year' as date)
			)
	)
	and s_nationkey = n_nationkey
	and n_name = 'MOROCCO'
order by
	s_name;
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Semi Join  (cost=2504.68..27356199541.12 rows=79 width=51)
   ->  Gather Merge  (cost=2503.83..2537.33 rows=294 width=55)
         Workers Planned: 1
         ->  Sort  (cost=1503.82..1504.25 rows=173 width=55)
               Sort Key: supplier.s_name
               ->  Hash Join  (cost=12.14..1497.39 rows=173 width=55)
                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Parallel Seq Scan on supplier  (cost=0.00..1406.12 rows=29412 width=59)
                     ->  Hash  (cost=12.12..12.12 rows=1 width=4)
                           ->  Seq Scan on nation  (cost=0.00..12.12 rows=1 width=4)
                                 Filter: (n_name = 'MOROCCO'::bpchar)
   ->  Nested Loop  (cost=0.85..93048289.12 rows=1 width=4)
         ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..93048275.22 rows=27 width=8)
               Index Cond: (ps_suppkey = supplier.s_suppkey)
               Filter: ((ps_availqty)::numeric > (SubPlan 1))
               SubPlan 1
                 ->  Aggregate  (cost=1162728.40..1162728.42 rows=1 width=32)
                       ->  Seq Scan on lineitem  (cost=0.00..1162728.40 rows=1 width=5)
                             Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date) AND (l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
         ->  Index Scan using part_pkey on part  (cost=0.42..0.51 rows=1 width=4)
               Index Cond: (p_partkey = partsupp.ps_partkey)
               Filter: ((p_name)::text ~~ 'forest%'::text)
 JIT:
   Functions: 32
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(25 rows)

COMMIT;
COMMIT

Query 20 execution times in seconds: 0.188,0.195,0.189,0.185,0.190,0.193,0.179,0.192,0.178,0.192
Average execution time: 0.1881 seconds

BEGIN;
BEGIN
EXPLAIN
select
	s_name,
	count(*) as numwait
from
	supplier,
	lineitem l1,
	orders,
	nation
where
	s_suppkey = l1.l_suppkey
	and o_orderkey = l1.l_orderkey
	and o_orderstatus = 'F'
	and l1.l_receiptdate > l1.l_commitdate
	and exists (
		select
			*
		from
			lineitem l2
		where
			l2.l_orderkey = l1.l_orderkey
			and l2.l_suppkey <> l1.l_suppkey
	)
	and not exists (
		select
			*
		from
			lineitem l3
		where
			l3.l_orderkey = l1.l_orderkey
			and l3.l_suppkey <> l1.l_suppkey
			and l3.l_receiptdate > l3.l_commitdate
	)
	and s_nationkey = n_nationkey
	and n_name = 'ROMANIA'
group by
	s_name
order by
	numwait desc,
	s_name
LIMIT 100;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=941744.62..941744.63 rows=1 width=34)
   ->  Sort  (cost=941744.62..941744.63 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=941744.59..941744.61 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=941744.59..941744.60 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop  (cost=2500.86..941744.58 rows=1 width=26)
                           ->  Nested Loop Semi Join  (cost=2500.42..941738.41 rows=1 width=34)
                                 ->  Gather  (cost=2499.99..941639.07 rows=1 width=34)
                                       Workers Planned: 2
                                       ->  Nested Loop Anti Join  (cost=1499.99..940638.97 rows=1 width=34)
                                             ->  Parallel Hash Join  (cost=1499.55..736235.41 rows=24510 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..718966.27 rows=4166780 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Parallel Hash  (cost=1497.39..1497.39 rows=173 width=30)
                                                         ->  Hash Join  (cost=12.14..1497.39 rows=173 width=30)
                                                               Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on supplier  (cost=0.00..1406.12 rows=29412 width=34)
                                                               ->  Hash  (cost=12.12..12.12 rows=1 width=4)
                                                                     ->  Seq Scan on nation  (cost=0.00..12.12 rows=1 width=4)
                                                                           Filter: (n_name = 'ROMANIA'::bpchar)
                                             ->  Index Scan using lineitem_pkey on lineitem l3  (cost=0.44..99.50 rows=24 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using lineitem_pkey on lineitem l2  (cost=0.44..99.32 rows=72 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: (l_suppkey <> l1.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..6.18 rows=1 width=4)
                                 Index Cond: (o_orderkey = l1.l_orderkey)
                                 Filter: (o_orderstatus = 'F'::bpchar)
 JIT:
   Functions: 44
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(35 rows)

COMMIT;
COMMIT

Query 21 execution times in seconds: 0.191,0.194,0.197,0.188,0.195,0.198,0.201,0.198,0.198,0.190
Average execution time: 0.1950 seconds

BEGIN;
BEGIN
EXPLAIN
select
	cntrycode,
	count(*) as numcust,
	sum(c_acctbal) as totacctbal
from
	(
		select
			substring(c_phone from 1 for 2) as cntrycode,
			c_acctbal
		from
			customer
		where
			substring(c_phone from 1 for 2) in
				('23', '22', '21', '15', '26', '32', '24')
			and c_acctbal > (
				select
					avg(c_acctbal)
				from
					customer
				where
					c_acctbal > 0.00
					and substring(c_phone from 1 for 2) in
						('23', '22', '21', '15', '26', '32', '24')
			)
			and not exists (
				select
					*
				from
					orders
				where
					o_custkey = c_custkey
			)
	) as vip
group by
	cntrycode
order by
	cntrycode;
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=244236.76..244747.40 rows=3826 width=72)
   Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
   InitPlan 1
     ->  Finalize Aggregate  (cost=27228.14..27228.15 rows=1 width=32)
           ->  Gather  (cost=27227.91..27228.12 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=26227.91..26227.92 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..26203.12 rows=9915 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{23,22,21,15,26,32,24}'::text[])))
   ->  Gather Merge  (cost=217008.61..217420.42 rows=3188 width=72)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=216008.59..216052.42 rows=1594 width=72)
               Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Sort  (cost=216008.59..216012.57 rows=1594 width=38)
                     Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                     ->  Parallel Hash Right Anti Join  (cost=26248.70..215923.80 rows=1594 width=38)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Parallel Seq Scan on orders  (cost=0.00..161898.71 rows=3125071 width=4)
                           ->  Parallel Hash  (cost=26203.12..26203.12 rows=3646 width=26)
                                 ->  Parallel Seq Scan on customer  (cost=0.00..26203.12 rows=3646 width=26)
                                       Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{23,22,21,15,26,32,24}'::text[])))
 JIT:
   Functions: 27
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(24 rows)

COMMIT;
COMMIT

Query 22 execution times in seconds: 0.182,0.195,0.180,0.184,0.189,0.180,0.187,0.185,0.192,0.188
Average execution time: 0.1862 seconds


