=== Experiment: text ===
INDEX_ALL=0
INDEX_NUMBERS=0
INDEX_DATES=0
INDEX_TEXT=1
INDEX_DEFAULT=0

[Info] Running drop_indexes.sh
[Info] Dropping date indexes
[Info] Dropping numbers indexes
[Info] Keeping text indexes
[Info] Running create_indexes.sh
[Info] Creating indexes for text

[Info] Running queries(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22) for text
BEGIN;
BEGIN
EXPLAIN
select
	l_returnflag,
	l_linestatus,
	sum(l_quantity) as sum_qty,
	sum(l_extendedprice) as sum_base_price,
	sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
	avg(l_quantity) as avg_qty,
	avg(l_extendedprice) as avg_price,
	avg(l_discount) as avg_disc,
	count(*) as count_order
from
	lineitem
where
	l_shipdate <= date '1998-12-01' - interval '113 days'
group by
	l_returnflag,
	l_linestatus
order by
	l_returnflag,
	l_linestatus;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=1147514.24..1147516.20 rows=6 width=236)
   Group Key: l_returnflag, l_linestatus
   ->  Gather Merge  (cost=1147514.24..1147515.64 rows=12 width=236)
         Workers Planned: 2
         ->  Sort  (cost=1146514.22..1146514.24 rows=6 width=236)
               Sort Key: l_returnflag, l_linestatus
               ->  Partial HashAggregate  (cost=1146514.01..1146514.14 rows=6 width=236)
                     Group Key: l_returnflag, l_linestatus
                     ->  Parallel Seq Scan on lineitem  (cost=0.00..718960.94 rows=12215802 width=25)
                           Filter: (l_shipdate <= '1998-08-10 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 9
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(13 rows)

COMMIT;
COMMIT

Query 1 execution times in seconds: 0.196,0.190,0.196,0.182,0.175,0.191,0.163,0.197,0.194,0.176
Average execution time: 0.1860 seconds

BEGIN;
BEGIN
EXPLAIN
select
	s_acctbal,
	s_name,
	n_name,
	p_partkey,
	p_mfgr,
	s_address,
	s_phone,
	s_comment
from
	part,
	supplier,
	partsupp,
	nation,
	region
where
	p_partkey = ps_partkey
	and s_suppkey = ps_suppkey
	and p_size = 37
	and p_type like '%TIN'
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'ASIA'
	and ps_supplycost = (
		select
			min(ps_supplycost)
		from
			partsupp,
			supplier,
			nation,
			region
		where
			p_partkey = ps_partkey
			and s_suppkey = ps_suppkey
			and s_nationkey = n_nationkey
			and n_regionkey = r_regionkey
			and r_name = 'ASIA'
	)
order by
	s_acctbal desc,
	n_name,
	s_name,
	p_partkey
LIMIT 100;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=545396.30..545396.31 rows=1 width=270)
   ->  Sort  (cost=545396.30..545396.31 rows=1 width=270)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Hash Join  (cost=141768.98..545396.29 rows=1 width=270)
               Hash Cond: ((part.p_partkey = partsupp.ps_partkey) AND ((SubPlan 1) = partsupp.ps_supplycost))
               ->  Gather  (cost=1000.00..28168.10 rows=4061 width=30)
                     Workers Planned: 2
                     ->  Parallel Seq Scan on part  (cost=0.00..26762.00 rows=1692 width=30)
                           Filter: (((p_type)::text ~~ '%TIN'::text) AND (p_size = 37))
               ->  Hash  (cost=101424.98..101424.98 rows=800000 width=250)
                     ->  Nested Loop  (cost=1.99..101424.98 rows=800000 width=250)
                           ->  Nested Loop  (cost=1.56..2393.12 rows=10000 width=244)
                                 Join Filter: (nation.n_regionkey = region.r_regionkey)
                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                       Filter: (r_name = 'ASIA'::bpchar)
                                 ->  Hash Join  (cost=1.56..1767.06 rows=50000 width=248)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..1612.00 rows=50000 width=144)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=112)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=112)
                           ->  Index Scan using ps_sk on partsupp  (cost=0.43..9.10 rows=80 width=14)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=85.93..85.94 rows=1 width=32)
                       ->  Nested Loop  (cost=0.86..85.93 rows=2 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'ASIA'::bpchar)
                             ->  Nested Loop  (cost=0.86..84.75 rows=9 width=10)
                                   ->  Nested Loop  (cost=0.72..83.36 rows=9 width=10)
                                         ->  Index Scan using ps_pk on partsupp partsupp_1  (cost=0.43..8.59 rows=9 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using s_sk on supplier supplier_1  (cost=0.29..8.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using n_nk on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
 JIT:
   Functions: 53
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(39 rows)

COMMIT;
COMMIT

Query 2 execution times in seconds: 0.206,0.209,0.192,0.193,0.207,0.188,0.206,0.189,0.190,0.204
Average execution time: 0.1984 seconds

BEGIN;
BEGIN
EXPLAIN
select
	l_orderkey,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	o_orderdate,
	o_shippriority
from
	customer,
	orders,
	lineitem
where
	c_mktsegment = 'HOUSEHOLD'
	and c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate < date '1995-03-06'
	and l_shipdate > date '1995-03-06'
group by
	l_orderkey,
	o_orderdate,
	o_shippriority
order by
	revenue desc,
	o_orderdate
LIMIT 10;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1332690.05..1332690.08 rows=10 width=44)
   ->  Sort  (cost=1332690.05..1336613.37 rows=1569329 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=1092247.45..1298777.42 rows=1569329 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1092247.45..1262813.63 rows=1307774 width=44)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=1091247.43..1110864.04 rows=653887 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=1091247.43..1092882.14 rows=653887 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Parallel Hash Join  (cost=200187.72..1014674.25 rows=653887 width=24)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..718960.94 rows=6756818 width=16)
                                             Filter: (l_shipdate > '1995-03-06'::date)
                                       ->  Parallel Hash  (cost=194930.47..194930.47 rows=302420 width=12)
                                             ->  Parallel Hash Join  (cost=21234.08..194930.47 rows=302420 width=12)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..169710.50 rows=1518426 width=16)
                                                         Filter: (o_orderdate < '1995-03-06'::date)
                                                   ->  Parallel Hash  (cost=20456.08..20456.08 rows=62240 width=4)
                                                         ->  Parallel Bitmap Heap Scan on customer  (cost=1678.08..20456.08 rows=62240 width=4)
                                                               Recheck Cond: (c_mktsegment = 'HOUSEHOLD'::bpchar)
                                                               ->  Bitmap Index Scan on idx_customer_c_mktsegment  (cost=0.00..1640.74 rows=149375 width=0)
                                                                     Index Cond: (c_mktsegment = 'HOUSEHOLD'::bpchar)
 JIT:
   Functions: 33
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(28 rows)

COMMIT;
COMMIT

Query 3 execution times in seconds: 0.200,0.201,0.200,0.181,0.199,0.191,0.204,0.182,0.202,0.199
Average execution time: 0.1959 seconds

BEGIN;
BEGIN
EXPLAIN
select
	o_orderpriority,
	count(*) as order_count
from
	orders
where
	o_orderdate >= date '1994-04-01'
	and o_orderdate < cast(date '1994-04-01' + interval '3 month' as date)
	and exists (
		select
			*
		from
			lineitem
		where
			l_orderkey = o_orderkey
			and l_commitdate < l_receiptdate
	)
group by
	o_orderpriority
order by
	o_orderpriority;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=273379.51..273429.92 rows=5 width=24)
   Group Key: orders.o_orderpriority
   ->  Gather Merge  (cost=273379.51..273429.82 rows=10 width=24)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=272379.48..272428.64 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Sort  (cost=272379.48..272395.85 rows=6548 width=16)
                     Sort Key: orders.o_orderpriority
                     ->  Nested Loop Semi Join  (cost=0.44..271964.44 rows=6548 width=16)
                           ->  Parallel Seq Scan on orders  (cost=0.00..177523.00 rows=118562 width=20)
                                 Filter: ((o_orderdate >= '1994-04-01'::date) AND (o_orderdate < '1994-07-01'::date))
                           ->  Index Scan using l_ok on lineitem  (cost=0.44..8.62 rows=24 width=4)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Filter: (l_commitdate < l_receiptdate)
 JIT:
   Functions: 15
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(17 rows)

COMMIT;
COMMIT

Query 4 execution times in seconds: 0.193,0.192,0.194,0.193,0.191,0.165,0.188,0.187,0.188,0.174
Average execution time: 0.1865 seconds

BEGIN;
BEGIN
EXPLAIN
select
	n_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue
from
	customer,
	orders,
	lineitem,
	supplier,
	nation,
	region
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and l_suppkey = s_suppkey
	and c_nationkey = s_nationkey
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'EUROPE'
	and o_orderdate >= date '1996-01-01'
	and o_orderdate < date '1996-01-01' + interval '1 year'
group by
	n_name
order by
	revenue desc;
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=850909.20..850909.27 rows=25 width=136)
   Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
   ->  Finalize GroupAggregate  (cost=850718.79..850908.62 rows=25 width=136)
         Group Key: nation.n_name
         ->  Gather Merge  (cost=850718.79..850907.94 rows=50 width=136)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=849718.77..849902.14 rows=25 width=136)
                     Group Key: nation.n_name
                     ->  Sort  (cost=849718.77..849755.38 rows=14645 width=116)
                           Sort Key: nation.n_name
                           ->  Parallel Hash Join  (cost=26652.32..848705.47 rows=14645 width=116)
                                 Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                 ->  Nested Loop  (cost=24805.03..844935.96 rows=366136 width=128)
                                       ->  Parallel Hash Join  (cost=24804.59..209100.25 rows=91535 width=116)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..177523.00 rows=457673 width=8)
                                                   Filter: ((o_orderdate >= '1996-01-01'::date) AND (o_orderdate < '1997-01-01 00:00:00'::timestamp without time zone))
                                             ->  Parallel Hash  (cost=22924.34..22924.34 rows=62500 width=116)
                                                   ->  Hash Join  (cost=2.46..22924.34 rows=62500 width=116)
                                                         Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..21125.00 rows=312500 width=8)
                                                         ->  Hash  (cost=2.40..2.40 rows=5 width=108)
                                                               ->  Hash Join  (cost=1.07..2.40 rows=5 width=108)
                                                                     Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=112)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'EUROPE'::bpchar)
                                       ->  Index Scan using l_ok on lineitem  (cost=0.44..6.23 rows=72 width=20)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                 ->  Parallel Hash  (cost=1406.12..1406.12 rows=29412 width=8)
                                       ->  Parallel Seq Scan on supplier  (cost=0.00..1406.12 rows=29412 width=8)
 JIT:
   Functions: 52
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(35 rows)

COMMIT;
COMMIT

Query 5 execution times in seconds: 0.204,0.211,0.209,0.209,0.196,0.188,0.203,0.211,0.209,0.196
Average execution time: 0.2036 seconds

BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice * l_discount) as revenue
from
	lineitem
where
	l_shipdate >= date '1996-01-01'
	and l_shipdate < cast(date '1996-01-01' + interval '1 year' as date)
	and l_discount between 0.02 - 0.01 and 0.02 + 0.01
	and l_quantity < 24;
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=846160.50..846160.51 rows=1 width=32)
   ->  Gather  (cost=846160.28..846160.49 rows=2 width=32)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=845160.28..845160.29 rows=1 width=32)
               ->  Parallel Seq Scan on lineitem  (cost=0.00..843960.09 rows=240038 width=12)
                     Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date) AND (l_discount >= 0.01) AND (l_discount <= 0.03) AND (l_quantity < '24'::numeric))
 JIT:
   Functions: 7
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(9 rows)

COMMIT;
COMMIT

Query 6 execution times in seconds: 0.186,0.165,0.182,0.197,0.183,0.176,0.185,0.183,0.188,0.183
Average execution time: 0.1828 seconds

BEGIN;
BEGIN
EXPLAIN
select
	supp_nation,
	cust_nation,
	l_year,
	sum(volume) as revenue
from
	(
		select
			n1.n_name as supp_nation,
			n2.n_name as cust_nation,
			extract(year from l_shipdate) as l_year,
			l_extendedprice * (1 - l_discount) as volume
		from
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2
		where
			s_suppkey = l_suppkey
			and o_orderkey = l_orderkey
			and c_custkey = o_custkey
			and s_nationkey = n1.n_nationkey
			and c_nationkey = n2.n_nationkey
			and (
				(n1.n_name = 'INDIA' and n2.n_name = 'JORDAN')
				or (n1.n_name = 'JORDAN' and n2.n_name = 'INDIA')
			)
			and l_shipdate between date '1995-01-01' and date '1996-12-31'
	) as shipping
group by
	supp_nation,
	cust_nation,
	l_year
order by
	supp_nation,
	cust_nation,
	l_year;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=990434.84..993522.45 rows=10036 width=272)
   Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
   ->  Gather Merge  (cost=990434.84..993121.01 rows=20072 width=272)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=989434.82..989804.18 rows=10036 width=272)
               Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Sort  (cost=989434.82..989466.08 rows=12504 width=252)
                     Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                     ->  Parallel Hash Join  (cost=205859.91..988583.92 rows=12504 width=252)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           Join Filter: (((n1.n_name = 'INDIA'::bpchar) AND (n2.n_name = 'JORDAN'::bpchar)) OR ((n1.n_name = 'JORDAN'::bpchar) AND (n2.n_name = 'INDIA'::bpchar)))
                           ->  Parallel Hash Join  (cost=1527.22..767589.89 rows=300468 width=124)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..750210.72 rows=3755851 width=24)
                                       Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Parallel Hash  (cost=1497.81..1497.81 rows=2353 width=108)
                                       ->  Hash Join  (cost=1.40..1497.81 rows=2353 width=108)
                                             Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..1406.12 rows=29412 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=108)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=108)
                                                         Filter: ((n_name = 'INDIA'::bpchar) OR (n_name = 'JORDAN'::bpchar))
                           ->  Parallel Hash  (cost=197056.70..197056.70 rows=250000 width=108)
                                 ->  Parallel Hash Join  (cost=22398.28..197056.70 rows=250000 width=108)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..161898.00 rows=3125000 width=8)
                                       ->  Parallel Hash  (cost=22085.78..22085.78 rows=25000 width=108)
                                             ->  Hash Join  (cost=1.40..22085.78 rows=25000 width=108)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..21125.00 rows=312500 width=8)
                                                   ->  Hash  (cost=1.38..1.38 rows=2 width=108)
                                                         ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=108)
                                                               Filter: ((n_name = 'JORDAN'::bpchar) OR (n_name = 'INDIA'::bpchar))
 JIT:
   Functions: 62
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(36 rows)

COMMIT;
COMMIT

Query 7 execution times in seconds: 0.210,0.192,0.208,0.191,0.195,0.211,0.195,0.208,0.209,0.211
Average execution time: 0.2030 seconds

BEGIN;
BEGIN
EXPLAIN
select
	o_year,
	sum(case
		when nation = 'KENYA' then volume
		else 0
	end) / sum(volume) as mkt_share
from
	(
		select
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) as volume,
			n2.n_name as nation
		from
			part,
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2,
			region
		where
			p_partkey = l_partkey
			and s_suppkey = l_suppkey
			and l_orderkey = o_orderkey
			and o_custkey = c_custkey
			and c_nationkey = n1.n_nationkey
			and n1.n_regionkey = r_regionkey
			and r_name = 'AFRICA'
			and s_nationkey = n2.n_nationkey
			and o_orderdate between date '1995-01-01' and date '1996-12-31'
			and p_type = 'ECONOMY PLATED BRASS'
	) as all_nations
group by
	o_year
order by
	o_year;
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=518495.47..519042.51 rows=2406 width=64)
   Group Key: (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=518495.47..518964.31 rows=2406 width=96)
         Workers Planned: 1
         ->  Partial GroupAggregate  (cost=517495.46..517693.63 rows=2406 width=96)
               Group Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=517495.46..517512.80 rows=6936 width=148)
                     Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                     ->  Hash Join  (cost=515469.01..517052.95 rows=6936 width=148)
                           Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                           ->  Parallel Hash Join  (cost=515467.45..517012.76 rows=6936 width=20)
                                 Hash Cond: (supplier.s_suppkey = lineitem.l_suppkey)
                                 ->  Parallel Seq Scan on supplier  (cost=0.00..1406.12 rows=29412 width=8)
                                 ->  Parallel Hash  (cost=515406.03..515406.03 rows=4913 width=20)
                                       ->  Hash Join  (cost=492865.56..515406.03 rows=4913 width=20)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Parallel Hash Join  (cost=492863.10..515262.33 rows=24564 width=24)
                                                   Hash Cond: (customer.c_custkey = orders.o_custkey)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..21125.00 rows=312500 width=8)
                                                   ->  Parallel Hash  (cost=492556.05..492556.05 rows=24564 width=24)
                                                         ->  Parallel Hash Join  (cost=311464.74..492556.05 rows=24564 width=24)
                                                               Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                               ->  Parallel Seq Scan on orders  (cost=0.00..177523.00 rows=924256 width=12)
                                                                     Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                               ->  Parallel Hash  (cost=310426.57..310426.57 rows=83054 width=20)
                                                                     ->  Nested Loop  (cost=76.53..310426.57 rows=83054 width=20)
                                                                           ->  Parallel Bitmap Heap Scan on part  (cost=76.09..13953.42 rows=2778 width=4)
                                                                                 Recheck Cond: ((p_type)::text = 'ECONOMY PLATED BRASS'::text)
                                                                                 ->  Bitmap Index Scan on idx_part_p_type  (cost=0.00..74.43 rows=6667 width=0)
                                                                                       Index Cond: ((p_type)::text = 'ECONOMY PLATED BRASS'::text)
                                                                           ->  Index Scan using l_pk on lineitem  (cost=0.44..106.42 rows=30 width=24)
                                                                                 Index Cond: (l_partkey = part.p_partkey)
                                             ->  Hash  (cost=2.40..2.40 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.40 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AFRICA'::bpchar)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                 ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=108)
 JIT:
   Functions: 68
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(44 rows)

COMMIT;
COMMIT

Query 8 execution times in seconds: 0.210,0.211,0.199,0.212,0.209,0.205,0.193,0.214,0.210,0.216
Average execution time: 0.2079 seconds

BEGIN;
BEGIN
EXPLAIN
select
	nation,
	o_year,
	sum(amount) as sum_profit
from
	(
		select
			n_name as nation,
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount
		from
			part,
			supplier,
			lineitem,
			partsupp,
			orders,
			nation
		where
			s_suppkey = l_suppkey
			and ps_suppkey = l_suppkey
			and ps_partkey = l_partkey
			and p_partkey = l_partkey
			and o_orderkey = l_orderkey
			and s_nationkey = n_nationkey
			and p_name like '%olive%'
	) as profit
group by
	nation,
	o_year
order by
	nation,
	o_year desc;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=709958.67..736918.37 rows=60150 width=168)
   Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=709958.67..734813.12 rows=120300 width=168)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=708958.64..719927.49 rows=60150 width=168)
               Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=708958.64..710216.97 rows=503330 width=159)
                     Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                     ->  Hash Join  (cost=375773.90..582148.41 rows=503330 width=159)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Hash Join  (cost=375772.34..579343.30 rows=503330 width=31)
                                 Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Parallel Seq Scan on orders  (cost=0.00..161898.00 rows=3125000 width=8)
                                 ->  Parallel Hash  (cost=366039.72..366039.72 rows=503330 width=31)
                                       ->  Nested Loop  (cost=1774.64..366039.72 rows=503330 width=31)
                                             Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                                             ->  Parallel Hash Join  (cost=1774.20..120589.25 rows=67340 width=26)
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.43..118638.71 rows=67340 width=18)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..25720.33 rows=16835 width=4)
                                                               Filter: ((p_name)::text ~~ '%olive%'::text)
                                                         ->  Index Scan using ps_pk on partsupp  (cost=0.43..5.43 rows=9 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=1406.12..1406.12 rows=29412 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..1406.12 rows=29412 width=8)
                                             ->  Index Scan using l_pk_sk on lineitem  (cost=0.44..3.63 rows=1 width=29)
                                                   Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                           ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=108)
 JIT:
   Functions: 45
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(32 rows)

COMMIT;
COMMIT

Query 9 execution times in seconds: 0.215,0.209,0.214,0.211,0.216,0.211,0.197,0.215,0.196,0.210
Average execution time: 0.2094 seconds

BEGIN;
BEGIN
EXPLAIN
select
	c_custkey,
	c_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	c_acctbal,
	n_name,
	c_address,
	c_phone,
	c_comment
from
	customer,
	orders,
	lineitem,
	nation
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate >= date '1994-02-01'
	and o_orderdate < cast(date '1994-02-01' + interval '3 month' as date)
	and l_returnflag = 'R'
	and c_nationkey = n_nationkey
group by
	c_custkey,
	c_name,
	c_acctbal,
	c_phone,
	n_name,
	c_address,
	c_comment
order by
	revenue desc
LIMIT 20;
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1001765.74..1001765.79 rows=20 width=279)
   ->  Sort  (cost=1001765.74..1002466.84 rows=280441 width=279)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=958272.64..994303.30 rows=280441 width=279)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=958272.64..988460.79 rows=233700 width=279)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=957272.61..960485.99 rows=116850 width=279)
                           Group Key: customer.c_custkey, nation.n_name
                           ->  Sort  (cost=957272.61..957564.74 rows=116850 width=259)
                                 Sort Key: customer.c_custkey, nation.n_name
                                 ->  Hash Join  (cost=907569.44..933055.67 rows=116850 width=259)
                                       Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                       ->  Parallel Hash Join  (cost=907567.88..932695.38 rows=116850 width=159)
                                             Hash Cond: (customer.c_custkey = orders.o_custkey)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..21125.00 rows=312500 width=147)
                                             ->  Parallel Hash  (cost=906107.25..906107.25 rows=116850 width=16)
                                                   ->  Parallel Hash Join  (cost=178992.46..906107.25 rows=116850 width=16)
                                                         Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                                         ->  Parallel Seq Scan on lineitem  (cost=0.00..718960.94 rows=3106229 width=16)
                                                               Filter: (l_returnflag = 'R'::bpchar)
                                                         ->  Parallel Hash  (cost=177523.00..177523.00 rows=117557 width=8)
                                                               ->  Parallel Seq Scan on orders  (cost=0.00..177523.00 rows=117557 width=8)
                                                                     Filter: ((o_orderdate >= '1994-02-01'::date) AND (o_orderdate < '1994-05-01'::date))
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=108)
 JIT:
   Functions: 41
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(29 rows)

COMMIT;
COMMIT

Query 10 execution times in seconds: 0.196,0.197,0.201,0.202,0.191,0.202,0.186,0.205,0.180,0.198
Average execution time: 0.1958 seconds

BEGIN;
BEGIN
EXPLAIN
select
	ps_partkey,
	sum(ps_supplycost * ps_availqty) as value
from
	partsupp,
	supplier,
	nation
where
	ps_suppkey = s_suppkey
	and s_nationkey = n_nationkey
	and n_name = 'KENYA'
group by
	ps_partkey having
		sum(ps_supplycost * ps_availqty) > (
			select
				sum(ps_supplycost * ps_availqty) *         inf
			from
				partsupp,
				supplier,
				nation
			where
				ps_suppkey = s_suppkey
				and s_nationkey = n_nationkey
				and n_name = 'KENYA'
		)
order by
	value desc;
ERROR:  column "inf" does not exist
LINE 17:     sum(ps_supplycost * ps_availqty) *         inf
                                                        ^

Query 11 execution times in seconds: 0.132,0.138,0.136,0.132,0.139,0.134,0.139,0.140,0.137,0.136
Average execution time: 0.1363 seconds

BEGIN;
BEGIN
EXPLAIN
select
	l_shipmode,
	sum(case
		when o_orderpriority = '1-URGENT'
			or o_orderpriority = '2-HIGH'
			then 1
		else 0
	end) as high_line_count,
	sum(case
		when o_orderpriority <> '1-URGENT'
			and o_orderpriority <> '2-HIGH'
			then 1
		else 0
	end) as low_line_count
from
	orders,
	lineitem
where
	o_orderkey = l_orderkey
	and l_shipmode in ('MAIL', 'REG AIR')
	and l_commitdate < l_receiptdate
	and l_shipdate < l_commitdate
	and l_receiptdate >= date '1995-01-01'
	and l_receiptdate < date '1995-01-01' + interval '1 year'
group by
	l_shipmode
order by
	l_shipmode;
                                                                                                                                    QUERY PLAN                                                                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=1087986.81..1089176.31 rows=7 width=27)
   Group Key: lineitem.l_shipmode
   ->  Gather Merge  (cost=1087986.81..1089176.14 rows=14 width=27)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=1086986.79..1088174.50 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Sort  (cost=1086986.79..1087135.24 rows=59382 width=27)
                     Sort Key: lineitem.l_shipmode
                     ->  Parallel Hash Join  (cost=219271.50..1082278.47 rows=59382 width=27)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..843960.09 rows=59382 width=15)
                                 Filter: ((l_shipmode = ANY ('{MAIL,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1995-01-01'::date) AND (l_receiptdate < '1996-01-01 00:00:00'::timestamp without time zone))
                           ->  Parallel Hash  (cost=161898.00..161898.00 rows=3125000 width=20)
                                 ->  Parallel Seq Scan on orders  (cost=0.00..161898.00 rows=3125000 width=20)
 JIT:
   Functions: 20
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

COMMIT;
COMMIT

Query 12 execution times in seconds: 0.193,0.193,0.194,0.188,0.196,0.180,0.181,0.195,0.188,0.195
Average execution time: 0.1903 seconds

BEGIN;
BEGIN
EXPLAIN
select
	c_count,
	count(*) as custdist
from
	(
		select
			c_custkey,
			count(o_orderkey)
		from
			customer left outer join orders on
				c_custkey = o_custkey
				and o_comment not like '%special%accounts%'
		group by
			c_custkey
	) as c_orders (c_custkey, c_count)
group by
	c_count
order by
	custdist desc,
	c_count desc;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=709674.44..709674.94 rows=200 width=16)
   Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
   ->  HashAggregate  (cost=709664.79..709666.79 rows=200 width=16)
         Group Key: count(orders.o_orderkey)
         ->  Finalize HashAggregate  (cost=676266.36..698414.79 rows=750000 width=12)
               Group Key: customer.c_custkey
               Planned Partitions: 16
               ->  Gather  (cost=398505.15..580172.61 rows=1500000 width=12)
                     Workers Planned: 2
                     ->  Partial HashAggregate  (cost=397505.15..429172.61 rows=750000 width=12)
                           Group Key: customer.c_custkey
                           Planned Partitions: 16
                           ->  Parallel Hash Right Join  (cost=20279.68..223499.49 rows=3093434 width=8)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Parallel Seq Scan on orders  (cost=0.00..169710.50 rows=3093434 width=8)
                                       Filter: ((o_comment)::text !~~ '%special%accounts%'::text)
                                 ->  Parallel Hash  (cost=15152.43..15152.43 rows=312500 width=4)
                                       ->  Parallel Index Only Scan using customer_pkey on customer  (cost=0.42..15152.43 rows=312500 width=4)
 JIT:
   Functions: 16
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(21 rows)

COMMIT;
COMMIT

Query 13 execution times in seconds: 0.191,0.190,0.171,0.180,0.191,0.187,0.186,0.183,0.180,0.186
Average execution time: 0.1845 seconds

BEGIN;
BEGIN
EXPLAIN
select
	100.00 * sum(case
		when p_type like 'PROMO%'
			then l_extendedprice * (1 - l_discount)
		else 0
	end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue
from
	lineitem,
	part
where
	l_partkey = p_partkey
	and l_shipdate >= date '1996-07-01'
	and l_shipdate < cast(date '1996-07-01' + interval '1 month' as date);
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=788379.61..788379.62 rows=1 width=32)
   ->  Gather  (cost=788379.37..788379.58 rows=2 width=64)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=787379.37..787379.38 rows=1 width=64)
               ->  Parallel Hash Join  (cost=752116.65..784720.14 rows=151956 width=33)
                     Hash Cond: (part.p_partkey = lineitem.l_partkey)
                     ->  Parallel Seq Scan on part  (cost=0.00..24678.67 rows=416667 width=25)
                     ->  Parallel Hash  (cost=750210.72..750210.72 rows=152474 width=16)
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..750210.72 rows=152474 width=16)
                                 Filter: ((l_shipdate >= '1996-07-01'::date) AND (l_shipdate < '1996-08-01'::date))
 JIT:
   Functions: 17
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(13 rows)

COMMIT;
COMMIT

Query 14 execution times in seconds: 0.181,0.195,0.192,0.191,0.185,0.190,0.190,0.190,0.182,0.191
Average execution time: 0.1887 seconds

BEGIN;
BEGIN
create or replace view revenue0 (supplier_no, total_revenue) as
	select
		l_suppkey,
		sum(l_extendedprice * (1 - l_discount))
	from
		lineitem
	where
		l_shipdate >= '1995-01-01'
		and l_shipdate < date'1995-01-01' + interval '90 days'
	group by
		l_suppkey;
CREATE VIEW
EXPLAIN
select
	s_suppkey,
	s_name,
	s_address,
	s_phone,
	total_revenue
from
	supplier,
	revenue0
where
	s_suppkey = supplier_no
	and total_revenue = (
		select
			max(total_revenue)
		from
			revenue0
	)
order by
	s_suppkey;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=1599828.78..1614413.65 rows=248 width=103)
   InitPlan 1
     ->  Aggregate  (cost=806703.83..806703.84 rows=1 width=32)
           ->  Finalize GroupAggregate  (cost=793124.64..806082.87 rows=49677 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather Merge  (cost=793124.64..804716.75 rows=99354 width=36)
                       Workers Planned: 2
                       ->  Sort  (cost=792124.62..792248.81 rows=49677 width=36)
                             Sort Key: lineitem_1.l_suppkey
                             ->  Partial HashAggregate  (cost=782993.24..788249.74 rows=49677 width=36)
                                   Group Key: lineitem_1.l_suppkey
                                   Planned Partitions: 4
                                   ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..750210.72 rows=474679 width=16)
                                         Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate < '1995-04-01 00:00:00'::timestamp without time zone))
   ->  Finalize GroupAggregate  (cost=793124.64..806207.06 rows=248 width=36)
         Group Key: lineitem.l_suppkey
         Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
         ->  Gather Merge  (cost=793124.64..804716.75 rows=99354 width=36)
               Workers Planned: 2
               ->  Sort  (cost=792124.62..792248.81 rows=49677 width=36)
                     Sort Key: lineitem.l_suppkey
                     ->  Partial HashAggregate  (cost=782993.24..788249.74 rows=49677 width=36)
                           Group Key: lineitem.l_suppkey
                           Planned Partitions: 4
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..750210.72 rows=474679 width=16)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate < '1995-04-01 00:00:00'::timestamp without time zone))
   ->  Index Scan using s_sk on supplier  (cost=0.29..6.05 rows=1 width=71)
         Index Cond: (s_suppkey = lineitem.l_suppkey)
 JIT:
   Functions: 25
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(31 rows)

drop view revenue0;
DROP VIEW
COMMIT;
COMMIT

Query 15 execution times in seconds: 0.199,0.197,0.196,0.199,0.194,0.195,0.196,0.199,0.200,0.196
Average execution time: 0.1971 seconds

BEGIN;
BEGIN
EXPLAIN
select
	p_brand,
	p_type,
	p_size,
	count(distinct ps_suppkey) as supplier_cnt
from
	partsupp,
	part
where
	p_partkey = ps_partkey
	and p_brand <> 'Brand#45'
	and p_type not like 'MEDIUM PLATED%'
	and p_size in (39, 36, 49, 3, 17, 21, 48, 26)
	and ps_suppkey not in (
		select
			s_suppkey
		from
			supplier
		where
			s_comment like '%Customer%Complaints%'
	)
group by
	p_brand,
	p_type,
	p_size
order by
	supplier_cnt desc,
	p_brand,
	p_type,
	p_size;
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=180893.39..181090.63 rows=78895 width=44)
   Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
   ->  GroupAggregate  (cost=134818.71..172047.21 rows=78895 width=44)
         Group Key: part.p_brand, part.p_type, part.p_size
         ->  Gather Merge  (cost=134818.71..168376.90 rows=288136 width=40)
               Workers Planned: 2
               ->  Sort  (cost=133818.69..134118.83 rows=120057 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Parallel Hash Join  (cost=33416.46..120406.87 rows=120057 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Parallel Index Only Scan using ps_pk_sk on partsupp  (cost=1737.44..86540.34 rows=833333 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..1737.00 rows=5 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Parallel Hash  (cost=30928.67..30928.67 rows=60028 width=40)
                                 ->  Parallel Seq Scan on part  (cost=0.00..30928.67 rows=60028 width=40)
                                       Filter: ((p_brand <> 'Brand#45'::bpchar) AND ((p_type)::text !~~ 'MEDIUM PLATED%'::text) AND (p_size = ANY ('{39,36,49,3,17,21,48,26}'::integer[])))
 JIT:
   Functions: 23
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(21 rows)

COMMIT;
COMMIT

Query 16 execution times in seconds: 0.192,0.190,0.180,0.188,0.191,0.204,0.204,0.194,0.184,0.188
Average execution time: 0.1915 seconds

BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice) / 7.0 as avg_yearly
from
	lineitem,
	part
where
	p_partkey = l_partkey
	and p_brand = 'Brand#51'
	and p_container = 'WRAP PACK'
	and l_quantity < (
		select
			0.2 * avg(l_quantity)
		from
			lineitem
		where
			l_partkey = p_partkey
	);
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=946618.34..946618.35 rows=1 width=32)
   ->  Hash Join  (cost=3884.32..946594.39 rows=9577 width=8)
         Hash Cond: (lineitem.l_partkey = part.p_partkey)
         Join Filter: (lineitem.l_quantity < (SubPlan 1))
         ->  Seq Scan on lineitem  (cost=0.00..862709.96 rows=29999796 width=17)
         ->  Hash  (cost=3872.31..3872.31 rows=961 width=4)
               ->  Bitmap Heap Scan on part  (cost=701.58..3872.31 rows=961 width=4)
                     Recheck Cond: ((p_container = 'WRAP PACK'::bpchar) AND (p_brand = 'Brand#51'::bpchar))
                     ->  BitmapAnd  (cost=701.58..701.58 rows=961 width=0)
                           ->  Bitmap Index Scan on idx_part_p_container  (cost=0.00..275.42 rows=24933 width=0)
                                 Index Cond: (p_container = 'WRAP PACK'::bpchar)
                           ->  Bitmap Index Scan on idx_part_p_brand  (cost=0.00..425.42 rows=38533 width=0)
                                 Index Cond: (p_brand = 'Brand#51'::bpchar)
         SubPlan 1
           ->  Aggregate  (cost=125.04..125.05 rows=1 width=32)
                 ->  Index Scan using l_pk on lineitem lineitem_1  (cost=0.44..124.96 rows=30 width=5)
                       Index Cond: (l_partkey = part.p_partkey)
 JIT:
   Functions: 24
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(20 rows)

COMMIT;
COMMIT

Query 17 execution times in seconds: 0.191,0.193,0.187,0.193,0.195,0.191,0.192,0.181,0.185,0.194
Average execution time: 0.1902 seconds

BEGIN;
BEGIN
EXPLAIN
select
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice,
	sum(l_quantity)
from
	customer,
	orders,
	lineitem
where
	o_orderkey in (
		select
			l_orderkey
		from
			lineitem
		group by
			l_orderkey having
				sum(l_quantity) > 315
	)
	and c_custkey = o_custkey
	and o_orderkey = l_orderkey
group by
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice
order by
	o_totalprice desc,
	o_orderdate
LIMIT 100;
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2181130.47..2181130.72 rows=100 width=71)
   ->  Sort  (cost=2181130.47..2182511.05 rows=552232 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=2038346.72..2160024.56 rows=552232 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Merge Join  (cost=2038346.72..2148979.92 rows=552232 width=44)
                     Merge Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Gather Merge  (cost=2038344.67..2102661.18 rows=552232 width=25)
                           Workers Planned: 2
                           ->  Sort  (cost=2037344.64..2037919.88 rows=230097 width=25)
                                 Sort Key: orders.o_custkey, orders.o_orderkey
                                 ->  Nested Loop  (cost=1.31..2011346.84 rows=230097 width=25)
                                       ->  Merge Join  (cost=0.87..1652065.31 rows=57525 width=24)
                                             Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Parallel Index Scan using orders_pkey on orders  (cost=0.43..284332.40 rows=3125000 width=20)
                                             ->  GroupAggregate  (cost=0.44..1359000.01 rows=138059 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '315'::numeric)
                                                   ->  Index Scan using l_ok on lineitem lineitem_1  (cost=0.44..1202788.38 rows=29999796 width=9)
                                       ->  Index Scan using l_ok on lineitem  (cost=0.44..5.53 rows=72 width=9)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                     ->  Index Scan using customer_pkey on customer  (cost=0.42..37541.43 rows=750000 width=23)
 JIT:
   Functions: 24
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(25 rows)

COMMIT;
COMMIT

Query 18 execution times in seconds: 0.183,0.194,0.190,0.191,0.192,0.180,0.192,0.194,0.195,0.186
Average execution time: 0.1897 seconds

BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice* (1 - l_discount)) as revenue
from
	lineitem,
	part
where
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#12'
		and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')
		and l_quantity >= 2 and l_quantity <= 2+10
		and p_size between 1 and 5
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#13'
		and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')
		and l_quantity >= 20 and l_quantity <= 20+10
		and p_size between 1 and 10
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#53'
		and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')
		and l_quantity >= 20 and l_quantity <= 20+10
		and p_size between 1 and 15
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	);

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=141765.52..141765.53 rows=1 width=32)
   ->  Gather  (cost=141765.30..141765.51 rows=2 width=32)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=140765.30..140765.31 rows=1 width=32)
               ->  Nested Loop  (cost=4590.08..140763.58 rows=229 width=12)
                     ->  Parallel Bitmap Heap Scan on part  (cost=4589.64..23138.83 rows=983 width=30)
                           Recheck Cond: (((p_brand = 'Brand#12'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[]))) OR ((p_brand = 'Brand#13'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[]))) OR ((p_brand = 'Brand#53'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[]))))
                           Filter: ((p_size >= 1) AND (((p_brand = 'Brand#12'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#13'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#53'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  BitmapOr  (cost=4589.64..4589.64 rows=11897 width=0)
                                 ->  BitmapAnd  (cost=1544.29..1544.29 rows=4100 width=0)
                                       ->  Bitmap Index Scan on idx_part_p_brand  (cost=0.00..449.68 rows=40700 width=0)
                                             Index Cond: (p_brand = 'Brand#12'::bpchar)
                                       ->  Bitmap Index Scan on idx_part_p_container  (cost=0.00..1093.19 rows=100733 width=0)
                                             Index Cond: (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[]))
                                 ->  BitmapAnd  (cost=1531.05..1531.05 rows=3978 width=0)
                                       ->  Bitmap Index Scan on idx_part_p_brand  (cost=0.00..436.68 rows=39500 width=0)
                                             Index Cond: (p_brand = 'Brand#13'::bpchar)
                                       ->  Bitmap Index Scan on idx_part_p_container  (cost=0.00..1092.95 rows=100700 width=0)
                                             Index Cond: (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[]))
                                 ->  BitmapAnd  (cost=1513.79..1513.79 rows=3820 width=0)
                                       ->  Bitmap Index Scan on idx_part_p_brand  (cost=0.00..415.42 rows=37733 width=0)
                                             Index Cond: (p_brand = 'Brand#53'::bpchar)
                                       ->  Bitmap Index Scan on idx_part_p_container  (cost=0.00..1096.94 rows=101233 width=0)
                                             Index Cond: (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[]))
                     ->  Index Scan using l_pk on lineitem  (cost=0.44..119.65 rows=1 width=21)
                           Index Cond: (l_partkey = part.p_partkey)
                           Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '2'::numeric) AND (l_quantity <= '12'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#12'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '2'::numeric) AND (l_quantity <= '12'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#13'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#53'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
 JIT:
   Functions: 14
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(30 rows)

COMMIT;
COMMIT

Query 19 execution times in seconds: 0.197,0.201,0.201,0.200,0.198,0.198,0.201,0.199,0.194,0.193
Average execution time: 0.1982 seconds

BEGIN;
BEGIN
EXPLAIN
select
	s_name,
	s_address
from
	supplier,
	nation
where
	s_suppkey in (
		select
			ps_suppkey
		from
			partsupp
		where
			ps_partkey in (
				select
					p_partkey
				from
					part
				where
					p_name like 'beige%'
			)
			and ps_availqty > (
				select
					0.5 * sum(l_quantity)
				from
					lineitem
				where
					l_partkey = ps_partkey
					and l_suppkey = ps_suppkey
					and l_shipdate >= '1995-01-01'
					and l_shipdate < cast(date '1995-01-01' + interval '1 year' as date)
			)
	)
	and s_nationkey = n_nationkey
	and n_name = 'MOZAMBIQUE'
order by
	s_name;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=872195.00..872196.35 rows=539 width=51)
   Sort Key: supplier.s_name
   ->  Hash Semi Join  (cost=870969.36..872170.54 rows=539 width=51)
         Hash Cond: (supplier.s_suppkey = partsupp.ps_suppkey)
         ->  Nested Loop  (cost=23.79..1207.67 rows=2000 width=55)
               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                     Filter: (n_name = 'MOZAMBIQUE'::bpchar)
               ->  Bitmap Heap Scan on supplier  (cost=23.79..1186.36 rows=2000 width=59)
                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                     ->  Bitmap Index Scan on s_nk  (cost=0.00..23.29 rows=2000 width=0)
                           Index Cond: (s_nationkey = nation.n_nationkey)
         ->  Hash  (cost=870777.22..870777.22 rows=13468 width=4)
               ->  Nested Loop  (cost=0.43..870777.22 rows=13468 width=4)
                     ->  Seq Scan on part  (cost=0.00..33012.00 rows=10101 width=4)
                           Filter: ((p_name)::text ~~ 'beige%'::text)
                     ->  Index Scan using ps_pk on partsupp  (cost=0.43..82.91 rows=3 width=8)
                           Index Cond: (ps_partkey = part.p_partkey)
                           Filter: ((ps_availqty)::numeric > (SubPlan 1))
                           SubPlan 1
                             ->  Aggregate  (cost=8.47..8.48 rows=1 width=32)
                                   ->  Index Scan using l_sk_pk on lineitem  (cost=0.44..8.46 rows=1 width=5)
                                         Index Cond: ((l_suppkey = partsupp.ps_suppkey) AND (l_partkey = partsupp.ps_partkey))
                                         Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate < '1996-01-01'::date))
 JIT:
   Functions: 30
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(26 rows)

COMMIT;
COMMIT

Query 20 execution times in seconds: 0.193,0.197,0.187,0.194,0.193,0.196,0.196,0.178,0.197,0.193
Average execution time: 0.1924 seconds

BEGIN;
BEGIN
EXPLAIN
select
	s_name,
	count(*) as numwait
from
	supplier,
	lineitem l1,
	orders,
	nation
where
	s_suppkey = l1.l_suppkey
	and o_orderkey = l1.l_orderkey
	and o_orderstatus = 'F'
	and l1.l_receiptdate > l1.l_commitdate
	and exists (
		select
			*
		from
			lineitem l2
		where
			l2.l_orderkey = l1.l_orderkey
			and l2.l_suppkey <> l1.l_suppkey
	)
	and not exists (
		select
			*
		from
			lineitem l3
		where
			l3.l_orderkey = l1.l_orderkey
			and l3.l_suppkey <> l1.l_suppkey
			and l3.l_receiptdate > l3.l_commitdate
	)
	and s_nationkey = n_nationkey
	and n_name = 'JAPAN'
group by
	s_name
order by
	numwait desc,
	s_name
LIMIT 100;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=950246.67..950246.67 rows=1 width=34)
   ->  Sort  (cost=950246.67..950246.67 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=950246.64..950246.66 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=950246.64..950246.64 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop  (cost=2513.74..950246.63 rows=1 width=26)
                           ->  Nested Loop Semi Join  (cost=2513.31..950240.45 rows=1 width=34)
                                 ->  Gather  (cost=2512.87..950229.91 rows=1 width=34)
                                       Workers Planned: 2
                                       ->  Nested Loop Anti Join  (cost=1512.87..949229.81 rows=1 width=34)
                                             ->  Parallel Hash Join  (cost=1512.43..737078.25 rows=166665 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..718960.94 rows=4166638 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Parallel Hash  (cost=1497.73..1497.73 rows=1176 width=30)
                                                         ->  Hash Join  (cost=1.32..1497.73 rows=1176 width=30)
                                                               Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on supplier  (cost=0.00..1406.12 rows=29412 width=34)
                                                               ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                           Filter: (n_name = 'JAPAN'::bpchar)
                                             ->  Index Scan using l_ok on lineitem l3  (cost=0.44..10.70 rows=24 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using l_ok on lineitem l2  (cost=0.44..10.52 rows=72 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: (l_suppkey <> l1.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..6.18 rows=1 width=4)
                                 Index Cond: (o_orderkey = l1.l_orderkey)
                                 Filter: (o_orderstatus = 'F'::bpchar)
 JIT:
   Functions: 44
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(35 rows)

COMMIT;
COMMIT

Query 21 execution times in seconds: 0.198,0.201,0.191,0.196,0.195,0.188,0.201,0.204,0.203,0.198
Average execution time: 0.1975 seconds

BEGIN;
BEGIN
EXPLAIN
select
	cntrycode,
	count(*) as numcust,
	sum(c_acctbal) as totacctbal
from
	(
		select
			substring(c_phone from 1 for 2) as cntrycode,
			c_acctbal
		from
			customer
		where
			substring(c_phone from 1 for 2) in
				('25', '19', '20', '30', '27', '26', '24')
			and c_acctbal > (
				select
					avg(c_acctbal)
				from
					customer
				where
					c_acctbal > 0.00
					and substring(c_phone from 1 for 2) in
						('25', '19', '20', '30', '27', '26', '24')
			)
			and not exists (
				select
					*
				from
					orders
				where
					o_custkey = c_custkey
			)
	) as vip
group by
	cntrycode
order by
	cntrycode;
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=57024.65..57535.29 rows=3826 width=72)
   Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
   InitPlan 1
     ->  Finalize Aggregate  (cost=27228.14..27228.15 rows=1 width=32)
           ->  Gather  (cost=27227.91..27228.12 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=26227.91..26227.92 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..26203.12 rows=9915 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{25,19,20,30,27,26,24}'::text[])))
   ->  Gather Merge  (cost=29796.50..30208.31 rows=3188 width=72)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=28796.48..28840.31 rows=1594 width=72)
               Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Sort  (cost=28796.48..28800.46 rows=1594 width=38)
                     Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                     ->  Nested Loop Anti Join  (cost=0.43..28711.69 rows=1594 width=38)
                           ->  Parallel Seq Scan on customer  (cost=0.00..26203.12 rows=3646 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{25,19,20,30,27,26,24}'::text[])))
                           ->  Index Only Scan using o_ck on orders  (cost=0.43..3.31 rows=18 width=4)
                                 Index Cond: (o_custkey = customer.c_custkey)
(20 rows)

COMMIT;
COMMIT

Query 22 execution times in seconds: 0.141,0.140,0.146,0.147,0.142,0.146,0.147,0.146,0.142,0.146
Average execution time: 0.1443 seconds


