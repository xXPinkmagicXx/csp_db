=== Experiment: all ===
INDEX_ALL=1
INDEX_NUMBERS=1
INDEX_DATES=1
INDEX_TEXT=1

[Info] Running drop_indexes.sh
[Info] Keeping date indexes
[Info] Keeping numbers indexes
[Info] Keeping text indexes
[Info] Running create_indexes.sh
[Info] Creating indexes for dates
[Info] Creating indexes for text
[Info] Creating indexes for numbers

[Info] Running queries(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22) for all
BEGIN;
BEGIN
EXPLAIN
select
	l_returnflag,
	l_linestatus,
	sum(l_quantity) as sum_qty,
	sum(l_extendedprice) as sum_base_price,
	sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
	avg(l_quantity) as avg_qty,
	avg(l_extendedprice) as avg_price,
	avg(l_discount) as avg_disc,
	count(*) as count_order
from
	lineitem
where
	l_shipdate <= date '1998-12-01' - interval '83 days'
group by
	l_returnflag,
	l_linestatus
order by
	l_returnflag,
	l_linestatus;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=1152162.24..1152164.20 rows=6 width=236)
   Group Key: l_returnflag, l_linestatus
   ->  Gather Merge  (cost=1152162.24..1152163.64 rows=12 width=236)
         Workers Planned: 2
         ->  Sort  (cost=1151162.22..1151162.24 rows=6 width=236)
               Sort Key: l_returnflag, l_linestatus
               ->  Partial HashAggregate  (cost=1151162.01..1151162.14 rows=6 width=236)
                     Group Key: l_returnflag, l_linestatus
                     ->  Parallel Seq Scan on lineitem  (cost=0.00..718960.94 rows=12348602 width=25)
                           Filter: (l_shipdate <= '1998-09-09 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 9
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(13 rows)

COMMIT;
COMMIT

Query 1 executed in 0.187 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	s_acctbal,
	s_name,
	n_name,
	p_partkey,
	p_mfgr,
	s_address,
	s_phone,
	s_comment
from
	part,
	supplier,
	partsupp,
	nation,
	region
where
	p_partkey = ps_partkey
	and s_suppkey = ps_suppkey
	and p_size = 4
	and p_type like '%BRASS'
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'EUROPE'
	and ps_supplycost = (
		select
			min(ps_supplycost)
		from
			partsupp,
			supplier,
			nation,
			region
		where
			p_partkey = ps_partkey
			and s_suppkey = ps_suppkey
			and s_nationkey = n_nationkey
			and n_regionkey = r_regionkey
			and r_name = 'EUROPE'
	)
order by
	s_acctbal desc,
	n_name,
	s_name,
	p_partkey
LIMIT 100;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=589072.82..589072.83 rows=1 width=270)
   ->  Sort  (cost=589072.82..589072.83 rows=1 width=270)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Hash Join  (cost=192143.38..589072.81 rows=1 width=270)
               Hash Cond: ((part.p_partkey = partsupp.ps_partkey) AND ((SubPlan 1) = partsupp.ps_supplycost))
               ->  Bitmap Heap Scan on part  (cost=210.97..21420.83 rows=3161 width=30)
                     Recheck Cond: (p_size = 4)
                     Filter: ((p_type)::text ~~ '%BRASS'::text)
                     ->  Bitmap Index Scan on p_s  (cost=0.00..210.18 rows=18900 width=0)
                           Index Cond: (p_size = 4)
               ->  Hash  (cost=152588.41..152588.41 rows=800000 width=250)
                     ->  Hash Join  (cost=2026.96..152588.41 rows=800000 width=250)
                           Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on partsupp  (cost=0.00..127568.00 rows=4000000 width=14)
                           ->  Hash  (cost=1901.96..1901.96 rows=10000 width=244)
                                 ->  Hash Join  (cost=2.46..1901.96 rows=10000 width=244)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..1612.00 rows=50000 width=144)
                                       ->  Hash  (cost=2.40..2.40 rows=5 width=108)
                                             ->  Hash Join  (cost=1.07..2.40 rows=5 width=108)
                                                   Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=112)
                                                   ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                         ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                               Filter: (r_name = 'EUROPE'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=110.18..110.19 rows=1 width=32)
                       ->  Nested Loop  (cost=0.86..110.17 rows=2 width=6)
                             Join Filter: (region_1.r_regionkey = nation_1.n_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'EUROPE'::bpchar)
                             ->  Nested Loop  (cost=0.86..108.98 rows=10 width=10)
                                   ->  Nested Loop  (cost=0.72..107.43 rows=10 width=10)
                                         ->  Index Scan using partsupp_pkey on partsupp partsupp_1  (cost=0.43..24.36 rows=10 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..8.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
 JIT:
   Functions: 65
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(42 rows)

COMMIT;
COMMIT

Query 2 executed in 0.203 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	l_orderkey,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	o_orderdate,
	o_shippriority
from
	customer,
	orders,
	lineitem
where
	c_mktsegment = 'FURNITURE'
	and c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate < date '1995-03-22'
	and l_shipdate > date '1995-03-22'
group by
	l_orderkey,
	o_orderdate,
	o_shippriority
order by
	revenue desc,
	o_orderdate
LIMIT 10;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1327240.69..1327240.71 rows=10 width=44)
   ->  Sort  (cost=1327240.69..1331119.25 rows=1551423 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=1089541.58..1293715.00 rows=1551423 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1089541.58..1258161.56 rows=1292852 width=44)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=1088541.55..1107934.33 rows=646426 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=1088541.55..1090157.62 rows=646426 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Parallel Hash Join  (cost=200268.92..1012896.58 rows=646426 width=24)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..718960.94 rows=6620608 width=16)
                                             Filter: (l_shipdate > '1995-03-22'::date)
                                       ->  Parallel Hash  (cost=194964.92..194964.92 rows=305120 width=12)
                                             ->  Parallel Hash Join  (cost=21224.16..194964.92 rows=305120 width=12)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..169710.50 rows=1535326 width=16)
                                                         Filter: (o_orderdate < '1995-03-22'::date)
                                                   ->  Parallel Hash  (cost=20447.86..20447.86 rows=62104 width=4)
                                                         ->  Parallel Bitmap Heap Scan on customer  (cost=1671.56..20447.86 rows=62104 width=4)
                                                               Recheck Cond: (c_mktsegment = 'FURNITURE'::bpchar)
                                                               ->  Bitmap Index Scan on idx_customer_c_mktsegment  (cost=0.00..1634.30 rows=149050 width=0)
                                                                     Index Cond: (c_mktsegment = 'FURNITURE'::bpchar)
 JIT:
   Functions: 33
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(28 rows)

COMMIT;
COMMIT

Query 3 executed in 0.198 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	o_orderpriority,
	count(*) as order_count
from
	orders
where
	o_orderdate >= date '1996-06-01'
	and o_orderdate < cast(date '1996-06-01' + interval '3 month' as date)
	and exists (
		select
			*
		from
			lineitem
		where
			l_orderkey = o_orderkey
			and l_commitdate < l_receiptdate
	)
group by
	o_orderpriority
order by
	o_orderpriority;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=477549.34..477600.68 rows=5 width=24)
   Group Key: orders.o_orderpriority
   ->  Gather Merge  (cost=477549.34..477600.58 rows=10 width=24)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=476549.31..476599.40 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Sort  (cost=476549.31..476565.99 rows=6672 width=16)
                     Sort Key: orders.o_orderpriority
                     ->  Nested Loop Semi Join  (cost=3957.57..476125.51 rows=6672 width=16)
                           ->  Parallel Bitmap Heap Scan on orders  (cost=3957.14..170175.54 rows=120191 width=20)
                                 Recheck Cond: ((o_orderdate >= '1996-06-01'::date) AND (o_orderdate < '1996-09-01'::date))
                                 ->  Bitmap Index Scan on o_od  (cost=0.00..3885.02 rows=288459 width=0)
                                       Index Cond: ((o_orderdate >= '1996-06-01'::date) AND (o_orderdate < '1996-09-01'::date))
                           ->  Index Scan using lineitem_pkey on lineitem  (cost=0.44..48.55 rows=24 width=4)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Filter: (l_commitdate < l_receiptdate)
 JIT:
   Functions: 15
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(19 rows)

COMMIT;
COMMIT

Query 4 executed in 0.184 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	n_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue
from
	customer,
	orders,
	lineitem,
	supplier,
	nation,
	region
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and l_suppkey = s_suppkey
	and c_nationkey = s_nationkey
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'EUROPE'
	and o_orderdate >= date '1995-01-01'
	and o_orderdate < date '1995-01-01' + interval '1 year'
group by
	n_name
order by
	revenue desc;
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=1083750.41..1083750.47 rows=25 width=136)
   Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
   ->  Finalize GroupAggregate  (cost=1083555.23..1083749.83 rows=25 width=136)
         Group Key: nation.n_name
         ->  Gather Merge  (cost=1083555.23..1083749.14 rows=50 width=136)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=1082555.21..1082743.35 rows=25 width=136)
                     Group Key: nation.n_name
                     ->  Sort  (cost=1082555.21..1082592.77 rows=15026 width=116)
                           Sort Key: nation.n_name
                           ->  Parallel Hash Join  (cost=213913.13..1081512.77 rows=15026 width=116)
                                 Hash Cond: ((orders.o_custkey = customer.c_custkey) AND (supplier.s_nationkey = customer.c_nationkey))
                                 ->  Parallel Hash Join  (cost=186879.63..1037341.82 rows=375704 width=128)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash Join  (cost=1651.22..750941.95 rows=2499983 width=128)
                                             Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                             ->  Parallel Seq Scan on lineitem  (cost=0.00..687711.15 rows=12499915 width=20)
                                             ->  Parallel Hash  (cost=1577.70..1577.70 rows=5882 width=116)
                                                   ->  Hash Join  (cost=2.46..1577.70 rows=5882 width=116)
                                                         Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..1406.12 rows=29412 width=8)
                                                         ->  Hash  (cost=2.40..2.40 rows=5 width=108)
                                                               ->  Hash Join  (cost=1.07..2.40 rows=5 width=108)
                                                                     Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=112)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'EUROPE'::bpchar)
                                       ->  Parallel Hash  (cost=177523.00..177523.00 rows=469633 width=8)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..177523.00 rows=469633 width=8)
                                                   Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate < '1996-01-01 00:00:00'::timestamp without time zone))
                                 ->  Parallel Hash  (cost=21125.00..21125.00 rows=312500 width=8)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..21125.00 rows=312500 width=8)
 JIT:
   Functions: 57
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(36 rows)

COMMIT;
COMMIT

Query 5 executed in 0.203 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice * l_discount) as revenue
from
	lineitem
where
	l_shipdate >= date '1995-01-01'
	and l_shipdate < cast(date '1995-01-01' + interval '1 year' as date)
	and l_discount between 0.07 - 0.01 and 0.07 + 0.01
	and l_quantity < 25;
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=846164.66..846164.67 rows=1 width=32)
   ->  Gather  (cost=846164.43..846164.64 rows=2 width=32)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=845164.43..845164.44 rows=1 width=32)
               ->  Parallel Seq Scan on lineitem  (cost=0.00..843960.09 rows=240869 width=12)
                     Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate < '1996-01-01'::date) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 7
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(9 rows)

COMMIT;
COMMIT

Query 6 executed in 0.186 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	supp_nation,
	cust_nation,
	l_year,
	sum(volume) as revenue
from
	(
		select
			n1.n_name as supp_nation,
			n2.n_name as cust_nation,
			extract(year from l_shipdate) as l_year,
			l_extendedprice * (1 - l_discount) as volume
		from
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2
		where
			s_suppkey = l_suppkey
			and o_orderkey = l_orderkey
			and c_custkey = o_custkey
			and s_nationkey = n1.n_nationkey
			and c_nationkey = n2.n_nationkey
			and (
				(n1.n_name = 'MOROCCO' and n2.n_name = 'VIETNAM')
				or (n1.n_name = 'VIETNAM' and n2.n_name = 'MOROCCO')
			)
			and l_shipdate between date '1995-01-01' and date '1996-12-31'
	) as shipping
group by
	supp_nation,
	cust_nation,
	l_year
order by
	supp_nation,
	cust_nation,
	l_year;
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=990547.71..993638.46 rows=10044 width=272)
   Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
   ->  Gather Merge  (cost=990547.71..993236.70 rows=20088 width=272)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=989547.69..989918.03 rows=10044 width=272)
               Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Sort  (cost=989547.69..989579.07 rows=12553 width=252)
                     Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                     ->  Parallel Hash Join  (cost=205859.91..988693.10 rows=12553 width=252)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           Join Filter: (((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'VIETNAM'::bpchar)) OR ((n1.n_name = 'VIETNAM'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)))
                           ->  Parallel Hash Join  (cost=1527.22..767651.76 rows=301641 width=124)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..750210.72 rows=3770512 width=24)
                                       Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Parallel Hash  (cost=1497.81..1497.81 rows=2353 width=108)
                                       ->  Hash Join  (cost=1.40..1497.81 rows=2353 width=108)
                                             Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..1406.12 rows=29412 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=108)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=108)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'VIETNAM'::bpchar))
                           ->  Parallel Hash  (cost=197056.70..197056.70 rows=250000 width=108)
                                 ->  Parallel Hash Join  (cost=22398.28..197056.70 rows=250000 width=108)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..161898.00 rows=3125000 width=8)
                                       ->  Parallel Hash  (cost=22085.78..22085.78 rows=25000 width=108)
                                             ->  Hash Join  (cost=1.40..22085.78 rows=25000 width=108)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..21125.00 rows=312500 width=8)
                                                   ->  Hash  (cost=1.38..1.38 rows=2 width=108)
                                                         ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=108)
                                                               Filter: ((n_name = 'VIETNAM'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
 JIT:
   Functions: 62
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(36 rows)

COMMIT;
COMMIT

Query 7 executed in 0.193 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	o_year,
	sum(case
		when nation = 'VIETNAM' then volume
		else 0
	end) / sum(volume) as mkt_share
from
	(
		select
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) as volume,
			n2.n_name as nation
		from
			part,
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2,
			region
		where
			p_partkey = l_partkey
			and s_suppkey = l_suppkey
			and l_orderkey = o_orderkey
			and o_custkey = c_custkey
			and c_nationkey = n1.n_nationkey
			and n1.n_regionkey = r_regionkey
			and r_name = 'ASIA'
			and s_nationkey = n2.n_nationkey
			and o_orderdate between date '1995-01-01' and date '1996-12-31'
			and p_type = 'MEDIUM PLATED STEEL'
	) as all_nations
group by
	o_year
order by
	o_year;
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=942653.19..943203.33 rows=2406 width=64)
   Group Key: (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=942653.19..943125.13 rows=2406 width=96)
         Workers Planned: 1
         ->  Partial GroupAggregate  (cost=941653.18..941854.45 rows=2406 width=96)
               Group Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=941653.18..941670.86 rows=7074 width=148)
                     Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                     ->  Hash Join  (cost=939615.56..941200.86 rows=7074 width=148)
                           Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                           ->  Parallel Hash Join  (cost=939614.00..941159.89 rows=7074 width=20)
                                 Hash Cond: (supplier.s_suppkey = lineitem.l_suppkey)
                                 ->  Parallel Seq Scan on supplier  (cost=0.00..1406.12 rows=29412 width=8)
                                 ->  Parallel Hash  (cost=939551.36..939551.36 rows=5011 width=20)
                                       ->  Hash Join  (cost=917006.03..939551.36 rows=5011 width=20)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Parallel Hash Join  (cost=917003.57..939404.83 rows=25054 width=24)
                                                   Hash Cond: (customer.c_custkey = orders.o_custkey)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..21125.00 rows=312500 width=8)
                                                   ->  Parallel Hash  (cost=916690.39..916690.39 rows=25054 width=24)
                                                         ->  Parallel Hash Join  (cost=735530.99..916690.39 rows=25054 width=24)
                                                               Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                               ->  Parallel Seq Scan on orders  (cost=0.00..177523.00 rows=941869 width=12)
                                                                     Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                               ->  Parallel Hash  (cost=734491.93..734491.93 rows=83125 width=20)
                                                                     ->  Parallel Hash Join  (cost=13968.37..734491.93 rows=83125 width=20)
                                                                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                                                           ->  Parallel Seq Scan on lineitem  (cost=0.00..687711.15 rows=12499915 width=24)
                                                                           ->  Parallel Hash  (cost=13933.73..13933.73 rows=2771 width=4)
                                                                                 ->  Parallel Bitmap Heap Scan on part  (cost=75.96..13933.73 rows=2771 width=4)
                                                                                       Recheck Cond: ((p_type)::text = 'MEDIUM PLATED STEEL'::text)
                                                                                       ->  Bitmap Index Scan on idx_part_p_type  (cost=0.00..74.30 rows=6650 width=0)
                                                                                             Index Cond: ((p_type)::text = 'MEDIUM PLATED STEEL'::text)
                                             ->  Hash  (cost=2.40..2.40 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.40 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'ASIA'::bpchar)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                 ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=108)
 JIT:
   Functions: 74
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(45 rows)

COMMIT;
COMMIT

Query 8 executed in 0.207 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	nation,
	o_year,
	sum(amount) as sum_profit
from
	(
		select
			n_name as nation,
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount
		from
			part,
			supplier,
			lineitem,
			partsupp,
			orders,
			nation
		where
			s_suppkey = l_suppkey
			and ps_suppkey = l_suppkey
			and ps_partkey = l_partkey
			and p_partkey = l_partkey
			and o_orderkey = l_orderkey
			and s_nationkey = n_nationkey
			and p_name like '%khaki%'
	) as profit
group by
	nation,
	o_year
order by
	nation,
	o_year desc;
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=1329773.59..1361818.09 rows=60150 width=168)
   Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=1329773.59..1359712.84 rows=120300 width=168)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=1328773.57..1344827.22 rows=60150 width=168)
               Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=1328773.57..1330667.49 rows=757570 width=159)
                     Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                     ->  Hash Join  (cost=921186.79..1135680.99 rows=757570 width=159)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Hash Join  (cost=921185.22..1131459.76 rows=757570 width=31)
                                 Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Parallel Seq Scan on orders  (cost=0.00..161898.00 rows=3125000 width=8)
                                 ->  Parallel Hash  (cost=906536.60..906536.60 rows=757570 width=31)
                                       ->  Parallel Hash Join  (cost=765615.86..906536.60 rows=757570 width=31)
                                             Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                             ->  Parallel Hash Join  (cost=763842.09..902774.04 rows=757570 width=35)
                                                   Hash Cond: ((partsupp.ps_suppkey = lineitem.l_suppkey) AND (partsupp.ps_partkey = lineitem.l_partkey))
                                                   ->  Parallel Seq Scan on partsupp  (cost=0.00..104234.67 rows=1666667 width=14)
                                                   ->  Parallel Hash  (cost=746559.54..746559.54 rows=757570 width=33)
                                                         ->  Parallel Hash Join  (cost=26035.98..746559.54 rows=757570 width=33)
                                                               Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                                               ->  Parallel Seq Scan on lineitem  (cost=0.00..687711.15 rows=12499915 width=29)
                                                               ->  Parallel Hash  (cost=25720.33..25720.33 rows=25252 width=4)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..25720.33 rows=25252 width=4)
                                                                           Filter: ((p_name)::text ~~ '%khaki%'::text)
                                             ->  Parallel Hash  (cost=1406.12..1406.12 rows=29412 width=8)
                                                   ->  Parallel Seq Scan on supplier  (cost=0.00..1406.12 rows=29412 width=8)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=108)
 JIT:
   Functions: 55
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

COMMIT;
COMMIT

Query 9 executed in 0.204 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	c_custkey,
	c_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	c_acctbal,
	n_name,
	c_address,
	c_phone,
	c_comment
from
	customer,
	orders,
	lineitem,
	nation
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate >= date '1993-06-01'
	and o_orderdate < cast(date '1993-06-01' + interval '3 month' as date)
	and l_returnflag = 'R'
	and c_nationkey = n_nationkey
group by
	c_custkey,
	c_name,
	c_acctbal,
	c_phone,
	n_name,
	c_address,
	c_comment
order by
	revenue desc
LIMIT 20;
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=995310.99..995311.04 rows=20 width=280)
   ->  Sort  (cost=995310.99..996020.94 rows=283980 width=280)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=951268.92..987754.39 rows=283980 width=280)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=951268.92..981838.14 rows=236650 width=280)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=950268.90..953522.83 rows=118325 width=280)
                           Group Key: customer.c_custkey, nation.n_name
                           ->  Sort  (cost=950268.90..950564.71 rows=118325 width=260)
                                 Sort Key: customer.c_custkey, nation.n_name
                                 ->  Hash Join  (cost=900241.69..925738.60 rows=118325 width=260)
                                       Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                       ->  Parallel Hash Join  (cost=900240.13..925373.78 rows=118325 width=160)
                                             Hash Cond: (customer.c_custkey = orders.o_custkey)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..21125.00 rows=312500 width=148)
                                             ->  Parallel Hash  (cost=898761.07..898761.07 rows=118325 width=16)
                                                   ->  Parallel Hash Join  (cost=171559.88..898761.07 rows=118325 width=16)
                                                         Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                                         ->  Parallel Seq Scan on lineitem  (cost=0.00..718960.94 rows=3139145 width=16)
                                                               Filter: (l_returnflag = 'R'::bpchar)
                                                         ->  Parallel Hash  (cost=170087.48..170087.48 rows=117792 width=8)
                                                               ->  Parallel Bitmap Heap Scan on orders  (cost=3878.11..170087.48 rows=117792 width=8)
                                                                     Recheck Cond: ((o_orderdate >= '1993-06-01'::date) AND (o_orderdate < '1993-09-01'::date))
                                                                     ->  Bitmap Index Scan on o_od  (cost=0.00..3807.43 rows=282700 width=0)
                                                                           Index Cond: ((o_orderdate >= '1993-06-01'::date) AND (o_orderdate < '1993-09-01'::date))
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=108)
 JIT:
   Functions: 41
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(31 rows)

COMMIT;
COMMIT

Query 10 executed in 0.196 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	ps_partkey,
	sum(ps_supplycost * ps_availqty) as value
from
	partsupp,
	supplier,
	nation
where
	ps_suppkey = s_suppkey
	and s_nationkey = n_nationkey
	and n_name = 'JAPAN'
group by
	ps_partkey having
		sum(ps_supplycost * ps_availqty) > (
			select
				sum(ps_supplycost * ps_availqty) *         inf
			from
				partsupp,
				supplier,
				nation
			where
				ps_suppkey = s_suppkey
				and s_nationkey = n_nationkey
				and n_name = 'JAPAN'
		)
order by
	value desc;
ERROR:  column "inf" does not exist
LINE 17:     sum(ps_supplycost * ps_availqty) *         inf
                                                        ^

Query 11 executed in 0.134 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	l_shipmode,
	sum(case
		when o_orderpriority = '1-URGENT'
			or o_orderpriority = '2-HIGH'
			then 1
		else 0
	end) as high_line_count,
	sum(case
		when o_orderpriority <> '1-URGENT'
			and o_orderpriority <> '2-HIGH'
			then 1
		else 0
	end) as low_line_count
from
	orders,
	lineitem
where
	o_orderkey = l_orderkey
	and l_shipmode in ('FOB', 'REG AIR')
	and l_commitdate < l_receiptdate
	and l_shipdate < l_commitdate
	and l_receiptdate >= date '1997-01-01'
	and l_receiptdate < date '1997-01-01' + interval '1 year'
group by
	l_shipmode
order by
	l_shipmode;
                                                                                                                                    QUERY PLAN                                                                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=1087955.49..1089138.41 rows=7 width=27)
   Group Key: lineitem.l_shipmode
   ->  Gather Merge  (cost=1087955.49..1089138.24 rows=14 width=27)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=1086955.47..1088136.60 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Sort  (cost=1086955.47..1087103.10 rows=59053 width=27)
                     Sort Key: lineitem.l_shipmode
                     ->  Parallel Hash Join  (cost=219271.50..1082275.60 rows=59053 width=27)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..843960.09 rows=59053 width=15)
                                 Filter: ((l_shipmode = ANY ('{FOB,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1997-01-01'::date) AND (l_receiptdate < '1998-01-01 00:00:00'::timestamp without time zone))
                           ->  Parallel Hash  (cost=161898.00..161898.00 rows=3125000 width=20)
                                 ->  Parallel Seq Scan on orders  (cost=0.00..161898.00 rows=3125000 width=20)
 JIT:
   Functions: 20
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

COMMIT;
COMMIT

Query 12 executed in 0.184 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	c_count,
	count(*) as custdist
from
	(
		select
			c_custkey,
			count(o_orderkey)
		from
			customer left outer join orders on
				c_custkey = o_custkey
				and o_comment not like '%special%deposits%'
		group by
			c_custkey
	) as c_orders (c_custkey, c_count)
group by
	c_count
order by
	custdist desc,
	c_count desc;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=707323.44..707323.94 rows=200 width=16)
   Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
   ->  HashAggregate  (cost=707313.80..707315.80 rows=200 width=16)
         Group Key: count(orders.o_orderkey)
         ->  Finalize HashAggregate  (cost=673915.36..696063.80 rows=750000 width=12)
               Group Key: customer.c_custkey
               Planned Partitions: 16
               ->  Gather  (cost=396400.76..577821.61 rows=1500000 width=12)
                     Workers Planned: 2
                     ->  Partial HashAggregate  (cost=395400.76..426821.61 rows=750000 width=12)
                           Group Key: customer.c_custkey
                           Planned Partitions: 16
                           ->  Parallel Hash Right Join  (cost=20279.68..223170.63 rows=3061869 width=8)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Parallel Seq Scan on orders  (cost=0.00..169710.50 rows=3061869 width=8)
                                       Filter: ((o_comment)::text !~~ '%special%deposits%'::text)
                                 ->  Parallel Hash  (cost=15152.43..15152.43 rows=312500 width=4)
                                       ->  Parallel Index Only Scan using customer_pkey on customer  (cost=0.42..15152.43 rows=312500 width=4)
 JIT:
   Functions: 16
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(21 rows)

COMMIT;
COMMIT

Query 13 executed in 0.183 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	100.00 * sum(case
		when p_type like 'PROMO%'
			then l_extendedprice * (1 - l_discount)
		else 0
	end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue
from
	lineitem,
	part
where
	l_partkey = p_partkey
	and l_shipdate >= date '1997-02-01'
	and l_shipdate < cast(date '1997-02-01' + interval '1 month' as date);
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=721613.90..721613.91 rows=1 width=32)
   ->  Gather  (cost=721613.66..721613.87 rows=2 width=64)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=720613.66..720613.67 rows=1 width=64)
               ->  Parallel Hash Join  (cost=684488.39..718099.10 rows=143689 width=33)
                     Hash Cond: (part.p_partkey = lineitem.l_partkey)
                     ->  Parallel Seq Scan on part  (cost=0.00..24678.67 rows=416667 width=25)
                     ->  Parallel Hash  (cost=682692.28..682692.28 rows=143689 width=16)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=4711.18..682692.28 rows=143689 width=16)
                                 Recheck Cond: ((l_shipdate >= '1997-02-01'::date) AND (l_shipdate < '1997-03-01'::date))
                                 ->  Bitmap Index Scan on l_sd  (cost=0.00..4624.97 rows=344853 width=0)
                                       Index Cond: ((l_shipdate >= '1997-02-01'::date) AND (l_shipdate < '1997-03-01'::date))
 JIT:
   Functions: 17
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(15 rows)

COMMIT;
COMMIT

Query 14 executed in 0.174 second(s).
BEGIN;
BEGIN
create or replace view revenue0 (supplier_no, total_revenue) as
	select
		l_suppkey,
		sum(l_extendedprice * (1 - l_discount))
	from
		lineitem
	where
		l_shipdate >= '1997-01-01'
		and l_shipdate < date'1997-01-01' + interval '90 days'
	group by
		l_suppkey;
CREATE VIEW
EXPLAIN
select
	s_suppkey,
	s_name,
	s_address,
	s_phone,
	total_revenue
from
	supplier,
	revenue0
where
	s_suppkey = supplier_no
	and total_revenue = (
		select
			max(total_revenue)
		from
			revenue0
	)
order by
	s_suppkey;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=1600372.56..1614845.51 rows=246 width=103)
   InitPlan 1
     ->  Aggregate  (cost=806924.20..806924.21 rows=1 width=32)
           ->  Finalize GroupAggregate  (cost=793448.06..806307.95 rows=49300 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather Merge  (cost=793448.06..804952.20 rows=98600 width=36)
                       Workers Planned: 2
                       ->  Sort  (cost=792448.04..792571.29 rows=49300 width=36)
                             Sort Key: lineitem_1.l_suppkey
                             ->  Partial HashAggregate  (cost=783308.86..788605.28 rows=49300 width=36)
                                   Group Key: lineitem_1.l_suppkey
                                   Planned Partitions: 4
                                   ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..750210.72 rows=479249 width=16)
                                         Filter: ((l_shipdate >= '1997-01-01'::date) AND (l_shipdate < '1997-04-01 00:00:00'::timestamp without time zone))
   ->  Finalize GroupAggregate  (cost=793448.06..806431.20 rows=246 width=36)
         Group Key: lineitem.l_suppkey
         Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
         ->  Gather Merge  (cost=793448.06..804952.20 rows=98600 width=36)
               Workers Planned: 2
               ->  Sort  (cost=792448.04..792571.29 rows=49300 width=36)
                     Sort Key: lineitem.l_suppkey
                     ->  Partial HashAggregate  (cost=783308.86..788605.28 rows=49300 width=36)
                           Group Key: lineitem.l_suppkey
                           Planned Partitions: 4
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..750210.72 rows=479249 width=16)
                                 Filter: ((l_shipdate >= '1997-01-01'::date) AND (l_shipdate < '1997-04-01 00:00:00'::timestamp without time zone))
   ->  Index Scan using supplier_pkey on supplier  (cost=0.29..6.05 rows=1 width=71)
         Index Cond: (s_suppkey = lineitem.l_suppkey)
 JIT:
   Functions: 25
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(31 rows)

drop view revenue0;
DROP VIEW
COMMIT;
COMMIT

Query 15 executed in 0.199 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	p_brand,
	p_type,
	p_size,
	count(distinct ps_suppkey) as supplier_cnt
from
	partsupp,
	part
where
	p_partkey = ps_partkey
	and p_brand <> 'Brand#21'
	and p_type not like 'ECONOMY ANODIZED%'
	and p_size in (4, 26, 1, 22, 44, 31, 23, 17)
	and ps_suppkey not in (
		select
			s_suppkey
		from
			supplier
		where
			s_comment like '%Customer%Complaints%'
	)
group by
	p_brand,
	p_type,
	p_size
order by
	supplier_cnt desc,
	p_brand,
	p_type,
	p_size;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=173867.59..174064.56 rows=78790 width=44)
   Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
   ->  GroupAggregate  (cost=127913.75..165034.21 rows=78790 width=44)
         Group Key: part.p_brand, part.p_type, part.p_size
         ->  Gather Merge  (cost=127913.75..161373.41 rows=287290 width=40)
               Workers Planned: 2
               ->  Sort  (cost=126913.73..127212.99 rows=119704 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Parallel Hash Join  (cost=26310.82..113541.23 rows=119704 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=1737.44..86780.34 rows=833333 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..1737.00 rows=5 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Parallel Hash  (cost=23825.23..23825.23 rows=59852 width=40)
                                 ->  Parallel Bitmap Heap Scan on part  (cost=1702.81..23825.23 rows=59852 width=40)
                                       Recheck Cond: (p_size = ANY ('{4,26,1,22,44,31,23,17}'::integer[]))
                                       Filter: ((p_brand <> 'Brand#21'::bpchar) AND ((p_type)::text !~~ 'ECONOMY ANODIZED%'::text))
                                       ->  Bitmap Index Scan on p_s  (cost=0.00..1666.90 rows=154600 width=0)
                                             Index Cond: (p_size = ANY ('{4,26,1,22,44,31,23,17}'::integer[]))
 JIT:
   Functions: 25
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(24 rows)

COMMIT;
COMMIT

Query 16 executed in 0.189 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice) / 7.0 as avg_yearly
from
	lineitem,
	part
where
	p_partkey = l_partkey
	and p_brand = 'Brand#11'
	and p_container = 'SM PKG'
	and l_quantity < (
		select
			0.2 * avg(l_quantity)
		from
			lineitem
		where
			l_partkey = p_partkey
	);
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=10322775.68..10322775.69 rows=1 width=32)
   ->  Hash Join  (cost=4194.24..10322749.27 rows=10560 width=8)
         Hash Cond: (lineitem.l_partkey = part.p_partkey)
         Join Filter: (lineitem.l_quantity < (SubPlan 1))
         ->  Seq Scan on lineitem  (cost=0.00..862709.96 rows=29999796 width=17)
         ->  Hash  (cost=4181.04..4181.04 rows=1056 width=4)
               ->  Bitmap Heap Scan on part  (cost=737.62..4181.04 rows=1056 width=4)
                     Recheck Cond: ((p_container = 'SM PKG'::bpchar) AND (p_brand = 'Brand#11'::bpchar))
                     ->  BitmapAnd  (cost=737.62..737.62 rows=1056 width=0)
                           ->  Bitmap Index Scan on idx_part_p_container  (cost=0.00..286.92 rows=25933 width=0)
                                 Index Cond: (p_container = 'SM PKG'::bpchar)
                           ->  Bitmap Index Scan on idx_part_p_brand  (cost=0.00..449.92 rows=40733 width=0)
                                 Index Cond: (p_brand = 'Brand#11'::bpchar)
         SubPlan 1
           ->  Aggregate  (cost=937709.53..937709.55 rows=1 width=32)
                 ->  Seq Scan on lineitem lineitem_1  (cost=0.00..937709.45 rows=33 width=5)
                       Filter: (l_partkey = part.p_partkey)
 JIT:
   Functions: 24
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(20 rows)

COMMIT;
COMMIT

Query 17 executed in 0.184 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice,
	sum(l_quantity)
from
	customer,
	orders,
	lineitem
where
	o_orderkey in (
		select
			l_orderkey
		from
			lineitem
		group by
			l_orderkey having
				sum(l_quantity) > 312
	)
	and c_custkey = o_custkey
	and o_orderkey = l_orderkey
group by
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice
order by
	o_totalprice desc,
	o_orderdate
LIMIT 100;
                                                                                 QUERY PLAN                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3403664.69..3403664.94 rows=100 width=71)
   ->  Sort  (cost=3403664.69..3405052.36 rows=555068 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=3297269.42..3382450.39 rows=555068 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Incremental Sort  (cost=3297269.42..3371349.03 rows=555068 width=44)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     Presorted Key: customer.c_custkey
                     ->  Merge Join  (cost=3297269.32..3346370.97 rows=555068 width=44)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Scan using customer_pkey on customer  (cost=0.42..37514.08 rows=750000 width=23)
                           ->  Materialize  (cost=3297268.62..3300043.96 rows=555068 width=25)
                                 ->  Sort  (cost=3297268.62..3298656.29 rows=555068 width=25)
                                       Sort Key: orders.o_custkey
                                       ->  Hash Join  (cost=2121714.18..3231026.23 rows=555068 width=25)
                                             Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                             ->  Hash Join  (cost=1778370.18..2719830.40 rows=9999932 width=13)
                                                   Hash Cond: (lineitem.l_orderkey = lineitem_1.l_orderkey)
                                                   ->  Seq Scan on lineitem  (cost=0.00..862709.96 rows=29999796 width=9)
                                                   ->  Hash  (cost=1776635.58..1776635.58 rows=138768 width=4)
                                                         ->  Finalize GroupAggregate  (cost=1667002.07..1776635.58 rows=138768 width=4)
                                                               Group Key: lineitem_1.l_orderkey
                                                               Filter: (sum(lineitem_1.l_quantity) > '312'::numeric)
                                                               ->  Gather Merge  (cost=1667002.07..1764146.46 rows=832608 width=36)
                                                                     Workers Planned: 2
                                                                     ->  Sort  (cost=1666002.05..1667042.81 rows=416304 width=36)
                                                                           Sort Key: lineitem_1.l_orderkey
                                                                           ->  Partial HashAggregate  (cost=1488486.95..1615760.24 rows=416304 width=36)
                                                                                 Group Key: lineitem_1.l_orderkey
                                                                                 Planned Partitions: 16
                                                                                 ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..687711.15 rows=12499915 width=9)
                                             ->  Hash  (cost=205648.00..205648.00 rows=7500000 width=20)
                                                   ->  Seq Scan on orders  (cost=0.00..205648.00 rows=7500000 width=20)
 JIT:
   Functions: 38
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(36 rows)

COMMIT;
COMMIT

Query 18 executed in 0.193 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice* (1 - l_discount)) as revenue
from
	lineitem,
	part
where
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#15'
		and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')
		and l_quantity >= 9 and l_quantity <= 9+10
		and p_size between 1 and 5
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#45'
		and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')
		and l_quantity >= 13 and l_quantity <= 13+10
		and p_size between 1 and 10
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#43'
		and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')
		and l_quantity >= 29 and l_quantity <= 29+10
		and p_size between 1 and 15
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	);


 Finalize Aggregate  (cost=959020.10..959020.11 rows=1 width=32)
   ->  Gather  (cost=959019.88..959020.09 rows=2 width=32)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=958019.88..958019.89 rows=1 width=32)
               ->  Parallel Hash Join  (cost=19682.24..958018.06 rows=242 width=12)
                     Hash Cond: (lineitem.l_partkey = part.p_partkey)
                     Join Filter: (((part.p_brand = 'Brand#15'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (lineitem.l_quantity >= '9'::numeric) AND (lineitem.l_quantity <= '19'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#45'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (lineitem.l_quantity >= '13'::numeric) AND (lineitem.l_quantity <= '23'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (lineitem.l_quantity >= '29'::numeric) AND (lineitem.l_quantity <= '39'::numeric) AND (part.p_size <= 15)))
                     ->  Parallel Seq Scan on lineitem  (cost=0.00..937709.45 rows=238615 width=21)
                           Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '9'::numeric) AND (l_quantity <= '19'::numeric)) OR ((l_quantity >= '13'::numeric) AND (l_quantity <= '23'::numeric)) OR ((l_quantity >= '29'::numeric) AND (l_quantity <= '39'::numeric))))
                     ->  Parallel Hash  (cost=19664.39..19664.39 rows=1428 width=30)
                           ->  Parallel Bitmap Heap Scan on part  (cost=12726.63..19664.39 rows=1428 width=30)
                                 Recheck Cond: (((p_brand = 'Brand#15'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5) AND (p_size >= 1)) OR ((p_brand = 'Brand#45'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10) AND (p_size >= 1)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15) AND (p_size >= 1)))
                                 ->  BitmapOr  (cost=12726.63..12726.63 rows=2430 width=0)
                                       ->  BitmapAnd  (cost=2878.46..2878.46 rows=398 width=0)
                                             ->  Bitmap Index Scan on idx_part_p_brand  (cost=0.00..436.17 rows=39433 width=0)
                                                   Index Cond: (p_brand = 'Brand#15'::bpchar)
                                             ->  Bitmap Index Scan on idx_part_p_container  (cost=0.00..1094.21 rows=100867 width=0)
                                                   Index Cond: (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[]))
                                             ->  Bitmap Index Scan on p_s  (cost=0.00..1345.75 rows=100133 width=0)
                                                   Index Cond: ((p_size <= 5) AND (p_size >= 1))
                                       ->  BitmapAnd  (cost=4234.29..4234.29 rows=801 width=0)
                                             ->  Bitmap Index Scan on idx_part_p_brand  (cost=0.00..449.43 rows=40667 width=0)
                                                   Index Cond: (p_brand = 'Brand#45'::bpchar)
                                             ->  Bitmap Index Scan on idx_part_p_container  (cost=0.00..1052.45 rows=96900 width=0)
                                                   Index Cond: (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[]))
                                             ->  Bitmap Index Scan on p_s  (cost=0.00..2730.10 rows=203367 width=0)
                                                   Index Cond: ((p_size <= 10) AND (p_size >= 1))
                                       ->  BitmapAnd  (cost=5613.38..5613.38 rows=1230 width=0)
                                             ->  Bitmap Index Scan on idx_part_p_brand  (cost=0.00..452.92 rows=41133 width=0)
                                                   Index Cond: (p_brand = 'Brand#43'::bpchar)
                                             ->  Bitmap Index Scan on idx_part_p_container  (cost=0.00..1074.71 rows=98267 width=0)
                                                   Index Cond: (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[]))
                                             ->  Bitmap Index Scan on p_s  (cost=0.00..4083.43 rows=304300 width=0)
                                                   Index Cond: ((p_size <= 15) AND (p_size >= 1))
 JIT:
   Functions: 21
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(37 rows)

COMMIT;
COMMIT

Query 19 executed in 0.194 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	s_name,
	s_address
from
	supplier,
	nation
where
	s_suppkey in (
		select
			ps_suppkey
		from
			partsupp
		where
			ps_partkey in (
				select
					p_partkey
				from
					part
				where
					p_name like 'steel%'
			)
			and ps_availqty > (
				select
					0.5 * sum(l_quantity)
				from
					lineitem
				where
					l_partkey = ps_partkey
					and l_suppkey = ps_suppkey
					and l_shipdate >= '1996-01-01'
					and l_shipdate < cast(date '1996-01-01' + interval '1 year' as date)
			)
	)
	and s_nationkey = n_nationkey
	and n_name = 'UNITED STATES'
order by
	s_name;
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Semi Join  (cost=0.84..117445737933.12 rows=538 width=51)
   Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
   ->  Nested Loop  (cost=0.41..3845.12 rows=2000 width=55)
         Join Filter: (nation.n_nationkey = supplier.s_nationkey)
         ->  Index Scan using idx_supplier_s_name on supplier  (cost=0.41..3093.80 rows=50000 width=59)
         ->  Materialize  (cost=0.00..1.32 rows=1 width=4)
               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                     Filter: (n_name = 'UNITED STATES'::bpchar)
   ->  Materialize  (cost=0.43..117445330081.68 rows=13468 width=4)
         ->  Nested Loop  (cost=0.43..117445330014.34 rows=13468 width=4)
               ->  Seq Scan on part  (cost=0.00..33012.00 rows=10101 width=4)
                     Filter: ((p_name)::text ~~ 'steel%'::text)
               ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..11627096.00 rows=3 width=8)
                     Index Cond: (ps_partkey = part.p_partkey)
                     Filter: ((ps_availqty)::numeric > (SubPlan 1))
                     SubPlan 1
                       ->  Aggregate  (cost=1162707.92..1162707.94 rows=1 width=32)
                             ->  Seq Scan on lineitem  (cost=0.00..1162707.92 rows=1 width=5)
                                   Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date) AND (l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(22 rows)

COMMIT;
COMMIT

Query 20 executed in 0.195 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	s_name,
	count(*) as numwait
from
	supplier,
	lineitem l1,
	orders,
	nation
where
	s_suppkey = l1.l_suppkey
	and o_orderkey = l1.l_orderkey
	and o_orderstatus = 'F'
	and l1.l_receiptdate > l1.l_commitdate
	and exists (
		select
			*
		from
			lineitem l2
		where
			l2.l_orderkey = l1.l_orderkey
			and l2.l_suppkey <> l1.l_suppkey
	)
	and not exists (
		select
			*
		from
			lineitem l3
		where
			l3.l_orderkey = l1.l_orderkey
			and l3.l_suppkey <> l1.l_suppkey
			and l3.l_receiptdate > l3.l_commitdate
	)
	and s_nationkey = n_nationkey
	and n_name = 'CHINA'
group by
	s_name
order by
	numwait desc,
	s_name
LIMIT 100;
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1496027.29..1496027.30 rows=1 width=34)
   ->  Sort  (cost=1496027.29..1496027.30 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1496027.26..1496027.28 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1496027.26..1496027.27 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Gather  (cost=1268889.43..1496027.25 rows=1 width=26)
                           Workers Planned: 2
                           ->  Nested Loop Anti Join  (cost=1267889.43..1495027.15 rows=1 width=26)
                                 ->  Parallel Hash Join  (cost=1267888.99..1456955.02 rows=4535 width=34)
                                       Hash Cond: (orders.o_orderkey = l1.l_orderkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..169710.50 rows=1531771 width=4)
                                             Filter: (o_orderstatus = 'F'::bpchar)
                                       ->  Parallel Hash  (cost=1264502.68..1264502.68 rows=166665 width=38)
                                             ->  Nested Loop Semi Join  (cost=1512.87..1264502.68 rows=166665 width=38)
                                                   ->  Parallel Hash Join  (cost=1512.43..737078.25 rows=166665 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Seq Scan on lineitem l1  (cost=0.00..718960.94 rows=4166638 width=8)
                                                               Filter: (l_receiptdate > l_commitdate)
                                                         ->  Parallel Hash  (cost=1497.73..1497.73 rows=1176 width=30)
                                                               ->  Hash Join  (cost=1.32..1497.73 rows=1176 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..1406.12 rows=29412 width=34)
                                                                     ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                                 Filter: (n_name = 'CHINA'::bpchar)
                                                   ->  Index Scan using lineitem_pkey on lineitem l2  (cost=0.44..99.32 rows=72 width=8)
                                                         Index Cond: (l_orderkey = l1.l_orderkey)
                                                         Filter: (l_suppkey <> l1.l_suppkey)
                                 ->  Index Scan using lineitem_pkey on lineitem l3  (cost=0.44..99.50 rows=24 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
 JIT:
   Functions: 49
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(36 rows)

COMMIT;
COMMIT

Query 21 executed in 0.195 second(s).
BEGIN;
BEGIN
EXPLAIN
select
	cntrycode,
	count(*) as numcust,
	sum(c_acctbal) as totacctbal
from
	(
		select
			substring(c_phone from 1 for 2) as cntrycode,
			c_acctbal
		from
			customer
		where
			substring(c_phone from 1 for 2) in
				('24', '28', '18', '22', '13', '25', '27')
			and c_acctbal > (
				select
					avg(c_acctbal)
				from
					customer
				where
					c_acctbal > 0.00
					and substring(c_phone from 1 for 2) in
						('24', '28', '18', '22', '13', '25', '27')
			)
			and not exists (
				select
					*
				from
					orders
				where
					o_custkey = c_custkey
			)
	) as vip
group by
	cntrycode
order by
	cntrycode;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=243768.74..244266.57 rows=3730 width=72)
   Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
   InitPlan 1
     ->  Finalize Aggregate  (cost=27228.23..27228.24 rows=1 width=32)
           ->  Gather  (cost=27228.01..27228.22 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=26228.01..26228.02 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..26203.12 rows=9953 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{24,28,18,22,13,25,27}'::text[])))
   ->  Gather Merge  (cost=216540.50..216941.98 rows=3108 width=72)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=215540.48..215583.21 rows=1554 width=72)
               Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Sort  (cost=215540.48..215544.36 rows=1554 width=38)
                     Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                     ->  Parallel Hash Right Anti Join  (cost=25405.56..215458.10 rows=1554 width=38)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Parallel Seq Scan on orders  (cost=0.00..161898.00 rows=3125000 width=4)
                           ->  Parallel Hash  (cost=25359.99..25359.99 rows=3646 width=26)
                                 ->  Parallel Bitmap Heap Scan on customer  (cost=4625.61..25359.99 rows=3646 width=26)
                                       Recheck Cond: (c_acctbal > (InitPlan 1).col1)
                                       Filter: (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{24,28,18,22,13,25,27}'::text[]))
                                       ->  Bitmap Index Scan on c_acb  (cost=0.00..4623.43 rows=250000 width=0)
                                             Index Cond: (c_acctbal > (InitPlan 1).col1)
 JIT:
   Functions: 29
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(27 rows)

COMMIT;
COMMIT

Query 22 executed in 0.187 second(s).

