=== Experiment: dates ===
INDEX_ALL=0
INDEX_NUMBERS=0
INDEX_DATES=1
INDEX_TEXT=0
INDEX_DEFAULT=0

[Info] Running drop_indexes.sh
[Info] Keeping date indexes
[Info] Dropping numbers indexes
[Info] Dropping text indexes
[Info] Running create_indexes.sh
[Info] Creating indexes for dates

[Info] Running queries(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22) for dates
BEGIN;
BEGIN
EXPLAIN
select
	l_returnflag,
	l_linestatus,
	sum(l_quantity) as sum_qty,
	sum(l_extendedprice) as sum_base_price,
	sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
	avg(l_quantity) as avg_qty,
	avg(l_extendedprice) as avg_price,
	avg(l_discount) as avg_disc,
	count(*) as count_order
from
	lineitem
where
	l_shipdate <= date '1998-12-01' - interval '88 days'
group by
	l_returnflag,
	l_linestatus
order by
	l_returnflag,
	l_linestatus;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=1151129.29..1151131.24 rows=6 width=236)
   Group Key: l_returnflag, l_linestatus
   ->  Gather Merge  (cost=1151129.29..1151130.69 rows=12 width=236)
         Workers Planned: 2
         ->  Sort  (cost=1150129.27..1150129.28 rows=6 width=236)
               Sort Key: l_returnflag, l_linestatus
               ->  Partial HashAggregate  (cost=1150129.05..1150129.19 rows=6 width=236)
                     Group Key: l_returnflag, l_linestatus
                     ->  Parallel Seq Scan on lineitem  (cost=0.00..718960.94 rows=12319089 width=25)
                           Filter: (l_shipdate <= '1998-09-04 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 9
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(13 rows)

COMMIT;
COMMIT

Query 1 execution times in seconds: 0.188,0.192,0.187,0.186,0.183,0.189,0.176,0.180,0.191,0.187
Average execution time: 0.1859 seconds

BEGIN;
BEGIN
EXPLAIN
select
	s_acctbal,
	s_name,
	n_name,
	p_partkey,
	p_mfgr,
	s_address,
	s_phone,
	s_comment
from
	part,
	supplier,
	partsupp,
	nation,
	region
where
	p_partkey = ps_partkey
	and s_suppkey = ps_suppkey
	and p_size = 23
	and p_type like '%STEEL'
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'ASIA'
	and ps_supplycost = (
		select
			min(ps_supplycost)
		from
			partsupp,
			supplier,
			nation,
			region
		where
			p_partkey = ps_partkey
			and s_suppkey = ps_suppkey
			and s_nationkey = n_nationkey
			and n_regionkey = r_regionkey
			and r_name = 'ASIA'
	)
order by
	s_acctbal desc,
	n_name,
	s_name,
	p_partkey
LIMIT 100;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=502105.14..502105.14 rows=1 width=270)
   ->  Sort  (cost=502105.14..502105.14 rows=1 width=270)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Hash Join  (cost=141768.98..502105.13 rows=1 width=270)
               Hash Cond: ((part.p_partkey = partsupp.ps_partkey) AND ((SubPlan 1) = partsupp.ps_supplycost))
               ->  Gather  (cost=1000.00..28117.80 rows=3558 width=30)
                     Workers Planned: 2
                     ->  Parallel Seq Scan on part  (cost=0.00..26762.00 rows=1482 width=30)
                           Filter: (((p_type)::text ~~ '%STEEL'::text) AND (p_size = 23))
               ->  Hash  (cost=101424.98..101424.98 rows=800000 width=250)
                     ->  Nested Loop  (cost=1.99..101424.98 rows=800000 width=250)
                           ->  Nested Loop  (cost=1.56..2393.12 rows=10000 width=244)
                                 Join Filter: (nation.n_regionkey = region.r_regionkey)
                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                       Filter: (r_name = 'ASIA'::bpchar)
                                 ->  Hash Join  (cost=1.56..1767.06 rows=50000 width=248)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..1612.00 rows=50000 width=144)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=112)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=112)
                           ->  Index Scan using ps_sk on partsupp  (cost=0.43..9.10 rows=80 width=14)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=85.93..85.94 rows=1 width=32)
                       ->  Nested Loop  (cost=0.86..85.93 rows=2 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'ASIA'::bpchar)
                             ->  Nested Loop  (cost=0.86..84.75 rows=9 width=10)
                                   ->  Nested Loop  (cost=0.72..83.36 rows=9 width=10)
                                         ->  Index Scan using ps_pk on partsupp partsupp_1  (cost=0.43..8.59 rows=9 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using s_sk on supplier supplier_1  (cost=0.29..8.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using n_nk on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
 JIT:
   Functions: 53
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(39 rows)

COMMIT;
COMMIT

Query 2 execution times in seconds: 0.191,0.191,0.189,0.192,0.201,0.197,0.182,0.197,0.199,0.197
Average execution time: 0.1936 seconds

BEGIN;
BEGIN
EXPLAIN
select
	l_orderkey,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	o_orderdate,
	o_shippriority
from
	customer,
	orders,
	lineitem
where
	c_mktsegment = 'HOUSEHOLD'
	and c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate < date '1995-03-06'
	and l_shipdate > date '1995-03-06'
group by
	l_orderkey,
	o_orderdate,
	o_shippriority
order by
	revenue desc,
	o_orderdate
LIMIT 10;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1334140.23..1334140.25 rows=10 width=44)
   ->  Sort  (cost=1334140.23..1338063.55 rows=1569329 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=1093697.62..1300227.59 rows=1569329 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1093697.62..1264263.80 rows=1307774 width=44)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=1092697.60..1112314.21 rows=653887 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=1092697.60..1094332.32 rows=653887 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Parallel Hash Join  (cost=201637.89..1016124.43 rows=653887 width=24)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..718960.94 rows=6756818 width=16)
                                             Filter: (l_shipdate > '1995-03-06'::date)
                                       ->  Parallel Hash  (cost=196380.64..196380.64 rows=302420 width=12)
                                             ->  Parallel Hash Join  (cost=22684.25..196380.64 rows=302420 width=12)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..169710.50 rows=1518426 width=16)
                                                         Filter: (o_orderdate < '1995-03-06'::date)
                                                   ->  Parallel Hash  (cost=21906.25..21906.25 rows=62240 width=4)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..21906.25 rows=62240 width=4)
                                                               Filter: (c_mktsegment = 'HOUSEHOLD'::bpchar)
 JIT:
   Functions: 33
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(26 rows)

COMMIT;
COMMIT

Query 3 execution times in seconds: 0.178,0.189,0.186,0.166,0.190,0.185,0.187,0.175,0.175,0.195
Average execution time: 0.1826 seconds

BEGIN;
BEGIN
EXPLAIN
select
	o_orderpriority,
	count(*) as order_count
from
	orders
where
	o_orderdate >= date '1994-03-01'
	and o_orderdate < cast(date '1994-03-01' + interval '3 month' as date)
	and exists (
		select
			*
		from
			lineitem
		where
			l_orderkey = o_orderkey
			and l_commitdate < l_receiptdate
	)
group by
	o_orderpriority
order by
	o_orderpriority;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=266809.35..266860.23 rows=5 width=24)
   Group Key: orders.o_orderpriority
   ->  Gather Merge  (cost=266809.35..266860.13 rows=10 width=24)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=265809.33..265858.95 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Sort  (cost=265809.33..265825.85 rows=6609 width=16)
                     Sort Key: orders.o_orderpriority
                     ->  Nested Loop Semi Join  (cost=3941.06..265389.98 rows=6609 width=16)
                           ->  Parallel Bitmap Heap Scan on orders  (cost=3940.62..170157.10 rows=119682 width=20)
                                 Recheck Cond: ((o_orderdate >= '1994-03-01'::date) AND (o_orderdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on o_od  (cost=0.00..3868.81 rows=287238 width=0)
                                       Index Cond: ((o_orderdate >= '1994-03-01'::date) AND (o_orderdate < '1994-06-01'::date))
                           ->  Index Scan using l_ok on lineitem  (cost=0.44..8.60 rows=24 width=4)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Filter: (l_commitdate < l_receiptdate)
 JIT:
   Functions: 15
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(19 rows)

COMMIT;
COMMIT

Query 4 execution times in seconds: 0.188,0.183,0.188,0.183,0.178,0.186,0.181,0.177,0.187,0.181
Average execution time: 0.1832 seconds

BEGIN;
BEGIN
EXPLAIN
select
	n_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue
from
	customer,
	orders,
	lineitem,
	supplier,
	nation,
	region
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and l_suppkey = s_suppkey
	and c_nationkey = s_nationkey
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'ASIA'
	and o_orderdate >= date '1996-01-01'
	and o_orderdate < date '1996-01-01' + interval '1 year'
group by
	n_name
order by
	revenue desc;
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=850909.20..850909.27 rows=25 width=136)
   Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
   ->  Finalize GroupAggregate  (cost=850718.79..850908.62 rows=25 width=136)
         Group Key: nation.n_name
         ->  Gather Merge  (cost=850718.79..850907.94 rows=50 width=136)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=849718.77..849902.14 rows=25 width=136)
                     Group Key: nation.n_name
                     ->  Sort  (cost=849718.77..849755.38 rows=14645 width=116)
                           Sort Key: nation.n_name
                           ->  Parallel Hash Join  (cost=26652.32..848705.47 rows=14645 width=116)
                                 Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                 ->  Nested Loop  (cost=24805.03..844935.96 rows=366136 width=128)
                                       ->  Parallel Hash Join  (cost=24804.59..209100.25 rows=91535 width=116)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..177523.00 rows=457673 width=8)
                                                   Filter: ((o_orderdate >= '1996-01-01'::date) AND (o_orderdate < '1997-01-01 00:00:00'::timestamp without time zone))
                                             ->  Parallel Hash  (cost=22924.34..22924.34 rows=62500 width=116)
                                                   ->  Hash Join  (cost=2.46..22924.34 rows=62500 width=116)
                                                         Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..21125.00 rows=312500 width=8)
                                                         ->  Hash  (cost=2.40..2.40 rows=5 width=108)
                                                               ->  Hash Join  (cost=1.07..2.40 rows=5 width=108)
                                                                     Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=112)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'ASIA'::bpchar)
                                       ->  Index Scan using l_ok on lineitem  (cost=0.44..6.23 rows=72 width=20)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                 ->  Parallel Hash  (cost=1406.12..1406.12 rows=29412 width=8)
                                       ->  Parallel Seq Scan on supplier  (cost=0.00..1406.12 rows=29412 width=8)
 JIT:
   Functions: 52
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(35 rows)

COMMIT;
COMMIT

Query 5 execution times in seconds: 0.201,0.197,0.188,0.199,0.203,0.200,0.189,0.183,0.195,0.199
Average execution time: 0.1954 seconds

BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice * l_discount) as revenue
from
	lineitem
where
	l_shipdate >= date '1996-01-01'
	and l_shipdate < cast(date '1996-01-01' + interval '1 year' as date)
	and l_discount between 0.08 - 0.01 and 0.08 + 0.01
	and l_quantity < 25;
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=846227.92..846227.93 rows=1 width=32)
   ->  Gather  (cost=846227.70..846227.91 rows=2 width=32)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=845227.70..845227.71 rows=1 width=32)
               ->  Parallel Seq Scan on lineitem  (cost=0.00..843960.09 rows=253522 width=12)
                     Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date) AND (l_discount >= 0.07) AND (l_discount <= 0.09) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 7
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(9 rows)

COMMIT;
COMMIT

Query 6 execution times in seconds: 0.175,0.184,0.185,0.182,0.181,0.189,0.183,0.188,0.183,0.187
Average execution time: 0.1837 seconds

BEGIN;
BEGIN
EXPLAIN
select
	supp_nation,
	cust_nation,
	l_year,
	sum(volume) as revenue
from
	(
		select
			n1.n_name as supp_nation,
			n2.n_name as cust_nation,
			extract(year from l_shipdate) as l_year,
			l_extendedprice * (1 - l_discount) as volume
		from
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2
		where
			s_suppkey = l_suppkey
			and o_orderkey = l_orderkey
			and c_custkey = o_custkey
			and s_nationkey = n1.n_nationkey
			and c_nationkey = n2.n_nationkey
			and (
				(n1.n_name = 'CANADA' and n2.n_name = 'ALGERIA')
				or (n1.n_name = 'ALGERIA' and n2.n_name = 'CANADA')
			)
			and l_shipdate between date '1995-01-01' and date '1996-12-31'
	) as shipping
group by
	supp_nation,
	cust_nation,
	l_year
order by
	supp_nation,
	cust_nation,
	l_year;
                                                                                      QUERY PLAN                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=990434.84..993522.45 rows=10036 width=272)
   Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
   ->  Gather Merge  (cost=990434.84..993121.01 rows=20072 width=272)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=989434.82..989804.18 rows=10036 width=272)
               Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Sort  (cost=989434.82..989466.08 rows=12504 width=252)
                     Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                     ->  Parallel Hash Join  (cost=205859.91..988583.92 rows=12504 width=252)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           Join Filter: (((n1.n_name = 'CANADA'::bpchar) AND (n2.n_name = 'ALGERIA'::bpchar)) OR ((n1.n_name = 'ALGERIA'::bpchar) AND (n2.n_name = 'CANADA'::bpchar)))
                           ->  Parallel Hash Join  (cost=1527.22..767589.89 rows=300468 width=124)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..750210.72 rows=3755851 width=24)
                                       Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Parallel Hash  (cost=1497.81..1497.81 rows=2353 width=108)
                                       ->  Hash Join  (cost=1.40..1497.81 rows=2353 width=108)
                                             Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..1406.12 rows=29412 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=108)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=108)
                                                         Filter: ((n_name = 'CANADA'::bpchar) OR (n_name = 'ALGERIA'::bpchar))
                           ->  Parallel Hash  (cost=197056.70..197056.70 rows=250000 width=108)
                                 ->  Parallel Hash Join  (cost=22398.28..197056.70 rows=250000 width=108)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..161898.00 rows=3125000 width=8)
                                       ->  Parallel Hash  (cost=22085.78..22085.78 rows=25000 width=108)
                                             ->  Hash Join  (cost=1.40..22085.78 rows=25000 width=108)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..21125.00 rows=312500 width=8)
                                                   ->  Hash  (cost=1.38..1.38 rows=2 width=108)
                                                         ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=108)
                                                               Filter: ((n_name = 'ALGERIA'::bpchar) OR (n_name = 'CANADA'::bpchar))
 JIT:
   Functions: 62
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(36 rows)

COMMIT;
COMMIT

Query 7 execution times in seconds: 0.198,0.192,0.197,0.200,0.192,0.188,0.197,0.204,0.204,0.201
Average execution time: 0.1973 seconds

BEGIN;
BEGIN
EXPLAIN
select
	o_year,
	sum(case
		when nation = 'INDONESIA' then volume
		else 0
	end) / sum(volume) as mkt_share
from
	(
		select
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) as volume,
			n2.n_name as nation
		from
			part,
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2,
			region
		where
			p_partkey = l_partkey
			and s_suppkey = l_suppkey
			and l_orderkey = o_orderkey
			and o_custkey = c_custkey
			and c_nationkey = n1.n_nationkey
			and n1.n_regionkey = r_regionkey
			and r_name = 'ASIA'
			and s_nationkey = n2.n_nationkey
			and o_orderdate between date '1995-01-01' and date '1996-12-31'
			and p_type = 'LARGE BRUSHED BRASS'
	) as all_nations
group by
	o_year
order by
	o_year;
                                                                        QUERY PLAN                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=530262.39..530809.43 rows=2406 width=64)
   Group Key: (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=530262.39..530731.23 rows=2406 width=96)
         Workers Planned: 1
         ->  Partial GroupAggregate  (cost=529262.38..529460.55 rows=2406 width=96)
               Group Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=529262.38..529279.72 rows=6936 width=148)
                     Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                     ->  Hash Join  (cost=527235.93..528819.87 rows=6936 width=148)
                           Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                           ->  Parallel Hash Join  (cost=527234.36..528779.68 rows=6936 width=20)
                                 Hash Cond: (supplier.s_suppkey = lineitem.l_suppkey)
                                 ->  Parallel Seq Scan on supplier  (cost=0.00..1406.12 rows=29412 width=8)
                                 ->  Parallel Hash  (cost=527172.95..527172.95 rows=4913 width=20)
                                       ->  Hash Join  (cost=504632.48..527172.95 rows=4913 width=20)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Parallel Hash Join  (cost=504630.02..527029.24 rows=24564 width=24)
                                                   Hash Cond: (customer.c_custkey = orders.o_custkey)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..21125.00 rows=312500 width=8)
                                                   ->  Parallel Hash  (cost=504322.97..504322.97 rows=24564 width=24)
                                                         ->  Parallel Hash Join  (cost=323231.66..504322.97 rows=24564 width=24)
                                                               Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                               ->  Parallel Seq Scan on orders  (cost=0.00..177523.00 rows=924256 width=12)
                                                                     Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                               ->  Parallel Hash  (cost=322193.48..322193.48 rows=83054 width=20)
                                                                     ->  Nested Loop  (cost=0.44..322193.48 rows=83054 width=20)
                                                                           ->  Parallel Seq Scan on part  (cost=0.00..25720.33 rows=2778 width=4)
                                                                                 Filter: ((p_type)::text = 'LARGE BRUSHED BRASS'::text)
                                                                           ->  Index Scan using l_pk on lineitem  (cost=0.44..106.42 rows=30 width=24)
                                                                                 Index Cond: (l_partkey = part.p_partkey)
                                             ->  Hash  (cost=2.40..2.40 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.40 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'ASIA'::bpchar)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                 ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=108)
 JIT:
   Functions: 68
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(42 rows)

COMMIT;
COMMIT

Query 8 execution times in seconds: 0.202,0.203,0.202,0.202,0.200,0.201,0.201,0.199,0.198,0.199
Average execution time: 0.2007 seconds

BEGIN;
BEGIN
EXPLAIN
select
	nation,
	o_year,
	sum(amount) as sum_profit
from
	(
		select
			n_name as nation,
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount
		from
			part,
			supplier,
			lineitem,
			partsupp,
			orders,
			nation
		where
			s_suppkey = l_suppkey
			and ps_suppkey = l_suppkey
			and ps_partkey = l_partkey
			and p_partkey = l_partkey
			and o_orderkey = l_orderkey
			and s_nationkey = n_nationkey
			and p_name like '%lavender%'
	) as profit
group by
	nation,
	o_year
order by
	nation,
	o_year desc;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=927330.03..959323.04 rows=60150 width=168)
   Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=927330.03..957217.79 rows=120300 width=168)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=926330.01..942332.16 rows=60150 width=168)
               Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=926330.01..928217.50 rows=754995 width=159)
                     Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                     ->  Hash Join  (cost=519461.31..733913.44 rows=754995 width=159)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Hash Join  (cost=519459.74..729706.55 rows=754995 width=31)
                                 Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Parallel Seq Scan on orders  (cost=0.00..161898.00 rows=3125000 width=8)
                                 ->  Parallel Hash  (cost=504860.31..504860.31 rows=754995 width=31)
                                       ->  Nested Loop  (cost=27810.19..504860.31 rows=754995 width=31)
                                             Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                                             ->  Parallel Hash Join  (cost=27809.75..136684.61 rows=101010 width=26)
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Hash Join  (cost=26035.98..134645.67 rows=101010 width=18)
                                                         Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                                         ->  Parallel Seq Scan on partsupp  (cost=0.00..104234.67 rows=1666667 width=14)
                                                         ->  Parallel Hash  (cost=25720.33..25720.33 rows=25252 width=4)
                                                               ->  Parallel Seq Scan on part  (cost=0.00..25720.33 rows=25252 width=4)
                                                                     Filter: ((p_name)::text ~~ '%lavender%'::text)
                                                   ->  Parallel Hash  (cost=1406.12..1406.12 rows=29412 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..1406.12 rows=29412 width=8)
                                             ->  Index Scan using l_pk_sk on lineitem  (cost=0.44..3.63 rows=1 width=29)
                                                   Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                           ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=108)
 JIT:
   Functions: 51
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

COMMIT;
COMMIT

Query 9 execution times in seconds: 0.208,0.210,0.198,0.208,0.207,0.195,0.207,0.195,0.208,0.208
Average execution time: 0.2044 seconds

BEGIN;
BEGIN
EXPLAIN
select
	c_custkey,
	c_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	c_acctbal,
	n_name,
	c_address,
	c_phone,
	c_comment
from
	customer,
	orders,
	lineitem,
	nation
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate >= date '1993-08-01'
	and o_orderdate < cast(date '1993-08-01' + interval '3 month' as date)
	and l_returnflag = 'R'
	and c_nationkey = n_nationkey
group by
	c_custkey,
	c_name,
	c_acctbal,
	c_phone,
	n_name,
	c_address,
	c_comment
order by
	revenue desc
LIMIT 20;
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=996225.31..996225.36 rows=20 width=279)
   ->  Sort  (cost=996225.31..996943.85 rows=287417 width=279)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=951650.22..988577.25 rows=287417 width=279)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=951650.22..982589.39 rows=239514 width=279)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=950650.19..953943.51 rows=119757 width=279)
                           Group Key: customer.c_custkey, nation.n_name
                           ->  Sort  (cost=950650.19..950949.59 rows=119757 width=259)
                                 Sort Key: customer.c_custkey, nation.n_name
                                 ->  Hash Join  (cost=900303.07..925810.34 rows=119757 width=259)
                                       Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                       ->  Parallel Hash Join  (cost=900301.51..925441.13 rows=119757 width=159)
                                             Hash Cond: (customer.c_custkey = orders.o_custkey)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..21125.00 rows=312500 width=147)
                                             ->  Parallel Hash  (cost=898804.55..898804.55 rows=119757 width=16)
                                                   ->  Parallel Hash Join  (cost=171689.76..898804.55 rows=119757 width=16)
                                                         Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                                         ->  Parallel Seq Scan on lineitem  (cost=0.00..718960.94 rows=3106229 width=16)
                                                               Filter: (l_returnflag = 'R'::bpchar)
                                                         ->  Parallel Hash  (cost=170183.75..170183.75 rows=120481 width=8)
                                                               ->  Parallel Bitmap Heap Scan on orders  (cost=3964.26..170183.75 rows=120481 width=8)
                                                                     Recheck Cond: ((o_orderdate >= '1993-08-01'::date) AND (o_orderdate < '1993-11-01'::date))
                                                                     ->  Bitmap Index Scan on o_od  (cost=0.00..3891.97 rows=289154 width=0)
                                                                           Index Cond: ((o_orderdate >= '1993-08-01'::date) AND (o_orderdate < '1993-11-01'::date))
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=108)
 JIT:
   Functions: 41
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(31 rows)

COMMIT;
COMMIT

Query 10 execution times in seconds: 0.190,0.194,0.185,0.197,0.194,0.195,0.183,0.190,0.182,0.194
Average execution time: 0.1904 seconds

BEGIN;
BEGIN
EXPLAIN
select
	ps_partkey,
	sum(ps_supplycost * ps_availqty) as value
from
	partsupp,
	supplier,
	nation
where
	ps_suppkey = s_suppkey
	and s_nationkey = n_nationkey
	and n_name = 'VIETNAM'
group by
	ps_partkey having
		sum(ps_supplycost * ps_availqty) > (
			select
				sum(ps_supplycost * ps_availqty) *         inf
			from
				partsupp,
				supplier,
				nation
			where
				ps_suppkey = s_suppkey
				and s_nationkey = n_nationkey
				and n_name = 'VIETNAM'
		)
order by
	value desc;
ERROR:  column "inf" does not exist
LINE 17:     sum(ps_supplycost * ps_availqty) *         inf
                                                        ^

Query 11 execution times in seconds: 0.136,0.131,0.132,0.141,0.136,0.139,0.138,0.136,0.123,0.139
Average execution time: 0.1351 seconds

BEGIN;
BEGIN
EXPLAIN
select
	l_shipmode,
	sum(case
		when o_orderpriority = '1-URGENT'
			or o_orderpriority = '2-HIGH'
			then 1
		else 0
	end) as high_line_count,
	sum(case
		when o_orderpriority <> '1-URGENT'
			and o_orderpriority <> '2-HIGH'
			then 1
		else 0
	end) as low_line_count
from
	orders,
	lineitem
where
	o_orderkey = l_orderkey
	and l_shipmode in ('RAIL', 'REG AIR')
	and l_commitdate < l_receiptdate
	and l_shipdate < l_commitdate
	and l_receiptdate >= date '1994-01-01'
	and l_receiptdate < date '1994-01-01' + interval '1 year'
group by
	l_shipmode
order by
	l_shipmode;
                                                                                                                                    QUERY PLAN                                                                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=1088236.18..1089475.72 rows=7 width=27)
   Group Key: lineitem.l_shipmode
   ->  Gather Merge  (cost=1088236.18..1089475.55 rows=14 width=27)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=1087236.16..1088473.91 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Sort  (cost=1087236.16..1087390.87 rows=61884 width=27)
                     Sort Key: lineitem.l_shipmode
                     ->  Parallel Hash Join  (cost=219271.50..1082311.03 rows=61884 width=27)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..843960.09 rows=61884 width=15)
                                 Filter: ((l_shipmode = ANY ('{RAIL,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01 00:00:00'::timestamp without time zone))
                           ->  Parallel Hash  (cost=161898.00..161898.00 rows=3125000 width=20)
                                 ->  Parallel Seq Scan on orders  (cost=0.00..161898.00 rows=3125000 width=20)
 JIT:
   Functions: 20
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

COMMIT;
COMMIT

Query 12 execution times in seconds: 0.193,0.185,0.171,0.174,0.187,0.181,0.176,0.183,0.188,0.192
Average execution time: 0.1830 seconds

BEGIN;
BEGIN
EXPLAIN
select
	c_count,
	count(*) as custdist
from
	(
		select
			c_custkey,
			count(o_orderkey)
		from
			customer left outer join orders on
				c_custkey = o_custkey
				and o_comment not like '%special%requests%'
		group by
			c_custkey
	) as c_orders (c_custkey, c_count)
group by
	c_count
order by
	custdist desc,
	c_count desc;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=712002.69..712003.19 rows=200 width=16)
   Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
   ->  HashAggregate  (cost=711993.05..711995.05 rows=200 width=16)
         Group Key: count(orders.o_orderkey)
         ->  Finalize HashAggregate  (cost=678594.61..700743.05 rows=750000 width=12)
               Group Key: customer.c_custkey
               Planned Partitions: 16
               ->  Gather  (cost=400589.23..582500.86 rows=1500000 width=12)
                     Workers Planned: 2
                     ->  Partial HashAggregate  (cost=399589.23..431500.86 rows=750000 width=12)
                           Group Key: customer.c_custkey
                           Planned Partitions: 16
                           ->  Parallel Hash Right Join  (cost=20279.68..223825.53 rows=3124688 width=8)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Parallel Seq Scan on orders  (cost=0.00..169710.50 rows=3124688 width=8)
                                       Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                                 ->  Parallel Hash  (cost=15152.43..15152.43 rows=312500 width=4)
                                       ->  Parallel Index Only Scan using customer_pkey on customer  (cost=0.42..15152.43 rows=312500 width=4)
 JIT:
   Functions: 16
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(21 rows)

COMMIT;
COMMIT

Query 13 execution times in seconds: 0.180,0.184,0.184,0.184,0.180,0.183,0.183,0.175,0.184,0.183
Average execution time: 0.1820 seconds

BEGIN;
BEGIN
EXPLAIN
select
	100.00 * sum(case
		when p_type like 'PROMO%'
			then l_extendedprice * (1 - l_discount)
		else 0
	end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue
from
	lineitem,
	part
where
	l_partkey = p_partkey
	and l_shipdate >= date '1995-04-01'
	and l_shipdate < cast(date '1995-04-01' + interval '1 month' as date);
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=741889.42..741889.44 rows=1 width=32)
   ->  Gather  (cost=741889.19..741889.40 rows=2 width=64)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=740889.19..740889.20 rows=1 width=64)
               ->  Parallel Hash Join  (cost=705475.53..738108.05 rows=158922 width=33)
                     Hash Cond: (part.p_partkey = lineitem.l_partkey)
                     ->  Parallel Seq Scan on part  (cost=0.00..24678.67 rows=416667 width=25)
                     ->  Parallel Hash  (cost=703482.23..703482.23 rows=159464 width=16)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=5227.26..703482.23 rows=159464 width=16)
                                 Recheck Cond: ((l_shipdate >= '1995-04-01'::date) AND (l_shipdate < '1995-05-01'::date))
                                 ->  Bitmap Index Scan on l_sd  (cost=0.00..5131.58 rows=382714 width=0)
                                       Index Cond: ((l_shipdate >= '1995-04-01'::date) AND (l_shipdate < '1995-05-01'::date))
 JIT:
   Functions: 17
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(15 rows)

COMMIT;
COMMIT

Query 14 execution times in seconds: 0.185,0.190,0.189,0.186,0.179,0.185,0.181,0.174,0.190,0.191
Average execution time: 0.1850 seconds

BEGIN;
BEGIN
create or replace view revenue0 (supplier_no, total_revenue) as
	select
		l_suppkey,
		sum(l_extendedprice * (1 - l_discount))
	from
		lineitem
	where
		l_shipdate >= '1994-09-01'
		and l_shipdate < date'1994-09-01' + interval '90 days'
	group by
		l_suppkey;
CREATE VIEW
EXPLAIN
select
	s_suppkey,
	s_name,
	s_address,
	s_phone,
	total_revenue
from
	supplier,
	revenue0
where
	s_suppkey = supplier_no
	and total_revenue = (
		select
			max(total_revenue)
		from
			revenue0
	)
order by
	s_suppkey;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=1602985.53..1617570.40 rows=248 width=103)
   InitPlan 1
     ->  Aggregate  (cost=808282.21..808282.22 rows=1 width=32)
           ->  Finalize GroupAggregate  (cost=794703.02..807661.25 rows=49677 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather Merge  (cost=794703.02..806295.13 rows=99354 width=36)
                       Workers Planned: 2
                       ->  Sort  (cost=793703.00..793827.19 rows=49677 width=36)
                             Sort Key: lineitem_1.l_suppkey
                             ->  Partial HashAggregate  (cost=784376.08..789828.12 rows=49677 width=36)
                                   Group Key: lineitem_1.l_suppkey
                                   Planned Partitions: 4
                                   ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..750210.72 rows=494702 width=16)
                                         Filter: ((l_shipdate >= '1994-09-01'::date) AND (l_shipdate < '1994-11-30 00:00:00'::timestamp without time zone))
   ->  Finalize GroupAggregate  (cost=794703.02..807785.44 rows=248 width=36)
         Group Key: lineitem.l_suppkey
         Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
         ->  Gather Merge  (cost=794703.02..806295.13 rows=99354 width=36)
               Workers Planned: 2
               ->  Sort  (cost=793703.00..793827.19 rows=49677 width=36)
                     Sort Key: lineitem.l_suppkey
                     ->  Partial HashAggregate  (cost=784376.08..789828.12 rows=49677 width=36)
                           Group Key: lineitem.l_suppkey
                           Planned Partitions: 4
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..750210.72 rows=494702 width=16)
                                 Filter: ((l_shipdate >= '1994-09-01'::date) AND (l_shipdate < '1994-11-30 00:00:00'::timestamp without time zone))
   ->  Index Scan using s_sk on supplier  (cost=0.29..6.05 rows=1 width=71)
         Index Cond: (s_suppkey = lineitem.l_suppkey)
 JIT:
   Functions: 25
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(31 rows)

drop view revenue0;
DROP VIEW
COMMIT;
COMMIT

Query 15 execution times in seconds: 0.190,0.197,0.183,0.179,0.185,0.180,0.185,0.182,0.193,0.178
Average execution time: 0.1852 seconds

BEGIN;
BEGIN
EXPLAIN
select
	p_brand,
	p_type,
	p_size,
	count(distinct ps_suppkey) as supplier_cnt
from
	partsupp,
	part
where
	p_partkey = ps_partkey
	and p_brand <> 'Brand#54'
	and p_type not like 'PROMO ANODIZED%'
	and p_size in (32, 28, 35, 45, 33, 49, 13, 48)
	and ps_suppkey not in (
		select
			s_suppkey
		from
			supplier
		where
			s_comment like '%Customer%Complaints%'
	)
group by
	p_brand,
	p_type,
	p_size
order by
	supplier_cnt desc,
	p_brand,
	p_type,
	p_size;
                                                                                          QUERY PLAN                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=182133.55..182332.72 rows=79667 width=44)
   Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
   ->  GroupAggregate  (cost=135152.17..173194.48 rows=79667 width=44)
         Group Key: part.p_brand, part.p_type, part.p_size
         ->  Gather Merge  (cost=135152.17..169452.71 rows=294510 width=40)
               Workers Planned: 2
               ->  Sort  (cost=134152.15..134458.93 rows=122712 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Parallel Hash Join  (cost=33433.06..120423.47 rows=122712 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Parallel Index Only Scan using ps_pk_sk on partsupp  (cost=1737.44..86540.34 rows=833333 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..1737.00 rows=5 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Parallel Hash  (cost=30928.67..30928.67 rows=61356 width=40)
                                 ->  Parallel Seq Scan on part  (cost=0.00..30928.67 rows=61356 width=40)
                                       Filter: ((p_brand <> 'Brand#54'::bpchar) AND ((p_type)::text !~~ 'PROMO ANODIZED%'::text) AND (p_size = ANY ('{32,28,35,45,33,49,13,48}'::integer[])))
 JIT:
   Functions: 23
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(21 rows)

COMMIT;
COMMIT

Query 16 execution times in seconds: 0.186,0.192,0.188,0.188,0.183,0.188,0.191,0.184,0.186,0.169
Average execution time: 0.1855 seconds

BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice) / 7.0 as avg_yearly
from
	lineitem,
	part
where
	p_partkey = l_partkey
	and p_brand = 'Brand#44'
	and p_container = 'JUMBO CAN'
	and l_quantity < (
		select
			0.2 * avg(l_quantity)
		from
			lineitem
		where
			l_partkey = p_partkey
	);
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=970608.80..970608.82 rows=1 width=32)
   ->  Hash Join  (cost=27873.94..970584.01 rows=9916 width=8)
         Hash Cond: (lineitem.l_partkey = part.p_partkey)
         Join Filter: (lineitem.l_quantity < (SubPlan 1))
         ->  Seq Scan on lineitem  (cost=0.00..862709.96 rows=29999796 width=17)
         ->  Hash  (cost=27861.50..27861.50 rows=995 width=4)
               ->  Gather  (cost=1000.00..27861.50 rows=995 width=4)
                     Workers Planned: 2
                     ->  Parallel Seq Scan on part  (cost=0.00..26762.00 rows=415 width=4)
                           Filter: ((p_brand = 'Brand#44'::bpchar) AND (p_container = 'JUMBO CAN'::bpchar))
         SubPlan 1
           ->  Aggregate  (cost=125.04..125.05 rows=1 width=32)
                 ->  Index Scan using l_pk on lineitem lineitem_1  (cost=0.44..124.96 rows=30 width=5)
                       Index Cond: (l_partkey = part.p_partkey)
 JIT:
   Functions: 24
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

COMMIT;
COMMIT

Query 17 execution times in seconds: 0.167,0.189,0.187,0.189,0.191,0.186,0.190,0.190,0.188,0.186
Average execution time: 0.1863 seconds

BEGIN;
BEGIN
EXPLAIN
select
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice,
	sum(l_quantity)
from
	customer,
	orders,
	lineitem
where
	o_orderkey in (
		select
			l_orderkey
		from
			lineitem
		group by
			l_orderkey having
				sum(l_quantity) > 313
	)
	and c_custkey = o_custkey
	and o_orderkey = l_orderkey
group by
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice
order by
	o_totalprice desc,
	o_orderdate
LIMIT 100;
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2181130.47..2181130.72 rows=100 width=71)
   ->  Sort  (cost=2181130.47..2182511.05 rows=552232 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=2038346.72..2160024.56 rows=552232 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Merge Join  (cost=2038346.72..2148979.92 rows=552232 width=44)
                     Merge Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Gather Merge  (cost=2038344.67..2102661.18 rows=552232 width=25)
                           Workers Planned: 2
                           ->  Sort  (cost=2037344.64..2037919.88 rows=230097 width=25)
                                 Sort Key: orders.o_custkey, orders.o_orderkey
                                 ->  Nested Loop  (cost=1.31..2011346.84 rows=230097 width=25)
                                       ->  Merge Join  (cost=0.87..1652065.31 rows=57525 width=24)
                                             Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Parallel Index Scan using orders_pkey on orders  (cost=0.43..284332.40 rows=3125000 width=20)
                                             ->  GroupAggregate  (cost=0.44..1359000.01 rows=138059 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Scan using l_ok on lineitem lineitem_1  (cost=0.44..1202788.38 rows=29999796 width=9)
                                       ->  Index Scan using l_ok on lineitem  (cost=0.44..5.53 rows=72 width=9)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                     ->  Index Scan using customer_pkey on customer  (cost=0.42..37541.43 rows=750000 width=23)
 JIT:
   Functions: 24
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(25 rows)

COMMIT;
COMMIT

Query 18 execution times in seconds: 0.190,0.191,0.194,0.182,0.188,0.193,0.192,0.187,0.193,0.193
Average execution time: 0.1903 seconds

BEGIN;
BEGIN
EXPLAIN
select
	sum(l_extendedprice* (1 - l_discount)) as revenue
from
	lineitem,
	part
where
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#11'
		and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')
		and l_quantity >= 3 and l_quantity <= 3+10
		and p_size between 1 and 5
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#43'
		and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')
		and l_quantity >= 15 and l_quantity <= 15+10
		and p_size between 1 and 10
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#11'
		and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')
		and l_quantity >= 23 and l_quantity <= 23+10
		and p_size between 1 and 15
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	);


 Finalize Aggregate  (cost=158988.12..158988.13 rows=1 width=32)
   ->  Gather  (cost=158987.90..158988.11 rows=2 width=32)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=157987.90..157987.91 rows=1 width=32)
               ->  Nested Loop  (cost=0.44..157986.15 rows=233 width=12)
                     ->  Parallel Seq Scan on part  (cost=0.00..38220.33 rows=1002 width=30)
                           Filter: ((p_size >= 1) AND (((p_brand = 'Brand#11'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#11'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                     ->  Index Scan using l_pk on lineitem  (cost=0.44..119.52 rows=1 width=21)
                           Index Cond: (l_partkey = part.p_partkey)
                           Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '3'::numeric) AND (l_quantity <= '13'::numeric)) OR ((l_quantity >= '15'::numeric) AND (l_quantity <= '25'::numeric)) OR ((l_quantity >= '23'::numeric) AND (l_quantity <= '33'::numeric))) AND (((part.p_brand = 'Brand#11'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '3'::numeric) AND (l_quantity <= '13'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '15'::numeric) AND (l_quantity <= '25'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#11'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '23'::numeric) AND (l_quantity <= '33'::numeric) AND (part.p_size <= 15))))
 JIT:
   Functions: 12
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(13 rows)

COMMIT;
COMMIT

Query 19 execution times in seconds: 0.174,0.189,0.188,0.189,0.189,0.190,0.187,0.179,0.180,0.177
Average execution time: 0.1842 seconds

BEGIN;
BEGIN
EXPLAIN
select
	s_name,
	s_address
from
	supplier,
	nation
where
	s_suppkey in (
		select
			ps_suppkey
		from
			partsupp
		where
			ps_partkey in (
				select
					p_partkey
				from
					part
				where
					p_name like 'snow%'
			)
			and ps_availqty > (
				select
					0.5 * sum(l_quantity)
				from
					lineitem
				where
					l_partkey = ps_partkey
					and l_suppkey = ps_suppkey
					and l_shipdate >= '1993-01-01'
					and l_shipdate < cast(date '1993-01-01' + interval '1 year' as date)
			)
	)
	and s_nationkey = n_nationkey
	and n_name = 'KENYA'
order by
	s_name;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=872195.00..872196.35 rows=539 width=51)
   Sort Key: supplier.s_name
   ->  Hash Semi Join  (cost=870969.36..872170.54 rows=539 width=51)
         Hash Cond: (supplier.s_suppkey = partsupp.ps_suppkey)
         ->  Nested Loop  (cost=23.79..1207.67 rows=2000 width=55)
               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                     Filter: (n_name = 'KENYA'::bpchar)
               ->  Bitmap Heap Scan on supplier  (cost=23.79..1186.36 rows=2000 width=59)
                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                     ->  Bitmap Index Scan on s_nk  (cost=0.00..23.29 rows=2000 width=0)
                           Index Cond: (s_nationkey = nation.n_nationkey)
         ->  Hash  (cost=870777.22..870777.22 rows=13468 width=4)
               ->  Nested Loop  (cost=0.43..870777.22 rows=13468 width=4)
                     ->  Seq Scan on part  (cost=0.00..33012.00 rows=10101 width=4)
                           Filter: ((p_name)::text ~~ 'snow%'::text)
                     ->  Index Scan using ps_pk on partsupp  (cost=0.43..82.91 rows=3 width=8)
                           Index Cond: (ps_partkey = part.p_partkey)
                           Filter: ((ps_availqty)::numeric > (SubPlan 1))
                           SubPlan 1
                             ->  Aggregate  (cost=8.47..8.48 rows=1 width=32)
                                   ->  Index Scan using l_sk_pk on lineitem  (cost=0.44..8.46 rows=1 width=5)
                                         Index Cond: ((l_suppkey = partsupp.ps_suppkey) AND (l_partkey = partsupp.ps_partkey))
                                         Filter: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01'::date))
 JIT:
   Functions: 30
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(26 rows)

COMMIT;
COMMIT

Query 20 execution times in seconds: 0.183,0.185,0.191,0.171,0.191,0.187,0.189,0.184,0.194,0.197
Average execution time: 0.1872 seconds

BEGIN;
BEGIN
EXPLAIN
select
	s_name,
	count(*) as numwait
from
	supplier,
	lineitem l1,
	orders,
	nation
where
	s_suppkey = l1.l_suppkey
	and o_orderkey = l1.l_orderkey
	and o_orderstatus = 'F'
	and l1.l_receiptdate > l1.l_commitdate
	and exists (
		select
			*
		from
			lineitem l2
		where
			l2.l_orderkey = l1.l_orderkey
			and l2.l_suppkey <> l1.l_suppkey
	)
	and not exists (
		select
			*
		from
			lineitem l3
		where
			l3.l_orderkey = l1.l_orderkey
			and l3.l_suppkey <> l1.l_suppkey
			and l3.l_receiptdate > l3.l_commitdate
	)
	and s_nationkey = n_nationkey
	and n_name = 'JORDAN'
group by
	s_name
order by
	numwait desc,
	s_name
LIMIT 100;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=950246.67..950246.67 rows=1 width=34)
   ->  Sort  (cost=950246.67..950246.67 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=950246.64..950246.66 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=950246.64..950246.64 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop  (cost=2513.74..950246.63 rows=1 width=26)
                           ->  Nested Loop Semi Join  (cost=2513.31..950240.45 rows=1 width=34)
                                 ->  Gather  (cost=2512.87..950229.91 rows=1 width=34)
                                       Workers Planned: 2
                                       ->  Nested Loop Anti Join  (cost=1512.87..949229.81 rows=1 width=34)
                                             ->  Parallel Hash Join  (cost=1512.43..737078.25 rows=166665 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..718960.94 rows=4166638 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Parallel Hash  (cost=1497.73..1497.73 rows=1176 width=30)
                                                         ->  Hash Join  (cost=1.32..1497.73 rows=1176 width=30)
                                                               Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on supplier  (cost=0.00..1406.12 rows=29412 width=34)
                                                               ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                           Filter: (n_name = 'JORDAN'::bpchar)
                                             ->  Index Scan using l_ok on lineitem l3  (cost=0.44..10.70 rows=24 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using l_ok on lineitem l2  (cost=0.44..10.52 rows=72 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: (l_suppkey <> l1.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..6.18 rows=1 width=4)
                                 Index Cond: (o_orderkey = l1.l_orderkey)
                                 Filter: (o_orderstatus = 'F'::bpchar)
 JIT:
   Functions: 44
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(35 rows)

COMMIT;
COMMIT

Query 21 execution times in seconds: 0.205,0.208,0.205,0.206,0.204,0.200,0.197,0.203,0.208,0.196
Average execution time: 0.2032 seconds

BEGIN;
BEGIN
EXPLAIN
select
	cntrycode,
	count(*) as numcust,
	sum(c_acctbal) as totacctbal
from
	(
		select
			substring(c_phone from 1 for 2) as cntrycode,
			c_acctbal
		from
			customer
		where
			substring(c_phone from 1 for 2) in
				('23', '28', '34', '12', '16', '33', '25')
			and c_acctbal > (
				select
					avg(c_acctbal)
				from
					customer
				where
					c_acctbal > 0.00
					and substring(c_phone from 1 for 2) in
						('23', '28', '34', '12', '16', '33', '25')
			)
			and not exists (
				select
					*
				from
					orders
				where
					o_custkey = c_custkey
			)
	) as vip
group by
	cntrycode
order by
	cntrycode;
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=57024.65..57535.29 rows=3826 width=72)
   Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
   InitPlan 1
     ->  Finalize Aggregate  (cost=27228.14..27228.15 rows=1 width=32)
           ->  Gather  (cost=27227.91..27228.12 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=26227.91..26227.92 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..26203.12 rows=9915 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{23,28,34,12,16,33,25}'::text[])))
   ->  Gather Merge  (cost=29796.50..30208.31 rows=3188 width=72)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=28796.48..28840.31 rows=1594 width=72)
               Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Sort  (cost=28796.48..28800.46 rows=1594 width=38)
                     Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                     ->  Nested Loop Anti Join  (cost=0.43..28711.69 rows=1594 width=38)
                           ->  Parallel Seq Scan on customer  (cost=0.00..26203.12 rows=3646 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{23,28,34,12,16,33,25}'::text[])))
                           ->  Index Only Scan using o_ck on orders  (cost=0.43..3.31 rows=18 width=4)
                                 Index Cond: (o_custkey = customer.c_custkey)
(20 rows)

COMMIT;
COMMIT

Query 22 execution times in seconds: 0.142,0.144,0.140,0.148,0.144,0.138,0.132,0.145,0.142,0.141
Average execution time: 0.1416 seconds


